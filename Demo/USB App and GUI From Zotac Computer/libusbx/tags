!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
386	.private/bd.cmd	/^set 386=$/;"	v
386	.private/bd.cmd	/^set 386=1$/;"	v
ALLOW_PARTIAL_READS	libusb/os/windows_usb.h	588;"	d
AMD64	.private/bd.cmd	/^set AMD64=$/;"	v
AMD64	.private/bd.cmd	/^set AMD64=1$/;"	v
API_EXPORTED	libusb/libusbi.h	49;"	d
APP_ABI	android/jni/Application.mk	/^APP_ABI := armeabi armeabi-v7a x86$/;"	m
ARRAYSIZE	examples/fxload.c	47;"	d	file:
ARRAYSIZE	libusb/libusbi.h	70;"	d
ARRAYSIZE	libusb/os/windows_common.h	58;"	d
AUTO_CLEAR_STALL	libusb/os/windows_usb.h	585;"	d
AUTO_FLUSH	libusb/os/windows_usb.h	589;"	d
AUTO_SUSPEND	libusb/os/windows_usb.h	592;"	d
AbortPipe	libusb/os/windows_usb.h	/^	WinUsb_AbortPipe_t AbortPipe;$/;"	m	struct:winusb_interface
ActualLength	libusb/os/windows_usb.h	/^	ULONG  ActualLength;$/;"	m	struct:USB_NODE_CONNECTION_NAME
ActualLength	libusb/os/windows_usb.h	/^	ULONG  ActualLength;$/;"	m	struct:USB_ROOT_HUB_NAME
ActualLength	libusb/os/windows_usb.h	/^	ULONG ActualLength;$/;"	m	struct:USB_NODE_CONNECTION_NAME_FIXED
ActualLength	libusb/os/windows_usb.h	/^	ULONG ActualLength;$/;"	m	struct:USB_ROOT_HUB_NAME_FIXED
B	examples/xusb.c	69;"	d	file:
BOMS_GET_MAX_LUN	examples/xusb.c	90;"	d	file:
BOMS_RESET	examples/xusb.c	89;"	d	file:
BUILD_ALT_DIR	.private/bd.cmd	/^set BUILD_ALT_DIR=%ORG_BUILD_ALT_DIR%$/;"	v
BUILD_CMD	msvc/ddk_build.cmd	/^set BUILD_CMD=build -bcwgZ -M2$/;"	v
BUILD_DEFAULT_TARGETS	.private/bd.cmd	/^set BUILD_DEFAULT_TARGETS=%ORG_BUILD_DEFAULT_TARGETS%$/;"	v
BUILD_DEFAULT_TARGETS	.private/bd.cmd	/^set BUILD_DEFAULT_TARGETS=-386$/;"	v
BUILD_DEFAULT_TARGETS	.private/bd.cmd	/^set BUILD_DEFAULT_TARGETS=-amd64$/;"	v
BitField	libusb/os/windows_usb.h	/^  USHORT  BitField;$/;"	m	struct:_HIDP_VALUE_CAPS
BitSize	libusb/os/windows_usb.h	/^  USHORT  BitSize;$/;"	m	struct:_HIDP_VALUE_CAPS
CALL_CHECK	examples/xusb.c	68;"	d	file:
CANCELLED	libusb/os/linux_usbfs.c	/^	CANCELLED,$/;"	e	enum:reap_action	file:
CBWCB	examples/xusb.c	/^	uint8_t CBWCB[16];$/;"	m	struct:command_block_wrapper	file:
CHECK_HID_AVAILABLE	libusb/os/windows_usb.c	121;"	d	file:
CHECK_INIT_POLLING	libusb/os/poll_windows.c	67;"	d	file:
CHECK_WINUSBX_AVAILABLE	libusb/os/windows_usb.c	116;"	d	file:
COMPLETED_EARLY	libusb/os/linux_usbfs.c	/^	COMPLETED_EARLY,$/;"	e	enum:reap_action	file:
CONFIGRET	libusb/os/windows_usb.h	/^typedef RETURN_TYPE CONFIGRET;$/;"	t
CONFIG_DESC_LENGTH	libusb/descriptor.c	31;"	d	file:
CR_NO_SUCH_DEVNODE	libusb/os/windows_usb.h	332;"	d
CR_SUCCESS	libusb/os/windows_usb.h	331;"	d
CTL_CODE	libusb/os/windows_usb.h	377;"	d
CTRL_IN	examples/dpfp.c	34;"	d	file:
CTRL_IN	examples/dpfp_threaded.c	35;"	d	file:
CTRL_OUT	examples/dpfp.c	35;"	d	file:
CTRL_OUT	examples/dpfp_threaded.c	36;"	d	file:
CapabilityFlags	libusb/os/windows_usb.h	/^	USB_HUB_CAP_FLAGS CapabilityFlags;$/;"	m	struct:USB_HUB_CAPABILITIES_EX
ConnectionIndex	libusb/os/windows_usb.h	/^		ULONG ConnectionIndex;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon5
ConnectionIndex	libusb/os/windows_usb.h	/^	ULONG  ConnectionIndex;$/;"	m	struct:USB_DESCRIPTOR_REQUEST
ConnectionIndex	libusb/os/windows_usb.h	/^	ULONG  ConnectionIndex;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX
ConnectionIndex	libusb/os/windows_usb.h	/^	ULONG  ConnectionIndex;$/;"	m	struct:USB_NODE_CONNECTION_NAME
ConnectionIndex	libusb/os/windows_usb.h	/^	ULONG ConnectionIndex;$/;"	m	struct:USB_NODE_CONNECTION_NAME_FIXED
ConnectionStatus	libusb/os/windows_usb.h	/^	USB_CONNECTION_STATUS  ConnectionStatus;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX
ContainerID	libusb/libusb.h	/^	uint8_t  ContainerID[16];$/;"	m	struct:libusb_container_id_descriptor
ControlTransfer	libusb/os/windows_usb.h	/^	WinUsb_ControlTransfer_t ControlTransfer;$/;"	m	struct:winusb_interface
CurrentConfigurationValue	libusb/os/windows_usb.h	/^	UCHAR  CurrentConfigurationValue;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX
DARWIN_CACHED_DEVICE	libusb/os/darwin_usb.c	58;"	d	file:
DEFAULT_VISIBILITY	Xcode/config.h	4;"	d
DEFAULT_VISIBILITY	android/config.h	48;"	d
DEFAULT_VISIBILITY	msvc/config.h	20;"	d
DESC_HEADER_LENGTH	libusb/descriptor.c	29;"	d	file:
DEVICE_CTX	libusb/libusbi.h	202;"	d
DEVICE_DESC_LENGTH	libusb/descriptor.c	30;"	d	file:
DEVICE_DESC_LENGTH	libusb/libusbi.h	51;"	d
DEVICE_SPEED	libusb/os/windows_usb.h	594;"	d
DEVINST	libusb/os/windows_usb.h	/^typedef DWORD DEVNODE, DEVINST;$/;"	t
DEVNODE	libusb/os/windows_usb.h	/^typedef DWORD DEVNODE, DEVINST;$/;"	t
DEVPATH	libusb/os/openbsd_usb.c	137;"	d	file:
DEV_PASS	libusb/os/windows_usb.c	1343;"	d	file:
DISABLE_STDOUT_REDIRECTION	tests/testlib.c	34;"	d	file:
DISCOVERED_DEVICES_SIZE_STEP	libusb/core.c	451;"	d	file:
DLL_DECLARE	libusb/os/windows_common.h	105;"	d
DLL_DECLARE_PREFIXED	libusb/os/windows_common.h	107;"	d
DLL_DECLARE_PREFIXNAME	libusb/os/windows_common.h	69;"	d
DLL_GET_MODULE_HANDLE	libusb/os/windows_common.h	75;"	d
DLL_GET_MODULE_HANDLE	libusb/os/windows_common.h	79;"	d
DLL_LOAD	libusb/os/windows_common.h	106;"	d
DLL_LOAD_LIBRARY	libusb/os/windows_common.h	76;"	d
DLL_LOAD_LIBRARY	libusb/os/windows_common.h	80;"	d
DLL_LOAD_PREFIXED	libusb/os/windows_common.h	108;"	d
DLL_LOAD_PREFIXNAME	libusb/os/windows_common.h	83;"	d
DLL_STRINGIFY	libusb/os/windows_common.h	74;"	d
DLL_STRINGIFY	libusb/os/windows_common.h	78;"	d
DUMMY_HANDLE	libusb/os/poll_windows.h	41;"	d
DataIndex	libusb/os/windows_usb.h	/^		USHORT  DataIndex, Reserved4;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon16
DataIndexMax	libusb/os/windows_usb.h	/^		USHORT  DataIndexMin, DataIndexMax;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon15
DataIndexMin	libusb/os/windows_usb.h	/^		USHORT  DataIndexMin, DataIndexMax;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon15
DesignatorIndex	libusb/os/windows_usb.h	/^		USHORT  DesignatorIndex, Reserved3;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon16
DesignatorMax	libusb/os/windows_usb.h	/^		USHORT  DesignatorMin, DesignatorMax;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon15
DesignatorMin	libusb/os/windows_usb.h	/^		USHORT  DesignatorMin, DesignatorMax;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon15
DeviceAddress	libusb/os/windows_usb.h	/^	USHORT  DeviceAddress;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX
DeviceCausedOvercurrent	libusb/os/windows_usb.h	/^	DeviceCausedOvercurrent,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceConnected	libusb/os/windows_usb.h	/^	DeviceConnected,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceDescriptor	libusb/os/windows_usb.h	/^	USB_DEVICE_DESCRIPTOR  DeviceDescriptor;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX
DeviceFailedEnumeration	libusb/os/windows_usb.h	/^	DeviceFailedEnumeration,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceGeneralFailure	libusb/os/windows_usb.h	/^	DeviceGeneralFailure,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceHubNestedTooDeeply	libusb/os/windows_usb.h	/^	DeviceHubNestedTooDeeply,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceInLegacyHub	libusb/os/windows_usb.h	/^	DeviceInLegacyHub$/;"	e	enum:USB_CONNECTION_STATUS
DeviceInterfaceID	libusb/os/darwin_usb.h	71;"	d
DeviceInterfaceID	libusb/os/darwin_usb.h	77;"	d
DeviceInterfaceID	libusb/os/darwin_usb.h	83;"	d
DeviceInterfaceID	libusb/os/darwin_usb.h	89;"	d
DeviceInterfaceID	libusb/os/darwin_usb.h	94;"	d
DeviceIsHub	libusb/os/windows_usb.h	/^	BOOLEAN  DeviceIsHub;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX
DeviceNotEnoughBandwidth	libusb/os/windows_usb.h	/^	DeviceNotEnoughBandwidth,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceNotEnoughPower	libusb/os/windows_usb.h	/^	DeviceNotEnoughPower,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceVersion	libusb/os/darwin_usb.h	72;"	d
DeviceVersion	libusb/os/darwin_usb.h	78;"	d
DeviceVersion	libusb/os/darwin_usb.h	84;"	d
DeviceVersion	libusb/os/darwin_usb.h	90;"	d
DeviceVersion	libusb/os/darwin_usb.h	95;"	d
E2BIG	msvc/errno.h	31;"	d
EACCES	msvc/errno.h	37;"	d
EAGAIN	msvc/errno.h	35;"	d
EBADF	msvc/errno.h	33;"	d
EBUSY	msvc/errno.h	40;"	d
ECHILD	msvc/errno.h	34;"	d
EDEADLK	msvc/errno.h	61;"	d
EDEADLOCK	msvc/errno.h	60;"	d
EDOM	msvc/errno.h	57;"	d
EEXIST	msvc/errno.h	41;"	d
EFAULT	msvc/errno.h	38;"	d
EFBIG	msvc/errno.h	51;"	d
EINTR	msvc/errno.h	28;"	d
EINVAL	msvc/errno.h	46;"	d
EIO	msvc/errno.h	29;"	d
EISDIR	msvc/errno.h	45;"	d
ELIDE_CODE	examples/getopt/getopt.c	56;"	d	file:
ELIDE_CODE	examples/getopt/getopt1.c	49;"	d	file:
EMFILE	msvc/errno.h	48;"	d
EMLINK	msvc/errno.h	55;"	d
ENABLE_LOGGING	Xcode/config.h	7;"	d
ENABLE_LOGGING	android/config.h	24;"	d
ENABLE_LOGGING	msvc/config.h	23;"	d
ENDPOINT_AUDIO_DESC_LENGTH	libusb/descriptor.c	34;"	d	file:
ENDPOINT_DESC_LENGTH	libusb/descriptor.c	33;"	d	file:
ENFILE	msvc/errno.h	47;"	d
ENODEV	msvc/errno.h	43;"	d
ENOENT	msvc/errno.h	26;"	d
ENOEXEC	msvc/errno.h	32;"	d
ENOFILE	msvc/errno.h	25;"	d
ENOMEM	msvc/errno.h	36;"	d
ENOSPC	msvc/errno.h	52;"	d
ENOTDIR	msvc/errno.h	44;"	d
ENOTTY	msvc/errno.h	49;"	d
ENVIRONMENT_REG_PATH	msvc/missing.c	28;"	d	file:
ENXIO	msvc/errno.h	30;"	d
EPERM	msvc/errno.h	24;"	d
EPIPE	msvc/errno.h	56;"	d
EP_DATA	examples/dpfp.c	33;"	d	file:
EP_DATA	examples/dpfp_threaded.c	34;"	d	file:
EP_DATA_IN	examples/sam3u_benchmark.c	34;"	d	file:
EP_INTR	examples/dpfp.c	32;"	d	file:
EP_INTR	examples/dpfp_threaded.c	33;"	d	file:
EP_ISO_IN	examples/sam3u_benchmark.c	35;"	d	file:
ERANGE	msvc/errno.h	58;"	d
EROFS	msvc/errno.h	54;"	d
ERROR	libusb/os/linux_usbfs.c	/^	ERROR,$/;"	e	enum:reap_action	file:
ERR_BUFFER_SIZE	libusb/os/windows_common.h	61;"	d
ERR_EXIT	examples/xusb.c	67;"	d	file:
ESPIPE	msvc/errno.h	53;"	d
ESRCH	msvc/errno.h	27;"	d
ETIMEDOUT	libusb/os/threads_windows.h	55;"	d
EXDEV	msvc/errno.h	42;"	d
EndpointDescriptor	libusb/os/windows_usb.h	/^	USB_ENDPOINT_DESCRIPTOR  EndpointDescriptor;$/;"	m	struct:USB_PIPE_INFO
FILE_ANY_ACCESS	libusb/os/windows_usb.h	367;"	d
FILE_DEVICE_UNKNOWN	libusb/os/windows_usb.h	370;"	d
FILE_DEVICE_USB	libusb/os/windows_usb.h	373;"	d
FIRMWARE	examples/fxload.c	79;"	d	file:
FXLOAD_VERSION	examples/fxload.c	43;"	d	file:
FX_KNOWN_DEVICES	examples/ezusb.h	73;"	d
FX_TYPE_AN21	examples/ezusb.h	42;"	d
FX_TYPE_FX1	examples/ezusb.h	43;"	d
FX_TYPE_FX2	examples/ezusb.h	44;"	d
FX_TYPE_FX2LP	examples/ezusb.h	45;"	d
FX_TYPE_FX3	examples/ezusb.h	46;"	d
FX_TYPE_MAX	examples/ezusb.h	47;"	d
FX_TYPE_NAMES	examples/ezusb.h	48;"	d
FX_TYPE_UNDEFINED	examples/ezusb.h	41;"	d
FeatureReportByteLength	libusb/os/windows_usb.h	/^  USHORT FeatureReportByteLength;$/;"	m	struct:__anon13
FlushPipe	libusb/os/windows_usb.h	/^	WinUsb_FlushPipe_t FlushPipe;$/;"	m	struct:winusb_interface
Free	libusb/os/windows_usb.h	/^	WinUsb_Free_t Free;$/;"	m	struct:winusb_interface
FullSpeed	libusb/os/windows_usb.h	596;"	d
GEN_PASS	libusb/os/windows_usb.c	1342;"	d	file:
GETOPT_INTERFACE_VERSION	examples/getopt/getopt.c	52;"	d	file:
GETOPT_INTERFACE_VERSION	examples/getopt/getopt1.c	45;"	d	file:
GUID_DEVINTERFACE_LIBUSB0_FILTER	libusb/os/windows_usb.h	/^const GUID GUID_DEVINTERFACE_LIBUSB0_FILTER = { 0xF9F3FF14, 0xAE21, 0x48A0, {0x8A, 0x25, 0x80, 0x11, 0xA7, 0xA9, 0x31, 0xD9} };$/;"	v
GUID_DEVINTERFACE_USB_DEVICE	libusb/os/windows_usb.h	/^const GUID GUID_DEVINTERFACE_USB_DEVICE = { 0xA5DCBF10, 0x6530, 0x11D2, {0x90, 0x1F, 0x00, 0xC0, 0x4F, 0xB9, 0x51, 0xED} };$/;"	v
GUID_DEVINTERFACE_USB_HOST_CONTROLLER	libusb/os/windows_usb.h	/^const GUID GUID_DEVINTERFACE_USB_HOST_CONTROLLER = { 0x3ABF6F2D, 0x71C4, 0x462A, {0x8A, 0x92, 0x1E, 0x68, 0x61, 0xE6, 0xAF, 0x27} };$/;"	v
GUID_DEVINTERFACE_USB_HUB	libusb/os/windows_usb.h	/^const GUID GUID_DEVINTERFACE_USB_HUB = { 0xF18A0E88, 0xC30C, 0x11D0, {0x88, 0x15, 0x00, 0xA0, 0xC9, 0x06, 0xBE, 0xD8} };$/;"	v
GetAssociatedInterface	libusb/os/windows_usb.h	/^	WinUsb_GetAssociatedInterface_t GetAssociatedInterface;$/;"	m	struct:winusb_interface
GetCurrentAlternateSetting	libusb/os/windows_usb.h	/^	WinUsb_GetCurrentAlternateSetting_t GetCurrentAlternateSetting;$/;"	m	struct:winusb_interface
GetDescriptor	libusb/os/windows_usb.h	/^	WinUsb_GetDescriptor_t GetDescriptor;$/;"	m	struct:winusb_interface
GetOverlappedResult	libusb/os/windows_usb.h	/^	WinUsb_GetOverlappedResult_t GetOverlappedResult;$/;"	m	struct:winusb_interface
GetPipePolicy	libusb/os/windows_usb.h	/^	WinUsb_GetPipePolicy_t GetPipePolicy;$/;"	m	struct:winusb_interface
GetPowerPolicy	libusb/os/windows_usb.h	/^	WinUsb_GetPowerPolicy_t GetPowerPolicy;$/;"	m	struct:winusb_interface
HANDLE_CTX	libusb/libusbi.h	203;"	d
HAVE_ASM_TYPES_H	android/config.h	78;"	d
HAVE_DLFCN_H	android/config.h	27;"	d
HAVE_GETTIMEOFDAY	Xcode/config.h	10;"	d
HAVE_GETTIMEOFDAY	android/config.h	30;"	d
HAVE_INTTYPES_H	android/config.h	33;"	d
HAVE_LINUX_FILTER_H	android/config.h	72;"	d
HAVE_LINUX_NETLINK_H	android/config.h	75;"	d
HAVE_MEMORY_H	android/config.h	51;"	d
HAVE_MISSING_H	msvc/config.h	37;"	d
HAVE_POLL_H	Xcode/config.h	13;"	d
HAVE_POLL_H	android/config.h	54;"	d
HAVE_SIGNAL_H	android/config.h	57;"	d
HAVE_SIGNAL_H	msvc/config.h	40;"	d
HAVE_STRUCT_TIMESPEC	libusb/os/threads_windows.h	45;"	d
HAVE_SYS_SOCKET_H	android/config.h	81;"	d
HAVE_SYS_STAT_H	android/config.h	60;"	d
HAVE_SYS_TIME_H	Xcode/config.h	16;"	d
HAVE_SYS_TIME_H	android/config.h	63;"	d
HAVE_SYS_TYPES_H	android/config.h	66;"	d
HAVE_SYS_TYPES_H	msvc/config.h	41;"	d
HAVE_UNISTD_H	android/config.h	69;"	d
HAVE_USBI_GETTIMEOFDAY	libusb/libusbi.h	450;"	d
HAVE_USBI_GETTIMEOFDAY	libusb/libusbi.h	454;"	d
HCD_PASS	libusb/os/windows_usb.c	1340;"	d	file:
HIDD_ATTRIBUTES	libusb/os/windows_usb.h	/^} HIDD_ATTRIBUTES, *PHIDD_ATTRIBUTES;$/;"	t	typeref:struct:__anon12
HIDP_CAPS	libusb/os/windows_usb.h	/^} HIDP_CAPS, *PHIDP_CAPS;$/;"	t	typeref:struct:__anon13
HIDP_REPORT_TYPE	libusb/os/windows_usb.h	/^} HIDP_REPORT_TYPE;$/;"	t	typeref:enum:_HIDP_REPORT_TYPE
HIDP_STATUS_SUCCESS	libusb/os/windows_usb.h	828;"	d
HIDP_VALUE_CAPS	libusb/os/windows_usb.h	/^} HIDP_VALUE_CAPS, *PHIDP_VALUE_CAPS;$/;"	t	typeref:struct:_HIDP_VALUE_CAPS
HID_BUFFER_CTL_CODE	libusb/os/windows_usb.h	166;"	d
HID_CTL_CODE	libusb/os/windows_usb.h	164;"	d
HID_GET_IDLE	examples/xusb.c	79;"	d	file:
HID_GET_PROTOCOL	examples/xusb.c	80;"	d	file:
HID_GET_REPORT	examples/xusb.c	78;"	d	file:
HID_IN_CTL_CODE	libusb/os/windows_usb.h	168;"	d
HID_IN_EP	libusb/os/windows_usb.h	156;"	d
HID_MAX_CONFIG_DESC_SIZE	libusb/os/windows_usb.h	153;"	d
HID_MAX_REPORT_SIZE	libusb/os/windows_usb.h	155;"	d
HID_OUT_CTL_CODE	libusb/os/windows_usb.h	170;"	d
HID_OUT_EP	libusb/os/windows_usb.h	157;"	d
HID_PASS	libusb/os/windows_usb.c	1344;"	d	file:
HID_REPORT_TYPE_FEATURE	examples/xusb.c	86;"	d	file:
HID_REPORT_TYPE_FEATURE	libusb/os/windows_usb.h	/^	HID_REPORT_TYPE_FEATURE = 0x03$/;"	e	enum:libusb_hid_report_type
HID_REPORT_TYPE_INPUT	examples/xusb.c	84;"	d	file:
HID_REPORT_TYPE_INPUT	libusb/os/windows_usb.h	/^	HID_REPORT_TYPE_INPUT = 0x01,$/;"	e	enum:libusb_hid_report_type
HID_REPORT_TYPE_OUTPUT	examples/xusb.c	85;"	d	file:
HID_REPORT_TYPE_OUTPUT	libusb/os/windows_usb.h	/^	HID_REPORT_TYPE_OUTPUT = 0x02,$/;"	e	enum:libusb_hid_report_type
HID_REQ_GET_IDLE	libusb/os/windows_usb.h	/^	HID_REQ_GET_IDLE = 0x02,$/;"	e	enum:libusb_hid_request_type
HID_REQ_GET_PROTOCOL	libusb/os/windows_usb.h	/^	HID_REQ_GET_PROTOCOL = 0x03,$/;"	e	enum:libusb_hid_request_type
HID_REQ_GET_REPORT	libusb/os/windows_usb.h	/^	HID_REQ_GET_REPORT = 0x01,$/;"	e	enum:libusb_hid_request_type
HID_REQ_SET_IDLE	libusb/os/windows_usb.h	/^	HID_REQ_SET_IDLE = 0x0A,$/;"	e	enum:libusb_hid_request_type
HID_REQ_SET_PROTOCOL	libusb/os/windows_usb.h	/^	HID_REQ_SET_PROTOCOL = 0x0B$/;"	e	enum:libusb_hid_request_type
HID_REQ_SET_REPORT	libusb/os/windows_usb.h	/^	HID_REQ_SET_REPORT = 0x09,$/;"	e	enum:libusb_hid_request_type
HID_SET_IDLE	examples/xusb.c	82;"	d	file:
HID_SET_PROTOCOL	examples/xusb.c	83;"	d	file:
HID_SET_REPORT	examples/xusb.c	81;"	d	file:
HTAB_SIZE	libusb/os/windows_usb.h	61;"	d
HUB_PASS	libusb/os/windows_usb.c	1341;"	d	file:
HasNull	libusb/os/windows_usb.h	/^  BOOLEAN  HasNull;$/;"	m	struct:_HIDP_VALUE_CAPS
HasOverlappedIoCompleted	libusb/os/poll_windows.h	37;"	d
HasOverlappedIoCompletedSync	libusb/os/poll_windows.h	39;"	d
HidP_Feature	libusb/os/windows_usb.h	/^  HidP_Feature$/;"	e	enum:_HIDP_REPORT_TYPE
HidP_Input	libusb/os/windows_usb.h	/^  HidP_Input,$/;"	e	enum:_HIDP_REPORT_TYPE
HidP_Output	libusb/os/windows_usb.h	/^  HidP_Output,$/;"	e	enum:_HIDP_REPORT_TYPE
HighSpeed	libusb/os/windows_usb.h	597;"	d
HubDescriptor	libusb/os/windows_usb.h	/^	USB_HUB_DESCRIPTOR  HubDescriptor;$/;"	m	struct:USB_HUB_INFORMATION
HubInformation	libusb/os/windows_usb.h	/^		USB_HUB_INFORMATION  HubInformation;$/;"	m	union:USB_NODE_INFORMATION::__anon9
HubIs2xCapable	libusb/os/windows_usb.h	/^  ULONG  HubIs2xCapable : 1;$/;"	m	struct:USB_HUB_CAPABILITIES
HubIsArmedWakeOnConnect	libusb/os/windows_usb.h	/^	ULONG HubIsArmedWakeOnConnect:1;$/;"	m	struct:USB_HUB_CAP_FLAGS
HubIsBusPowered	libusb/os/windows_usb.h	/^	BOOLEAN  HubIsBusPowered;$/;"	m	struct:USB_HUB_INFORMATION
HubIsHighSpeed	libusb/os/windows_usb.h	/^	ULONG HubIsHighSpeed:1;$/;"	m	struct:USB_HUB_CAP_FLAGS
HubIsHighSpeedCapable	libusb/os/windows_usb.h	/^	ULONG HubIsHighSpeedCapable:1;$/;"	m	struct:USB_HUB_CAP_FLAGS
HubIsMultiTt	libusb/os/windows_usb.h	/^	ULONG HubIsMultiTt:1;$/;"	m	struct:USB_HUB_CAP_FLAGS
HubIsMultiTtCapable	libusb/os/windows_usb.h	/^	ULONG HubIsMultiTtCapable:1;$/;"	m	struct:USB_HUB_CAP_FLAGS
HubIsRoot	libusb/os/windows_usb.h	/^	ULONG HubIsRoot:1;$/;"	m	struct:USB_HUB_CAP_FLAGS
IGNORE_RETVAL	tests/testlib.c	51;"	d	file:
IGNORE_SHORT_PACKETS	libusb/os/windows_usb.h	587;"	d
IMG_TYPE_BIX	examples/ezusb.h	53;"	d
IMG_TYPE_HEX	examples/ezusb.h	51;"	d
IMG_TYPE_IIC	examples/ezusb.h	52;"	d
IMG_TYPE_IMG	examples/ezusb.h	54;"	d
IMG_TYPE_MAX	examples/ezusb.h	55;"	d
IMG_TYPE_NAMES	examples/ezusb.h	56;"	d
IMG_TYPE_UNDEFINED	examples/ezusb.h	50;"	d
INQUIRY_LENGTH	examples/xusb.c	74;"	d	file:
INT16_C	msvc/stdint.h	241;"	d
INT16_MAX	msvc/stdint.h	133;"	d
INT16_MIN	msvc/stdint.h	128;"	d
INT32_C	msvc/stdint.h	242;"	d
INT32_MAX	msvc/stdint.h	134;"	d
INT32_MIN	msvc/stdint.h	129;"	d
INT64_C	msvc/stdint.h	245;"	d
INT64_MAX	msvc/stdint.h	135;"	d
INT64_MIN	msvc/stdint.h	130;"	d
INT8_C	msvc/stdint.h	240;"	d
INT8_MAX	msvc/stdint.h	132;"	d
INT8_MIN	msvc/stdint.h	127;"	d
INTERFACE_CLAIMED	libusb/os/windows_usb.h	64;"	d
INTERFACE_DESC_LENGTH	libusb/descriptor.c	32;"	d	file:
INTMAX_C	msvc/stdint.h	253;"	d
INTMAX_MAX	msvc/stdint.h	188;"	d
INTMAX_MIN	msvc/stdint.h	187;"	d
INTPTR_MAX	msvc/stdint.h	178;"	d
INTPTR_MAX	msvc/stdint.h	182;"	d
INTPTR_MIN	msvc/stdint.h	177;"	d
INTPTR_MIN	msvc/stdint.h	181;"	d
INTR_LENGTH	examples/dpfp.c	37;"	d	file:
INTR_LENGTH	examples/dpfp_threaded.c	38;"	d	file:
INT_FAST16_MAX	msvc/stdint.h	165;"	d
INT_FAST16_MIN	msvc/stdint.h	160;"	d
INT_FAST32_MAX	msvc/stdint.h	166;"	d
INT_FAST32_MIN	msvc/stdint.h	161;"	d
INT_FAST64_MAX	msvc/stdint.h	167;"	d
INT_FAST64_MIN	msvc/stdint.h	162;"	d
INT_FAST8_MAX	msvc/stdint.h	164;"	d
INT_FAST8_MIN	msvc/stdint.h	159;"	d
INT_LEAST16_MAX	msvc/stdint.h	149;"	d
INT_LEAST16_MIN	msvc/stdint.h	144;"	d
INT_LEAST32_MAX	msvc/stdint.h	150;"	d
INT_LEAST32_MIN	msvc/stdint.h	145;"	d
INT_LEAST64_MAX	msvc/stdint.h	151;"	d
INT_LEAST64_MIN	msvc/stdint.h	146;"	d
INT_LEAST8_MAX	msvc/stdint.h	148;"	d
INT_LEAST8_MIN	msvc/stdint.h	143;"	d
INVALID_FD	tests/testlib.c	50;"	d	file:
INVALID_WINFD	libusb/os/poll_windows.c	/^const struct winfd INVALID_WINFD = {-1, INVALID_HANDLE_VALUE, NULL, NULL, NULL, RW_NONE};$/;"	v	typeref:struct:winfd
IOCTL_HID_GET_FEATURE	libusb/os/windows_usb.h	173;"	d
IOCTL_HID_GET_INPUT_REPORT	libusb/os/windows_usb.h	174;"	d
IOCTL_HID_SET_FEATURE	libusb/os/windows_usb.h	175;"	d
IOCTL_HID_SET_OUTPUT_REPORT	libusb/os/windows_usb.h	176;"	d
IOCTL_USBFS_BULK	libusb/os/linux_usbfs.h	136;"	d
IOCTL_USBFS_CLAIMINTF	libusb/os/linux_usbfs.h	145;"	d
IOCTL_USBFS_CLAIM_PORT	libusb/os/linux_usbfs.h	154;"	d
IOCTL_USBFS_CLEAR_HALT	libusb/os/linux_usbfs.h	151;"	d
IOCTL_USBFS_CONNECT	libusb/os/linux_usbfs.h	153;"	d
IOCTL_USBFS_CONNECTINFO	libusb/os/linux_usbfs.h	147;"	d
IOCTL_USBFS_CONTROL	libusb/os/linux_usbfs.h	135;"	d
IOCTL_USBFS_DISCARDURB	libusb/os/linux_usbfs.h	142;"	d
IOCTL_USBFS_DISCONNECT	libusb/os/linux_usbfs.h	152;"	d
IOCTL_USBFS_DISCONNECT_CLAIM	libusb/os/linux_usbfs.h	157;"	d
IOCTL_USBFS_GETDRIVER	libusb/os/linux_usbfs.h	140;"	d
IOCTL_USBFS_GET_CAPABILITIES	libusb/os/linux_usbfs.h	156;"	d
IOCTL_USBFS_HUB_PORTINFO	libusb/os/linux_usbfs.h	149;"	d
IOCTL_USBFS_IOCTL	libusb/os/linux_usbfs.h	148;"	d
IOCTL_USBFS_REAPURB	libusb/os/linux_usbfs.h	143;"	d
IOCTL_USBFS_REAPURBNDELAY	libusb/os/linux_usbfs.h	144;"	d
IOCTL_USBFS_RELEASEINTF	libusb/os/linux_usbfs.h	146;"	d
IOCTL_USBFS_RELEASE_PORT	libusb/os/linux_usbfs.h	155;"	d
IOCTL_USBFS_RESET	libusb/os/linux_usbfs.h	150;"	d
IOCTL_USBFS_RESETEP	libusb/os/linux_usbfs.h	137;"	d
IOCTL_USBFS_SETCONFIG	libusb/os/linux_usbfs.h	139;"	d
IOCTL_USBFS_SETINTF	libusb/os/linux_usbfs.h	138;"	d
IOCTL_USBFS_SUBMITURB	libusb/os/linux_usbfs.h	141;"	d
IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION	libusb/os/windows_usb.h	410;"	d
IOCTL_USB_GET_HUB_CAPABILITIES	libusb/os/windows_usb.h	407;"	d
IOCTL_USB_GET_HUB_CAPABILITIES_EX	libusb/os/windows_usb.h	404;"	d
IOCTL_USB_GET_NODE_CONNECTION_ATTRIBUTES	libusb/os/windows_usb.h	422;"	d
IOCTL_USB_GET_NODE_CONNECTION_INFORMATION_EX	libusb/os/windows_usb.h	419;"	d
IOCTL_USB_GET_NODE_CONNECTION_NAME	libusb/os/windows_usb.h	425;"	d
IOCTL_USB_GET_NODE_INFORMATION	libusb/os/windows_usb.h	416;"	d
IOCTL_USB_GET_ROOT_HUB_NAME	libusb/os/windows_usb.h	413;"	d
IO_OBJECT_NULL	libusb/os/darwin_usb.h	104;"	d
IS_EPIN	libusb/libusbi.h	208;"	d
IS_EPOUT	libusb/libusbi.h	209;"	d
IS_XFERIN	libusb/libusbi.h	210;"	d
IS_XFEROUT	libusb/libusbi.h	211;"	d
ITRANSFER_CTX	libusb/libusbi.h	205;"	d
IWD	.private/bd.cmd	/^set IWD=%~dp0$/;"	v
Initialize	libusb/os/windows_usb.h	/^	WinUsb_Initialize_t Initialize;$/;"	m	struct:winusb_interface
InputReportByteLength	libusb/os/windows_usb.h	/^  USHORT InputReportByteLength;$/;"	m	struct:__anon13
InterfaceInterfaceID	libusb/os/darwin_usb.h	34;"	d
InterfaceInterfaceID	libusb/os/darwin_usb.h	40;"	d
InterfaceInterfaceID	libusb/os/darwin_usb.h	46;"	d
InterfaceInterfaceID	libusb/os/darwin_usb.h	52;"	d
InterfaceInterfaceID	libusb/os/darwin_usb.h	58;"	d
InterfaceVersion	libusb/os/darwin_usb.h	35;"	d
InterfaceVersion	libusb/os/darwin_usb.h	41;"	d
InterfaceVersion	libusb/os/darwin_usb.h	47;"	d
InterfaceVersion	libusb/os/darwin_usb.h	53;"	d
InterfaceVersion	libusb/os/darwin_usb.h	59;"	d
Interval	libusb/os/windows_usb.h	/^  UCHAR          Interval;$/;"	m	struct:__anon10
IsAbsolute	libusb/os/windows_usb.h	/^  BOOLEAN  IsAbsolute;$/;"	m	struct:_HIDP_VALUE_CAPS
IsAlias	libusb/os/windows_usb.h	/^  BOOLEAN  IsAlias;$/;"	m	struct:_HIDP_VALUE_CAPS
IsDesignatorRange	libusb/os/windows_usb.h	/^  BOOLEAN  IsDesignatorRange;$/;"	m	struct:_HIDP_VALUE_CAPS
IsRange	libusb/os/windows_usb.h	/^  BOOLEAN  IsRange;$/;"	m	struct:_HIDP_VALUE_CAPS
IsStringRange	libusb/os/windows_usb.h	/^  BOOLEAN  IsStringRange;$/;"	m	struct:_HIDP_VALUE_CAPS
KERNEL	libusb/os/linux_netlink.c	56;"	d	file:
KLIB_VERSION	libusb/os/windows_usb.h	/^} KLIB_VERSION;$/;"	t	typeref:struct:_KLIB_VERSION
KUSB_FNID	libusb/os/windows_usb.h	/^} KUSB_FNID; $/;"	t	typeref:enum:_KUSB_FNID
KUSB_FNID_AbortPipe	libusb/os/windows_usb.h	/^	KUSB_FNID_AbortPipe,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_COUNT	libusb/os/windows_usb.h	/^	KUSB_FNID_COUNT,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_ClaimInterface	libusb/os/windows_usb.h	/^	KUSB_FNID_ClaimInterface,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_Clone	libusb/os/windows_usb.h	/^	KUSB_FNID_Clone,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_ControlTransfer	libusb/os/windows_usb.h	/^	KUSB_FNID_ControlTransfer,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_FlushPipe	libusb/os/windows_usb.h	/^	KUSB_FNID_FlushPipe,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_Free	libusb/os/windows_usb.h	/^	KUSB_FNID_Free,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_GetAltInterface	libusb/os/windows_usb.h	/^	KUSB_FNID_GetAltInterface,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_GetAssociatedInterface	libusb/os/windows_usb.h	/^	KUSB_FNID_GetAssociatedInterface,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_GetConfiguration	libusb/os/windows_usb.h	/^	KUSB_FNID_GetConfiguration,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_GetCurrentAlternateSetting	libusb/os/windows_usb.h	/^	KUSB_FNID_GetCurrentAlternateSetting,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_GetCurrentFrameNumber	libusb/os/windows_usb.h	/^	KUSB_FNID_GetCurrentFrameNumber,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_GetDescriptor	libusb/os/windows_usb.h	/^	KUSB_FNID_GetDescriptor,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_GetOverlappedResult	libusb/os/windows_usb.h	/^	KUSB_FNID_GetOverlappedResult,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_GetPipePolicy	libusb/os/windows_usb.h	/^	KUSB_FNID_GetPipePolicy,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_GetPowerPolicy	libusb/os/windows_usb.h	/^	KUSB_FNID_GetPowerPolicy,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_GetProperty	libusb/os/windows_usb.h	/^	KUSB_FNID_GetProperty,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_Init	libusb/os/windows_usb.h	/^	KUSB_FNID_Init,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_Initialize	libusb/os/windows_usb.h	/^	KUSB_FNID_Initialize,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_IsoReadPipe	libusb/os/windows_usb.h	/^	KUSB_FNID_IsoReadPipe,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_IsoWritePipe	libusb/os/windows_usb.h	/^	KUSB_FNID_IsoWritePipe,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_QueryDeviceInformation	libusb/os/windows_usb.h	/^	KUSB_FNID_QueryDeviceInformation,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_QueryInterfaceSettings	libusb/os/windows_usb.h	/^	KUSB_FNID_QueryInterfaceSettings,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_QueryPipe	libusb/os/windows_usb.h	/^	KUSB_FNID_QueryPipe,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_ReadPipe	libusb/os/windows_usb.h	/^	KUSB_FNID_ReadPipe,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_ReleaseInterface	libusb/os/windows_usb.h	/^	KUSB_FNID_ReleaseInterface,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_ResetDevice	libusb/os/windows_usb.h	/^	KUSB_FNID_ResetDevice,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_ResetPipe	libusb/os/windows_usb.h	/^	KUSB_FNID_ResetPipe,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_SelectInterface	libusb/os/windows_usb.h	/^	KUSB_FNID_SelectInterface,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_SetAltInterface	libusb/os/windows_usb.h	/^	KUSB_FNID_SetAltInterface,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_SetConfiguration	libusb/os/windows_usb.h	/^	KUSB_FNID_SetConfiguration,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_SetCurrentAlternateSetting	libusb/os/windows_usb.h	/^	KUSB_FNID_SetCurrentAlternateSetting,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_SetPipePolicy	libusb/os/windows_usb.h	/^	KUSB_FNID_SetPipePolicy,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_SetPowerPolicy	libusb/os/windows_usb.h	/^	KUSB_FNID_SetPowerPolicy,$/;"	e	enum:_KUSB_FNID
KUSB_FNID_WritePipe	libusb/os/windows_usb.h	/^	KUSB_FNID_WritePipe,$/;"	e	enum:_KUSB_FNID
LIBUSBI_H	libusb/libusbi.h	22;"	d
LIBUSBX_API_VERSION	libusb/libusb.h	147;"	d
LIBUSBX_NULL_TEST	tests/libusbx_testlib.h	90;"	d
LIBUSBX_TESTLIB_H	tests/libusbx_testlib.h	21;"	d
LIBUSB_BM_LPM_SUPPORT	libusb/libusb.h	/^	LIBUSB_BM_LPM_SUPPORT = 2,$/;"	e	enum:libusb_usb_2_0_extension_attributes
LIBUSB_BM_LTM_SUPPORT	libusb/libusb.h	/^	LIBUSB_BM_LTM_SUPPORT = 2,$/;"	e	enum:libusb_ss_usb_device_capability_attributes
LIBUSB_BT_CONTAINER_ID	libusb/libusb.h	/^	LIBUSB_BT_CONTAINER_ID				= 4,$/;"	e	enum:libusb_bos_type
LIBUSB_BT_CONTAINER_ID_SIZE	libusb/libusb.h	303;"	d
LIBUSB_BT_SS_USB_DEVICE_CAPABILITY	libusb/libusb.h	/^	LIBUSB_BT_SS_USB_DEVICE_CAPABILITY		= 3,$/;"	e	enum:libusb_bos_type
LIBUSB_BT_SS_USB_DEVICE_CAPABILITY_SIZE	libusb/libusb.h	302;"	d
LIBUSB_BT_USB_2_0_EXTENSION	libusb/libusb.h	/^	LIBUSB_BT_USB_2_0_EXTENSION			= 2,$/;"	e	enum:libusb_bos_type
LIBUSB_BT_USB_2_0_EXTENSION_SIZE	libusb/libusb.h	301;"	d
LIBUSB_BT_WIRELESS_USB_DEVICE_CAPABILITY	libusb/libusb.h	/^	LIBUSB_BT_WIRELESS_USB_DEVICE_CAPABILITY	= 1,$/;"	e	enum:libusb_bos_type
LIBUSB_CALL	libusb/libusb.h	119;"	d
LIBUSB_CALL	libusb/libusb.h	121;"	d
LIBUSB_CAP_HAS_CAPABILITY	libusb/libusb.h	/^	LIBUSB_CAP_HAS_CAPABILITY = 0x0000,$/;"	e	enum:libusb_capability
LIBUSB_CAP_HAS_HID_ACCESS	libusb/libusb.h	/^	LIBUSB_CAP_HAS_HID_ACCESS = 0x0100,$/;"	e	enum:libusb_capability
LIBUSB_CAP_HAS_HOTPLUG	libusb/libusb.h	/^	LIBUSB_CAP_HAS_HOTPLUG = 0x0001,$/;"	e	enum:libusb_capability
LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER	libusb/libusb.h	/^	LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER = 0x0101$/;"	e	enum:libusb_capability
LIBUSB_CLASS_APPLICATION	libusb/libusb.h	/^	LIBUSB_CLASS_APPLICATION = 0xfe,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_AUDIO	libusb/libusb.h	/^	LIBUSB_CLASS_AUDIO = 1,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_COMM	libusb/libusb.h	/^	LIBUSB_CLASS_COMM = 2,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_CONTENT_SECURITY	libusb/libusb.h	/^	LIBUSB_CLASS_CONTENT_SECURITY = 0x0d,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_DATA	libusb/libusb.h	/^	LIBUSB_CLASS_DATA = 10,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_DIAGNOSTIC_DEVICE	libusb/libusb.h	/^	LIBUSB_CLASS_DIAGNOSTIC_DEVICE = 0xdc,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_HID	libusb/libusb.h	/^	LIBUSB_CLASS_HID = 3,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_HUB	libusb/libusb.h	/^	LIBUSB_CLASS_HUB = 9,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_IMAGE	libusb/libusb.h	/^	LIBUSB_CLASS_IMAGE = 6,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_MASS_STORAGE	libusb/libusb.h	/^	LIBUSB_CLASS_MASS_STORAGE = 8,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PERSONAL_HEALTHCARE	libusb/libusb.h	/^	LIBUSB_CLASS_PERSONAL_HEALTHCARE = 0x0f,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PER_INTERFACE	libusb/libusb.h	/^	LIBUSB_CLASS_PER_INTERFACE = 0,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PHYSICAL	libusb/libusb.h	/^	LIBUSB_CLASS_PHYSICAL = 5,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PRINTER	libusb/libusb.h	/^	LIBUSB_CLASS_PRINTER = 7,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PTP	libusb/libusb.h	/^	LIBUSB_CLASS_PTP = 6, \/* legacy name from libusb-0.1 usb.h *\/$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_SMART_CARD	libusb/libusb.h	/^	LIBUSB_CLASS_SMART_CARD = 0x0b,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_VENDOR_SPEC	libusb/libusb.h	/^	LIBUSB_CLASS_VENDOR_SPEC = 0xff$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_VIDEO	libusb/libusb.h	/^	LIBUSB_CLASS_VIDEO = 0x0e,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_WIRELESS	libusb/libusb.h	/^	LIBUSB_CLASS_WIRELESS = 0xe0,$/;"	e	enum:libusb_class_code
LIBUSB_COMPLETED	libusb/os/windows_usb.h	66;"	d
LIBUSB_CONTROL_SETUP_SIZE	libusb/libusb.h	890;"	d
LIBUSB_DARWIN_H	libusb/os/darwin_usb.h	21;"	d
LIBUSB_DEPRECATED_FOR	libusb/libusb.h	80;"	d
LIBUSB_DEPRECATED_FOR	libusb/libusb.h	83;"	d
LIBUSB_DT_BOS	libusb/libusb.h	/^	LIBUSB_DT_BOS = 0x0f,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_BOS_MAX_SIZE	libusb/libusb.h	306;"	d
LIBUSB_DT_BOS_SIZE	libusb/libusb.h	297;"	d
LIBUSB_DT_CONFIG	libusb/libusb.h	/^	LIBUSB_DT_CONFIG = 0x02,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_CONFIG_SIZE	libusb/libusb.h	291;"	d
LIBUSB_DT_DEVICE	libusb/libusb.h	/^	LIBUSB_DT_DEVICE = 0x01,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_DEVICE_CAPABILITY	libusb/libusb.h	/^	LIBUSB_DT_DEVICE_CAPABILITY = 0x10,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_DEVICE_CAPABILITY_SIZE	libusb/libusb.h	298;"	d
LIBUSB_DT_DEVICE_SIZE	libusb/libusb.h	290;"	d
LIBUSB_DT_ENDPOINT	libusb/libusb.h	/^	LIBUSB_DT_ENDPOINT = 0x05,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_ENDPOINT_AUDIO_SIZE	libusb/libusb.h	294;"	d
LIBUSB_DT_ENDPOINT_SIZE	libusb/libusb.h	293;"	d
LIBUSB_DT_HID	libusb/libusb.h	/^	LIBUSB_DT_HID = 0x21,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_HID_SIZE	libusb/os/windows_usb.h	152;"	d
LIBUSB_DT_HUB	libusb/libusb.h	/^	LIBUSB_DT_HUB = 0x29,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_HUB_NONVAR_SIZE	libusb/libusb.h	295;"	d
LIBUSB_DT_INTERFACE	libusb/libusb.h	/^	LIBUSB_DT_INTERFACE = 0x04,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_INTERFACE_SIZE	libusb/libusb.h	292;"	d
LIBUSB_DT_PHYSICAL	libusb/libusb.h	/^	LIBUSB_DT_PHYSICAL = 0x23,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_REPORT	libusb/libusb.h	/^	LIBUSB_DT_REPORT = 0x22,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_SS_ENDPOINT_COMPANION	libusb/libusb.h	/^	LIBUSB_DT_SS_ENDPOINT_COMPANION = 0x30$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_SS_ENDPOINT_COMPANION_SIZE	libusb/libusb.h	296;"	d
LIBUSB_DT_STRING	libusb/libusb.h	/^	LIBUSB_DT_STRING = 0x03,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_SUPERSPEED_HUB	libusb/libusb.h	/^	LIBUSB_DT_SUPERSPEED_HUB = 0x2a,$/;"	e	enum:libusb_descriptor_type
LIBUSB_ENDPOINT_ADDRESS_MASK	libusb/libusb.h	311;"	d
LIBUSB_ENDPOINT_DIR_MASK	libusb/libusb.h	312;"	d
LIBUSB_ENDPOINT_IN	libusb/libusb.h	/^	LIBUSB_ENDPOINT_IN = 0x80,$/;"	e	enum:libusb_endpoint_direction
LIBUSB_ENDPOINT_OUT	libusb/libusb.h	/^	LIBUSB_ENDPOINT_OUT = 0x00$/;"	e	enum:libusb_endpoint_direction
LIBUSB_ERROR_ACCESS	libusb/libusb.h	/^	LIBUSB_ERROR_ACCESS = -3,$/;"	e	enum:libusb_error
LIBUSB_ERROR_BUSY	libusb/libusb.h	/^	LIBUSB_ERROR_BUSY = -6,$/;"	e	enum:libusb_error
LIBUSB_ERROR_COUNT	libusb/libusb.h	1099;"	d
LIBUSB_ERROR_INTERRUPTED	libusb/libusb.h	/^	LIBUSB_ERROR_INTERRUPTED = -10,$/;"	e	enum:libusb_error
LIBUSB_ERROR_INVALID_PARAM	libusb/libusb.h	/^	LIBUSB_ERROR_INVALID_PARAM = -2,$/;"	e	enum:libusb_error
LIBUSB_ERROR_IO	libusb/libusb.h	/^	LIBUSB_ERROR_IO = -1,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NOT_FOUND	libusb/libusb.h	/^	LIBUSB_ERROR_NOT_FOUND = -5,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NOT_SUPPORTED	libusb/libusb.h	/^	LIBUSB_ERROR_NOT_SUPPORTED = -12,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NO_DEVICE	libusb/libusb.h	/^	LIBUSB_ERROR_NO_DEVICE = -4,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NO_MEM	libusb/libusb.h	/^	LIBUSB_ERROR_NO_MEM = -11,$/;"	e	enum:libusb_error
LIBUSB_ERROR_OTHER	libusb/libusb.h	/^	LIBUSB_ERROR_OTHER = -99,$/;"	e	enum:libusb_error
LIBUSB_ERROR_OVERFLOW	libusb/libusb.h	/^	LIBUSB_ERROR_OVERFLOW = -8,$/;"	e	enum:libusb_error
LIBUSB_ERROR_PIPE	libusb/libusb.h	/^	LIBUSB_ERROR_PIPE = -9,$/;"	e	enum:libusb_error
LIBUSB_ERROR_TIMEOUT	libusb/libusb.h	/^	LIBUSB_ERROR_TIMEOUT = -7,$/;"	e	enum:libusb_error
LIBUSB_FULL_SPEED_OPERATION	libusb/libusb.h	/^	LIBUSB_FULL_SPEED_OPERATION  = 2,$/;"	e	enum:libusb_supported_speed
LIBUSB_GETTIMEOFDAY_WIN32	libusb/libusbi.h	449;"	d
LIBUSB_H	libusb/libusb.h	25;"	d
LIBUSB_HIGH_SPEED_OPERATION	libusb/libusb.h	/^	LIBUSB_HIGH_SPEED_OPERATION  = 4,$/;"	e	enum:libusb_supported_speed
LIBUSB_HOTPLUG_ENUMERATE	libusb/libusb.h	/^	LIBUSB_HOTPLUG_ENUMERATE = 1,$/;"	e	enum:__anon1
LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED	libusb/libusb.h	/^	LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED = 0x01,$/;"	e	enum:__anon2
LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT	libusb/libusb.h	/^	LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT    = 0x02,$/;"	e	enum:__anon2
LIBUSB_HOTPLUG_MATCH_ANY	libusb/libusb.h	1865;"	d
LIBUSB_ISO_SYNC_TYPE_ADAPTIVE	libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_ADAPTIVE = 2,$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_SYNC_TYPE_ASYNC	libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_ASYNC = 1,$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_SYNC_TYPE_MASK	libusb/libusb.h	430;"	d
LIBUSB_ISO_SYNC_TYPE_NONE	libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_NONE = 0,$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_SYNC_TYPE_SYNC	libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_SYNC = 3$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_USAGE_TYPE_DATA	libusb/libusb.h	/^	LIBUSB_ISO_USAGE_TYPE_DATA = 0,$/;"	e	enum:libusb_iso_usage_type
LIBUSB_ISO_USAGE_TYPE_FEEDBACK	libusb/libusb.h	/^	LIBUSB_ISO_USAGE_TYPE_FEEDBACK = 1,$/;"	e	enum:libusb_iso_usage_type
LIBUSB_ISO_USAGE_TYPE_IMPLICIT	libusb/libusb.h	/^	LIBUSB_ISO_USAGE_TYPE_IMPLICIT = 2,$/;"	e	enum:libusb_iso_usage_type
LIBUSB_ISO_USAGE_TYPE_MASK	libusb/libusb.h	451;"	d
LIBUSB_LOG_LEVEL_DEBUG	libusb/libusb.h	/^	LIBUSB_LOG_LEVEL_DEBUG,$/;"	e	enum:libusb_log_level
LIBUSB_LOG_LEVEL_ERROR	libusb/libusb.h	/^	LIBUSB_LOG_LEVEL_ERROR,$/;"	e	enum:libusb_log_level
LIBUSB_LOG_LEVEL_INFO	libusb/libusb.h	/^	LIBUSB_LOG_LEVEL_INFO,$/;"	e	enum:libusb_log_level
LIBUSB_LOG_LEVEL_NONE	libusb/libusb.h	/^	LIBUSB_LOG_LEVEL_NONE = 0,$/;"	e	enum:libusb_log_level
LIBUSB_LOG_LEVEL_WARNING	libusb/libusb.h	/^	LIBUSB_LOG_LEVEL_WARNING,$/;"	e	enum:libusb_log_level
LIBUSB_LOW_SPEED_OPERATION	libusb/libusb.h	/^	LIBUSB_LOW_SPEED_OPERATION   = 1,$/;"	e	enum:libusb_supported_speed
LIBUSB_MAJOR	libusb/version.h	4;"	d
LIBUSB_MICRO	libusb/version.h	10;"	d
LIBUSB_MINOR	libusb/version.h	7;"	d
LIBUSB_NANO	libusb/version.h	13;"	d
LIBUSB_NANO	libusb/version_nano.h	1;"	d
LIBUSB_POLL_POSIX_H	libusb/os/poll_posix.h	2;"	d
LIBUSB_RC	libusb/version.h	17;"	d
LIBUSB_RECIPIENT_DEVICE	libusb/libusb.h	/^	LIBUSB_RECIPIENT_DEVICE = 0x00,$/;"	e	enum:libusb_request_recipient
LIBUSB_RECIPIENT_ENDPOINT	libusb/libusb.h	/^	LIBUSB_RECIPIENT_ENDPOINT = 0x02,$/;"	e	enum:libusb_request_recipient
LIBUSB_RECIPIENT_INTERFACE	libusb/libusb.h	/^	LIBUSB_RECIPIENT_INTERFACE = 0x01,$/;"	e	enum:libusb_request_recipient
LIBUSB_RECIPIENT_OTHER	libusb/libusb.h	/^	LIBUSB_RECIPIENT_OTHER = 0x03,$/;"	e	enum:libusb_request_recipient
LIBUSB_REQUEST_CLEAR_FEATURE	libusb/libusb.h	/^	LIBUSB_REQUEST_CLEAR_FEATURE = 0x01,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_CONFIGURATION	libusb/libusb.h	/^	LIBUSB_REQUEST_GET_CONFIGURATION = 0x08,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_DESCRIPTOR	libusb/libusb.h	/^	LIBUSB_REQUEST_GET_DESCRIPTOR = 0x06,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_INTERFACE	libusb/libusb.h	/^	LIBUSB_REQUEST_GET_INTERFACE = 0x0A,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_STATUS	libusb/libusb.h	/^	LIBUSB_REQUEST_GET_STATUS = 0x00,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_ADDRESS	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_ADDRESS = 0x05,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_CONFIGURATION	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_CONFIGURATION = 0x09,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_DESCRIPTOR	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_DESCRIPTOR = 0x07,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_FEATURE	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_FEATURE = 0x03,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_INTERFACE	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_INTERFACE = 0x0B,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_SEL	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_SEL = 0x30,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SYNCH_FRAME	libusb/libusb.h	/^	LIBUSB_REQUEST_SYNCH_FRAME = 0x0C,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_TYPE_CLASS	libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_CLASS = (0x01 << 5),$/;"	e	enum:libusb_request_type
LIBUSB_REQUEST_TYPE_RESERVED	libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_RESERVED = (0x03 << 5)$/;"	e	enum:libusb_request_type
LIBUSB_REQUEST_TYPE_STANDARD	libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_STANDARD = (0x00 << 5),$/;"	e	enum:libusb_request_type
LIBUSB_REQUEST_TYPE_VENDOR	libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_VENDOR = (0x02 << 5),$/;"	e	enum:libusb_request_type
LIBUSB_REQ_IN	libusb/os/windows_usb.h	160;"	d
LIBUSB_REQ_OUT	libusb/os/windows_usb.h	161;"	d
LIBUSB_REQ_RECIPIENT	libusb/os/windows_usb.h	158;"	d
LIBUSB_REQ_TYPE	libusb/os/windows_usb.h	159;"	d
LIBUSB_ROOT_ABS	android/jni/examples.mk	/^LIBUSB_ROOT_ABS:= $(LOCAL_PATH)\/..\/..$/;"	m
LIBUSB_ROOT_ABS	android/jni/libusb.mk	/^LIBUSB_ROOT_ABS:= $(LOCAL_PATH)\/..\/..$/;"	m
LIBUSB_ROOT_ABS	android/jni/tests.mk	/^LIBUSB_ROOT_ABS:= $(LOCAL_PATH)\/..\/..$/;"	m
LIBUSB_ROOT_REL	android/jni/examples.mk	/^LIBUSB_ROOT_REL:= ..\/..$/;"	m
LIBUSB_ROOT_REL	android/jni/libusb.mk	/^LIBUSB_ROOT_REL:= ..\/..$/;"	m
LIBUSB_ROOT_REL	android/jni/tests.mk	/^LIBUSB_ROOT_REL:= ..\/..$/;"	m
LIBUSB_SET_ISOCH_DELAY	libusb/libusb.h	/^	LIBUSB_SET_ISOCH_DELAY = 0x31,$/;"	e	enum:libusb_standard_request
LIBUSB_SPEED_FULL	libusb/libusb.h	/^	LIBUSB_SPEED_FULL = 2,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_HIGH	libusb/libusb.h	/^	LIBUSB_SPEED_HIGH = 3,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_LOW	libusb/libusb.h	/^	LIBUSB_SPEED_LOW = 1,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_SUPER	libusb/libusb.h	/^	LIBUSB_SPEED_SUPER = 4,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_UNKNOWN	libusb/libusb.h	/^	LIBUSB_SPEED_UNKNOWN = 0,$/;"	e	enum:libusb_speed
LIBUSB_SUCCESS	libusb/libusb.h	/^	LIBUSB_SUCCESS = 0,$/;"	e	enum:libusb_error
LIBUSB_SUPER_SPEED_OPERATION	libusb/libusb.h	/^	LIBUSB_SUPER_SPEED_OPERATION = 8,$/;"	e	enum:libusb_supported_speed
LIBUSB_THREADS_POSIX_H	libusb/os/threads_posix.h	22;"	d
LIBUSB_THREADS_WINDOWS_H	libusb/os/threads_windows.h	22;"	d
LIBUSB_TRANSFER_ADD_ZERO_PACKET	libusb/libusb.h	/^	LIBUSB_TRANSFER_ADD_ZERO_PACKET = 1 << 3,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_CANCELLED	libusb/libusb.h	/^	LIBUSB_TRANSFER_CANCELLED,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_COMPLETED	libusb/libusb.h	/^	LIBUSB_TRANSFER_COMPLETED,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_ERROR	libusb/libusb.h	/^	LIBUSB_TRANSFER_ERROR,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_FREE_BUFFER	libusb/libusb.h	/^	LIBUSB_TRANSFER_FREE_BUFFER = 1<<1,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_FREE_TRANSFER	libusb/libusb.h	/^	LIBUSB_TRANSFER_FREE_TRANSFER = 1<<2,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_NO_DEVICE	libusb/libusb.h	/^	LIBUSB_TRANSFER_NO_DEVICE,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_OVERFLOW	libusb/libusb.h	/^	LIBUSB_TRANSFER_OVERFLOW,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_SHORT_NOT_OK	libusb/libusb.h	/^	LIBUSB_TRANSFER_SHORT_NOT_OK = 1<<0,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_STALL	libusb/libusb.h	/^	LIBUSB_TRANSFER_STALL,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_TIMED_OUT	libusb/libusb.h	/^	LIBUSB_TRANSFER_TIMED_OUT,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_TO_USBI_TRANSFER	libusb/libusbi.h	392;"	d
LIBUSB_TRANSFER_TYPE_BULK	libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_BULK = 2,$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_CONTROL	libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_CONTROL = 0,$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_INTERRUPT	libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_INTERRUPT = 3$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_ISOCHRONOUS	libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_ISOCHRONOUS = 1,$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_MASK	libusb/libusb.h	326;"	d
LIBUSB_USBFS_H	libusb/os/linux_usbfs.h	22;"	d
LIST_COUNT	tests/stress.c	109;"	d	file:
LIST_COUNT	tests/stress.c	76;"	d	file:
LIST_SEPARATOR	libusb/os/windows_usb.h	60;"	d
LOADER	examples/fxload.c	80;"	d	file:
LOCAL_EXPORT_C_INCLUDES	android/jni/libusb.mk	/^LOCAL_EXPORT_C_INCLUDES := \\$/;"	m
LOCAL_EXPORT_C_INCLUDES	android/jni/tests.mk	/^LOCAL_EXPORT_C_INCLUDES := \\$/;"	m
LOCAL_LDLIBS	android/jni/libusb.mk	/^LOCAL_LDLIBS := -llog$/;"	m
LOCAL_MODULE	android/jni/examples.mk	/^LOCAL_MODULE:= dpfp$/;"	m
LOCAL_MODULE	android/jni/examples.mk	/^LOCAL_MODULE:= dpfp_threaded$/;"	m
LOCAL_MODULE	android/jni/examples.mk	/^LOCAL_MODULE:= fxload$/;"	m
LOCAL_MODULE	android/jni/examples.mk	/^LOCAL_MODULE:= hotplugtest$/;"	m
LOCAL_MODULE	android/jni/examples.mk	/^LOCAL_MODULE:= listdevs$/;"	m
LOCAL_MODULE	android/jni/examples.mk	/^LOCAL_MODULE:= sam3u_benchmark$/;"	m
LOCAL_MODULE	android/jni/examples.mk	/^LOCAL_MODULE:= xusb$/;"	m
LOCAL_MODULE	android/jni/libusb.mk	/^LOCAL_MODULE := libusb1.0$/;"	m
LOCAL_MODULE	android/jni/tests.mk	/^LOCAL_MODULE := testlib$/;"	m
LOCAL_MODULE	android/jni/tests.mk	/^LOCAL_MODULE:= stress$/;"	m
LOCAL_PATH	android/jni/Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_PATH	android/jni/examples.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_PATH	android/jni/libusb.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_PATH	android/jni/tests.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_SRC_FILES	android/jni/examples.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_SRC_FILES	android/jni/libusb.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_SRC_FILES	android/jni/tests.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOG_BODY	libusb/libusbi.h	175;"	d
LOG_BODY	libusb/libusbi.h	183;"	d
LOOP_BREAK	libusb/os/windows_usb.c	43;"	d	file:
LOOP_CHECK	libusb/os/windows_usb.c	42;"	d	file:
LPUKW_CONTROL_HEADER	libusb/os/wince_usb.h	/^} UKW_CONTROL_HEADER, *PUKW_CONTROL_HEADER, *LPUKW_CONTROL_HEADER;$/;"	t	typeref:struct:__anon20
LPUKW_DEVICE	libusb/os/wince_usb.h	/^typedef UKW_DEVICE *PUKW_DEVICE, *LPUKW_DEVICE;$/;"	t
LPUKW_DEVICE_DESCRIPTOR	libusb/os/wince_usb.h	/^} UKW_DEVICE_DESCRIPTOR, *PUKW_DEVICE_DESCRIPTOR, *LPUKW_DEVICE_DESCRIPTOR;$/;"	t	typeref:struct:__anon19
LibK_GetProcAddress_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *LibK_GetProcAddress_t)($/;"	t
LibK_GetVersion_t	libusb/os/windows_usb.h	/^typedef VOID (WINAPI *LibK_GetVersion_t)($/;"	t
LinkCollection	libusb/os/windows_usb.h	/^  USHORT  LinkCollection;$/;"	m	struct:_HIDP_VALUE_CAPS
LinkUsage	libusb/os/windows_usb.h	/^  USAGE  LinkUsage;$/;"	m	struct:_HIDP_VALUE_CAPS
LinkUsagePage	libusb/os/windows_usb.h	/^  USAGE  LinkUsagePage;$/;"	m	struct:_HIDP_VALUE_CAPS
LogicalMax	libusb/os/windows_usb.h	/^  LONG  LogicalMin, LogicalMax;$/;"	m	struct:_HIDP_VALUE_CAPS
LogicalMin	libusb/os/windows_usb.h	/^  LONG  LogicalMin, LogicalMax;$/;"	m	struct:_HIDP_VALUE_CAPS
LowSpeed	libusb/os/windows_usb.h	595;"	d
MAX	libusb/libusbi.h	148;"	d
MAXIMUM_TRANSFER_SIZE	libusb/os/windows_usb.h	591;"	d
MAX_BULK_BUFFER_LENGTH	libusb/os/linux_usbfs.h	85;"	d
MAX_CTRL_BUFFER_LENGTH	libusb/os/linux_usbfs.h	86;"	d
MAX_CTRL_BUFFER_LENGTH	libusb/os/windows_usb.h	52;"	d
MAX_DEVICE_COUNT	libusb/os/wince_usb.h	31;"	d
MAX_ENUM_GUIDS	libusb/os/windows_usb.c	1338;"	d	file:
MAX_FDS	libusb/os/poll_windows.h	52;"	d
MAX_GUID_STRING_LENGTH	libusb/os/windows_usb.h	57;"	d
MAX_HID_DESCRIPTOR_SIZE	libusb/os/windows_usb.h	56;"	d
MAX_HID_REPORT_SIZE	libusb/os/windows_usb.h	55;"	d
MAX_ISO_BUFFER_LENGTH	libusb/os/linux_usbfs.h	84;"	d
MAX_KEY_LENGTH	libusb/os/windows_usb.h	59;"	d
MAX_OS_FD_LENGTH	examples/xusb.c	700;"	d	file:
MAX_PATH_LENGTH	libusb/os/windows_usb.h	58;"	d
MAX_TIMER_SEMAPHORES	libusb/os/windows_common.h	63;"	d
MAX_USB_DEVICES	libusb/os/windows_usb.h	53;"	d
MAX_USB_STRING_LENGTH	libusb/os/windows_usb.h	54;"	d
METHOD_BUFFERED	libusb/os/windows_usb.h	364;"	d
MIN	libusb/libusbi.h	147;"	d
MISSING_H	msvc/missing.h	21;"	d
MODE_AWAIT_FINGER_OFF	examples/dpfp.c	/^	MODE_AWAIT_FINGER_OFF = 0x12,$/;"	e	enum:__anon29	file:
MODE_AWAIT_FINGER_OFF	examples/dpfp_threaded.c	/^	MODE_AWAIT_FINGER_OFF = 0x12,$/;"	e	enum:__anon27	file:
MODE_AWAIT_FINGER_ON	examples/dpfp.c	/^	MODE_AWAIT_FINGER_ON = 0x10,$/;"	e	enum:__anon29	file:
MODE_AWAIT_FINGER_ON	examples/dpfp_threaded.c	/^	MODE_AWAIT_FINGER_ON = 0x10,$/;"	e	enum:__anon27	file:
MODE_CAPTURE	examples/dpfp.c	/^	MODE_CAPTURE = 0x20,$/;"	e	enum:__anon29	file:
MODE_CAPTURE	examples/dpfp_threaded.c	/^	MODE_CAPTURE = 0x20,$/;"	e	enum:__anon27	file:
MODE_INIT	examples/dpfp.c	/^	MODE_INIT = 0x00,$/;"	e	enum:__anon29	file:
MODE_INIT	examples/dpfp_threaded.c	/^	MODE_INIT = 0x00,$/;"	e	enum:__anon27	file:
MODE_READY	examples/dpfp.c	/^	MODE_READY = 0x80,$/;"	e	enum:__anon29	file:
MODE_READY	examples/dpfp_threaded.c	/^	MODE_READY = 0x80,$/;"	e	enum:__anon27	file:
MODE_SHUT_UP	examples/dpfp.c	/^	MODE_SHUT_UP = 0x30,$/;"	e	enum:__anon29	file:
MODE_SHUT_UP	examples/dpfp_threaded.c	/^	MODE_SHUT_UP = 0x30,$/;"	e	enum:__anon27	file:
MSBUILD_CMD	.private/bwince.cmd	/^set MSBUILD_CMD=msbuild.exe$/;"	v
MSBUILD_CONFIGURATION	.private/bwince.cmd	/^set MSBUILD_CONFIGURATION=Release$/;"	v
MSBUILD_TARGET	.private/bwince.cmd	/^set MSBUILD_TARGET=Rebuild$/;"	v
Major	libusb/os/windows_usb.h	/^	INT Major;$/;"	m	struct:_KLIB_VERSION
MaxPower	libusb/libusb.h	/^	uint8_t  MaxPower;$/;"	m	struct:libusb_config_descriptor
MaxPower	libusb/os/windows_usb.h	/^  UCHAR  MaxPower;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR
MaximumPacketSize	libusb/os/windows_usb.h	/^  USHORT         MaximumPacketSize;$/;"	m	struct:__anon10
MiParentInformation	libusb/os/windows_usb.h	/^		USB_MI_PARENT_INFORMATION  MiParentInformation;$/;"	m	union:USB_NODE_INFORMATION::__anon9
Micro	libusb/os/windows_usb.h	/^	INT Micro;$/;"	m	struct:_KLIB_VERSION
Minor	libusb/os/windows_usb.h	/^	INT Minor;$/;"	m	struct:_KLIB_VERSION
NONOPTION_P	examples/getopt/getopt.c	541;"	d	file:
NORMAL	libusb/os/linux_usbfs.c	/^	NORMAL = 0,$/;"	e	enum:reap_action	file:
NULL	examples/getopt/getopt1.c	63;"	d	file:
NULL_PATH	tests/testlib.c	43;"	d	file:
NULL_PATH	tests/testlib.c	48;"	d	file:
Nano	libusb/os/windows_usb.h	/^	INT Nano;$/;"	m	struct:_KLIB_VERSION
NoDeviceConnected	libusb/os/windows_usb.h	/^	NoDeviceConnected,$/;"	e	enum:USB_CONNECTION_STATUS
NodeName	libusb/os/windows_usb.h	/^	WCHAR  NodeName[1];$/;"	m	struct:USB_NODE_CONNECTION_NAME
NodeName	libusb/os/windows_usb.h	/^	WCHAR NodeName[MAX_PATH_LENGTH];$/;"	m	struct:USB_NODE_CONNECTION_NAME_FIXED
NodeType	libusb/os/windows_usb.h	/^	USB_HUB_NODE  NodeType;$/;"	m	struct:USB_NODE_INFORMATION
NotRange	libusb/os/windows_usb.h	/^	  } NotRange;$/;"	m	union:_HIDP_VALUE_CAPS::__anon14	typeref:struct:_HIDP_VALUE_CAPS::__anon14::__anon16
NumberFeatureButtonCaps	libusb/os/windows_usb.h	/^  USHORT NumberFeatureButtonCaps;$/;"	m	struct:__anon13
NumberFeatureDataIndices	libusb/os/windows_usb.h	/^  USHORT NumberFeatureDataIndices;$/;"	m	struct:__anon13
NumberFeatureValueCaps	libusb/os/windows_usb.h	/^  USHORT NumberFeatureValueCaps;$/;"	m	struct:__anon13
NumberInputButtonCaps	libusb/os/windows_usb.h	/^  USHORT NumberInputButtonCaps;$/;"	m	struct:__anon13
NumberInputDataIndices	libusb/os/windows_usb.h	/^  USHORT NumberInputDataIndices;$/;"	m	struct:__anon13
NumberInputValueCaps	libusb/os/windows_usb.h	/^  USHORT NumberInputValueCaps;$/;"	m	struct:__anon13
NumberLinkCollectionNodes	libusb/os/windows_usb.h	/^  USHORT NumberLinkCollectionNodes;$/;"	m	struct:__anon13
NumberOfInterfaces	libusb/os/windows_usb.h	/^  ULONG  NumberOfInterfaces;$/;"	m	struct:USB_MI_PARENT_INFORMATION
NumberOfOpenPipes	libusb/os/windows_usb.h	/^	ULONG  NumberOfOpenPipes;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX
NumberOutputButtonCaps	libusb/os/windows_usb.h	/^  USHORT NumberOutputButtonCaps;$/;"	m	struct:__anon13
NumberOutputDataIndices	libusb/os/windows_usb.h	/^  USHORT NumberOutputDataIndices;$/;"	m	struct:__anon13
NumberOutputValueCaps	libusb/os/windows_usb.h	/^  USHORT NumberOutputValueCaps;$/;"	m	struct:__anon13
ORG_BUILDARCH	.private/bd.cmd	/^set ORG_BUILDARCH=%_BUILDARCH%$/;"	v
ORG_BUILD_ALT_DIR	.private/bd.cmd	/^set ORG_BUILD_ALT_DIR=%BUILD_ALT_DIR%$/;"	v
ORG_BUILD_DEFAULT_TARGETS	.private/bd.cmd	/^set ORG_BUILD_DEFAULT_TARGETS=%BUILD_DEFAULT_TARGETS%$/;"	v
ORG_PATH	.private/bd.cmd	/^set ORG_PATH=%PATH%$/;"	v
OS_DARWIN	Xcode/config.h	19;"	d
OS_LINUX	android/config.h	36;"	d
OS_WINCE	msvc/config.h	36;"	d
OS_WINDOWS	msvc/config.h	39;"	d
OutputReportByteLength	libusb/os/windows_usb.h	/^  USHORT OutputReportByteLength;$/;"	m	struct:__anon13
PATH	.private/bd.cmd	/^set PATH=%BASEDIR%\\bin\\x86;%BASEDIR%\\bin\\x86\\x86$/;"	v
PATH	.private/bd.cmd	/^set PATH=%BASEDIR%\\bin\\x86\\amd64;%BASEDIR%\\bin\\x86$/;"	v
PATH	.private/bd.cmd	/^set PATH=%ORG_PATH%$/;"	v
PDEVINST	libusb/os/windows_usb.h	/^typedef DEVNODE *PDEVNODE, *PDEVINST;$/;"	t
PDEVNODE	libusb/os/windows_usb.h	/^typedef DEVNODE *PDEVNODE, *PDEVINST;$/;"	t
PERMUTE	examples/getopt/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon31	file:
PHIDD_ATTRIBUTES	libusb/os/windows_usb.h	/^} HIDD_ATTRIBUTES, *PHIDD_ATTRIBUTES;$/;"	t	typeref:struct:__anon12
PHIDP_CAPS	libusb/os/windows_usb.h	/^} HIDP_CAPS, *PHIDP_CAPS;$/;"	t	typeref:struct:__anon13
PHIDP_PREPARSED_DATA	libusb/os/windows_usb.h	/^typedef void* PHIDP_PREPARSED_DATA;$/;"	t
PHIDP_VALUE_CAPS	libusb/os/windows_usb.h	/^} HIDP_VALUE_CAPS, *PHIDP_VALUE_CAPS;$/;"	t	typeref:struct:_HIDP_VALUE_CAPS
PID	examples/xusb.c	/^static uint16_t VID, PID;$/;"	v	file:
PIPE_TRANSFER_TIMEOUT	libusb/os/windows_usb.h	586;"	d
PKLIB_VERSION	libusb/os/windows_usb.h	/^typedef KLIB_VERSION* PKLIB_VERSION;$/;"	t
PLATFORM_POSTFIX	.private/bwince.cmd	/^set PLATFORM_POSTFIX=)$/;"	v
PLATFORM_PREFIX	.private/bwince.cmd	/^set PLATFORM_PREFIX=STANDARDSDK_500 ($/;"	v
POLLERR	libusb/os/poll_windows.h	57;"	d
POLLHUP	libusb/os/poll_windows.h	58;"	d
POLLIN	libusb/os/poll_windows.h	54;"	d
POLLNVAL	libusb/os/poll_windows.h	59;"	d
POLLOUT	libusb/os/poll_windows.h	56;"	d
POLLPRI	libusb/os/poll_windows.h	55;"	d
POLL_NFDS_TYPE	Xcode/config.h	22;"	d
POLL_NFDS_TYPE	android/config.h	42;"	d
POLL_NFDS_TYPE	msvc/config.h	32;"	d
PRINT_UNSUPPORTED_API	libusb/os/windows_usb.h	132;"	d
PRIX16	msvc/inttypes.h	140;"	d
PRIX32	msvc/inttypes.h	141;"	d
PRIX64	msvc/inttypes.h	142;"	d
PRIX8	msvc/inttypes.h	139;"	d
PRIXFAST16	msvc/inttypes.h	150;"	d
PRIXFAST32	msvc/inttypes.h	151;"	d
PRIXFAST64	msvc/inttypes.h	152;"	d
PRIXFAST8	msvc/inttypes.h	149;"	d
PRIXLEAST16	msvc/inttypes.h	145;"	d
PRIXLEAST32	msvc/inttypes.h	146;"	d
PRIXLEAST64	msvc/inttypes.h	147;"	d
PRIXLEAST8	msvc/inttypes.h	144;"	d
PRIXMAX	msvc/inttypes.h	154;"	d
PRIXPTR	msvc/inttypes.h	241;"	d
PRIXPTR	msvc/inttypes.h	253;"	d
PRId16	msvc/inttypes.h	53;"	d
PRId32	msvc/inttypes.h	54;"	d
PRId64	msvc/inttypes.h	55;"	d
PRId8	msvc/inttypes.h	52;"	d
PRIdFAST16	msvc/inttypes.h	63;"	d
PRIdFAST32	msvc/inttypes.h	64;"	d
PRIdFAST64	msvc/inttypes.h	65;"	d
PRIdFAST8	msvc/inttypes.h	62;"	d
PRIdLEAST16	msvc/inttypes.h	58;"	d
PRIdLEAST32	msvc/inttypes.h	59;"	d
PRIdLEAST64	msvc/inttypes.h	60;"	d
PRIdLEAST8	msvc/inttypes.h	57;"	d
PRIdMAX	msvc/inttypes.h	67;"	d
PRIdPTR	msvc/inttypes.h	236;"	d
PRIdPTR	msvc/inttypes.h	248;"	d
PRIi16	msvc/inttypes.h	70;"	d
PRIi32	msvc/inttypes.h	71;"	d
PRIi64	msvc/inttypes.h	72;"	d
PRIi8	msvc/inttypes.h	69;"	d
PRIiFAST16	msvc/inttypes.h	80;"	d
PRIiFAST32	msvc/inttypes.h	81;"	d
PRIiFAST64	msvc/inttypes.h	82;"	d
PRIiFAST8	msvc/inttypes.h	79;"	d
PRIiLEAST16	msvc/inttypes.h	75;"	d
PRIiLEAST32	msvc/inttypes.h	76;"	d
PRIiLEAST64	msvc/inttypes.h	77;"	d
PRIiLEAST8	msvc/inttypes.h	74;"	d
PRIiMAX	msvc/inttypes.h	84;"	d
PRIiPTR	msvc/inttypes.h	237;"	d
PRIiPTR	msvc/inttypes.h	249;"	d
PRIo16	msvc/inttypes.h	87;"	d
PRIo32	msvc/inttypes.h	88;"	d
PRIo64	msvc/inttypes.h	89;"	d
PRIo8	msvc/inttypes.h	86;"	d
PRIoFAST16	msvc/inttypes.h	97;"	d
PRIoFAST32	msvc/inttypes.h	98;"	d
PRIoFAST64	msvc/inttypes.h	99;"	d
PRIoFAST8	msvc/inttypes.h	96;"	d
PRIoLEAST16	msvc/inttypes.h	92;"	d
PRIoLEAST32	msvc/inttypes.h	93;"	d
PRIoLEAST64	msvc/inttypes.h	94;"	d
PRIoLEAST8	msvc/inttypes.h	91;"	d
PRIoMAX	msvc/inttypes.h	101;"	d
PRIoPTR	msvc/inttypes.h	238;"	d
PRIoPTR	msvc/inttypes.h	250;"	d
PRIu16	msvc/inttypes.h	105;"	d
PRIu32	msvc/inttypes.h	106;"	d
PRIu64	msvc/inttypes.h	107;"	d
PRIu8	msvc/inttypes.h	104;"	d
PRIuFAST16	msvc/inttypes.h	116;"	d
PRIuFAST32	msvc/inttypes.h	117;"	d
PRIuFAST64	msvc/inttypes.h	118;"	d
PRIuFAST8	msvc/inttypes.h	115;"	d
PRIuLEAST16	msvc/inttypes.h	111;"	d
PRIuLEAST32	msvc/inttypes.h	112;"	d
PRIuLEAST64	msvc/inttypes.h	113;"	d
PRIuLEAST8	msvc/inttypes.h	110;"	d
PRIuMAX	msvc/inttypes.h	120;"	d
PRIuPTR	msvc/inttypes.h	239;"	d
PRIuPTR	msvc/inttypes.h	251;"	d
PRIx16	msvc/inttypes.h	123;"	d
PRIx32	msvc/inttypes.h	124;"	d
PRIx64	msvc/inttypes.h	125;"	d
PRIx8	msvc/inttypes.h	122;"	d
PRIxFAST16	msvc/inttypes.h	133;"	d
PRIxFAST32	msvc/inttypes.h	134;"	d
PRIxFAST64	msvc/inttypes.h	135;"	d
PRIxFAST8	msvc/inttypes.h	132;"	d
PRIxLEAST16	msvc/inttypes.h	128;"	d
PRIxLEAST32	msvc/inttypes.h	129;"	d
PRIxLEAST64	msvc/inttypes.h	130;"	d
PRIxLEAST8	msvc/inttypes.h	127;"	d
PRIxMAX	msvc/inttypes.h	137;"	d
PRIxPTR	msvc/inttypes.h	240;"	d
PRIxPTR	msvc/inttypes.h	252;"	d
PTRDIFF_MAX	msvc/stdint.h	194;"	d
PTRDIFF_MAX	msvc/stdint.h	197;"	d
PTRDIFF_MIN	msvc/stdint.h	193;"	d
PTRDIFF_MIN	msvc/stdint.h	196;"	d
PUKW_CONTROL_HEADER	libusb/os/wince_usb.h	/^} UKW_CONTROL_HEADER, *PUKW_CONTROL_HEADER, *LPUKW_CONTROL_HEADER;$/;"	t	typeref:struct:__anon20
PUKW_DEVICE	libusb/os/wince_usb.h	/^typedef UKW_DEVICE *PUKW_DEVICE, *LPUKW_DEVICE;$/;"	t
PUKW_DEVICE_DESCRIPTOR	libusb/os/wince_usb.h	/^} UKW_DEVICE_DESCRIPTOR, *PUKW_DEVICE_DESCRIPTOR, *LPUKW_DEVICE_DESCRIPTOR;$/;"	t	typeref:struct:__anon19
PUSB_CONFIGURATION_DESCRIPTOR	libusb/os/windows_usb.h	/^} USB_CONFIGURATION_DESCRIPTOR, *PUSB_CONFIGURATION_DESCRIPTOR;$/;"	t	typeref:struct:USB_CONFIGURATION_DESCRIPTOR
PUSB_CONNECTION_STATUS	libusb/os/windows_usb.h	/^} USB_CONNECTION_STATUS, *PUSB_CONNECTION_STATUS;$/;"	t	typeref:enum:USB_CONNECTION_STATUS
PUSB_DESCRIPTOR_REQUEST	libusb/os/windows_usb.h	/^} USB_DESCRIPTOR_REQUEST, *PUSB_DESCRIPTOR_REQUEST;$/;"	t	typeref:struct:USB_DESCRIPTOR_REQUEST
PUSB_DEVICE_DESCRIPTOR	libusb/os/windows_usb.h	/^typedef struct libusb_device_descriptor USB_DEVICE_DESCRIPTOR, *PUSB_DEVICE_DESCRIPTOR;$/;"	t	typeref:struct:
PUSB_ENDPOINT_DESCRIPTOR	libusb/os/windows_usb.h	/^} USB_ENDPOINT_DESCRIPTOR, *PUSB_ENDPOINT_DESCRIPTOR;$/;"	t	typeref:struct:USB_ENDPOINT_DESCRIPTOR
PUSB_HUB_CAPABILITIES	libusb/os/windows_usb.h	/^} USB_HUB_CAPABILITIES, *PUSB_HUB_CAPABILITIES;$/;"	t	typeref:struct:USB_HUB_CAPABILITIES
PUSB_HUB_CAPABILITIES_EX	libusb/os/windows_usb.h	/^} USB_HUB_CAPABILITIES_EX, *PUSB_HUB_CAPABILITIES_EX;$/;"	t	typeref:struct:USB_HUB_CAPABILITIES_EX
PUSB_HUB_CAP_FLAGS	libusb/os/windows_usb.h	/^} USB_HUB_CAP_FLAGS, *PUSB_HUB_CAP_FLAGS;$/;"	t	typeref:struct:USB_HUB_CAP_FLAGS
PUSB_HUB_DESCRIPTOR	libusb/os/windows_usb.h	/^} USB_HUB_DESCRIPTOR, *PUSB_HUB_DESCRIPTOR;$/;"	t	typeref:struct:USB_HUB_DESCRIPTOR
PUSB_HUB_INFORMATION	libusb/os/windows_usb.h	/^} USB_HUB_INFORMATION, *PUSB_HUB_INFORMATION;$/;"	t	typeref:struct:USB_HUB_INFORMATION
PUSB_INTERFACE_DESCRIPTOR	libusb/os/windows_usb.h	/^} USB_INTERFACE_DESCRIPTOR, *PUSB_INTERFACE_DESCRIPTOR;$/;"	t	typeref:struct:USB_INTERFACE_DESCRIPTOR
PUSB_MI_PARENT_INFORMATION	libusb/os/windows_usb.h	/^} USB_MI_PARENT_INFORMATION, *PUSB_MI_PARENT_INFORMATION;$/;"	t	typeref:struct:USB_MI_PARENT_INFORMATION
PUSB_NODE_CONNECTION_INFORMATION_EX	libusb/os/windows_usb.h	/^} USB_NODE_CONNECTION_INFORMATION_EX, *PUSB_NODE_CONNECTION_INFORMATION_EX;$/;"	t	typeref:struct:USB_NODE_CONNECTION_INFORMATION_EX
PUSB_NODE_CONNECTION_NAME	libusb/os/windows_usb.h	/^} USB_NODE_CONNECTION_NAME, *PUSB_NODE_CONNECTION_NAME;$/;"	t	typeref:struct:USB_NODE_CONNECTION_NAME
PUSB_NODE_INFORMATION	libusb/os/windows_usb.h	/^} USB_NODE_INFORMATION, *PUSB_NODE_INFORMATION;$/;"	t	typeref:struct:USB_NODE_INFORMATION
PUSB_PIPE_INFO	libusb/os/windows_usb.h	/^} USB_PIPE_INFO, *PUSB_PIPE_INFO;$/;"	t	typeref:struct:USB_PIPE_INFO
PUSB_ROOT_HUB_NAME	libusb/os/windows_usb.h	/^} USB_ROOT_HUB_NAME, *PUSB_ROOT_HUB_NAME;$/;"	t	typeref:struct:USB_ROOT_HUB_NAME
PWD	.private/bwince.cmd	/^set PWD=%~dp0$/;"	v
PWD	msvc/ddk_build.cmd	/^set PWD=%~dp0$/;"	v
PWINUSB_INTERFACE_HANDLE	libusb/os/windows_usb.h	/^typedef void *WINUSB_INTERFACE_HANDLE, *PWINUSB_INTERFACE_HANDLE;$/;"	t
PWINUSB_PIPE_INFORMATION	libusb/os/windows_usb.h	/^} WINUSB_PIPE_INFORMATION, *PWINUSB_PIPE_INFORMATION;$/;"	t	typeref:struct:__anon10
PWINUSB_SETUP_PACKET	libusb/os/windows_usb.h	/^} WINUSB_SETUP_PACKET, *PWINUSB_SETUP_PACKET;$/;"	t	typeref:struct:__anon11
PhysicalMax	libusb/os/windows_usb.h	/^  LONG  PhysicalMin, PhysicalMax;$/;"	m	struct:_HIDP_VALUE_CAPS
PhysicalMin	libusb/os/windows_usb.h	/^  LONG  PhysicalMin, PhysicalMax;$/;"	m	struct:_HIDP_VALUE_CAPS
PipeId	libusb/os/windows_usb.h	/^  UCHAR          PipeId;$/;"	m	struct:__anon10
PipeType	libusb/os/windows_usb.h	/^  USBD_PIPE_TYPE PipeType;$/;"	m	struct:__anon10
ProductID	libusb/os/windows_usb.h	/^	USHORT ProductID;$/;"	m	struct:__anon12
QueryDeviceInformation	libusb/os/windows_usb.h	/^	WinUsb_QueryDeviceInformation_t QueryDeviceInformation;$/;"	m	struct:winusb_interface
QueryInterfaceSettings	libusb/os/windows_usb.h	/^	WinUsb_QueryInterfaceSettings_t QueryInterfaceSettings;$/;"	m	struct:winusb_interface
QueryPipe	libusb/os/windows_usb.h	/^	WinUsb_QueryPipe_t QueryPipe;$/;"	m	struct:winusb_interface
RAW_IO	libusb/os/windows_usb.h	590;"	d
READ_CAPACITY_LENGTH	examples/xusb.c	75;"	d	file:
REQUEST_SENSE_LENGTH	examples/xusb.c	73;"	d	file:
REQUIRE_ORDER	examples/getopt/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon31	file:
RETRY_LIMIT	examples/ezusb.c	497;"	d	file:
RETRY_MAX	examples/xusb.c	72;"	d	file:
RETURN_IN_ORDER	examples/getopt/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon31	file:
RETURN_TYPE	libusb/os/windows_usb.h	/^typedef DWORD RETURN_TYPE;$/;"	t
RW_INTERNAL	examples/ezusb.c	119;"	d	file:
RW_MEMORY	examples/ezusb.c	120;"	d	file:
RW_NONE	libusb/os/poll_windows.h	/^	RW_NONE,$/;"	e	enum:rw_type
RW_READ	libusb/os/poll_windows.h	/^	RW_READ,$/;"	e	enum:rw_type
RW_WRITE	libusb/os/poll_windows.h	/^	RW_WRITE,$/;"	e	enum:rw_type
Range	libusb/os/windows_usb.h	/^	  } Range;$/;"	m	union:_HIDP_VALUE_CAPS::__anon14	typeref:struct:_HIDP_VALUE_CAPS::__anon14::__anon15
ReadPipe	libusb/os/windows_usb.h	/^	WinUsb_ReadPipe_t ReadPipe;$/;"	m	struct:winusb_interface
ReportCount	libusb/os/windows_usb.h	/^  USHORT  ReportCount;$/;"	m	struct:_HIDP_VALUE_CAPS
ReportID	libusb/os/windows_usb.h	/^  UCHAR  ReportID;$/;"	m	struct:_HIDP_VALUE_CAPS
Reserved	libusb/os/windows_usb.h	/^  UCHAR  Reserved;$/;"	m	struct:_HIDP_VALUE_CAPS
Reserved	libusb/os/windows_usb.h	/^  USHORT Reserved[17];$/;"	m	struct:__anon13
Reserved1	libusb/os/windows_usb.h	/^		USAGE  Usage, Reserved1;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon16
Reserved2	libusb/os/windows_usb.h	/^		USHORT  StringIndex, Reserved2;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon16
Reserved2	libusb/os/windows_usb.h	/^  USHORT  Reserved2[5];$/;"	m	struct:_HIDP_VALUE_CAPS
Reserved3	libusb/os/windows_usb.h	/^		USHORT  DesignatorIndex, Reserved3;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon16
Reserved4	libusb/os/windows_usb.h	/^		USHORT  DataIndex, Reserved4;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon16
ReservedMBZ	libusb/os/windows_usb.h	/^	ULONG ReservedMBZ:26;$/;"	m	struct:USB_HUB_CAP_FLAGS
ResetDevice	libusb/os/windows_usb.h	/^	WinUsb_ResetDevice_t ResetDevice;$/;"	m	struct:winusb_interface
ResetPipe	libusb/os/windows_usb.h	/^	WinUsb_ResetPipe_t ResetPipe;$/;"	m	struct:winusb_interface
RootHubName	libusb/os/windows_usb.h	/^	WCHAR  RootHubName[1];$/;"	m	struct:USB_ROOT_HUB_NAME
RootHubName	libusb/os/windows_usb.h	/^	WCHAR RootHubName[MAX_PATH_LENGTH];$/;"	m	struct:USB_ROOT_HUB_NAME_FIXED
SCNd16	msvc/inttypes.h	163;"	d
SCNd32	msvc/inttypes.h	164;"	d
SCNd64	msvc/inttypes.h	165;"	d
SCNd8	msvc/inttypes.h	268;"	d
SCNdFAST16	msvc/inttypes.h	171;"	d
SCNdFAST32	msvc/inttypes.h	172;"	d
SCNdFAST64	msvc/inttypes.h	173;"	d
SCNdFAST8	msvc/inttypes.h	270;"	d
SCNdLEAST16	msvc/inttypes.h	167;"	d
SCNdLEAST32	msvc/inttypes.h	168;"	d
SCNdLEAST64	msvc/inttypes.h	169;"	d
SCNdLEAST8	msvc/inttypes.h	269;"	d
SCNdMAX	msvc/inttypes.h	175;"	d
SCNdPTR	msvc/inttypes.h	242;"	d
SCNdPTR	msvc/inttypes.h	254;"	d
SCNi16	msvc/inttypes.h	177;"	d
SCNi32	msvc/inttypes.h	178;"	d
SCNi64	msvc/inttypes.h	179;"	d
SCNi8	msvc/inttypes.h	272;"	d
SCNiFAST16	msvc/inttypes.h	185;"	d
SCNiFAST32	msvc/inttypes.h	186;"	d
SCNiFAST64	msvc/inttypes.h	187;"	d
SCNiFAST8	msvc/inttypes.h	274;"	d
SCNiLEAST16	msvc/inttypes.h	181;"	d
SCNiLEAST32	msvc/inttypes.h	182;"	d
SCNiLEAST64	msvc/inttypes.h	183;"	d
SCNiLEAST8	msvc/inttypes.h	273;"	d
SCNiMAX	msvc/inttypes.h	189;"	d
SCNiPTR	msvc/inttypes.h	243;"	d
SCNiPTR	msvc/inttypes.h	255;"	d
SCNo16	msvc/inttypes.h	191;"	d
SCNo32	msvc/inttypes.h	192;"	d
SCNo64	msvc/inttypes.h	193;"	d
SCNo8	msvc/inttypes.h	276;"	d
SCNoFAST16	msvc/inttypes.h	199;"	d
SCNoFAST32	msvc/inttypes.h	200;"	d
SCNoFAST64	msvc/inttypes.h	201;"	d
SCNoFAST8	msvc/inttypes.h	278;"	d
SCNoLEAST16	msvc/inttypes.h	195;"	d
SCNoLEAST32	msvc/inttypes.h	196;"	d
SCNoLEAST64	msvc/inttypes.h	197;"	d
SCNoLEAST8	msvc/inttypes.h	277;"	d
SCNoMAX	msvc/inttypes.h	203;"	d
SCNoPTR	msvc/inttypes.h	244;"	d
SCNoPTR	msvc/inttypes.h	256;"	d
SCNu16	msvc/inttypes.h	221;"	d
SCNu32	msvc/inttypes.h	222;"	d
SCNu64	msvc/inttypes.h	223;"	d
SCNu8	msvc/inttypes.h	285;"	d
SCNuFAST16	msvc/inttypes.h	229;"	d
SCNuFAST32	msvc/inttypes.h	230;"	d
SCNuFAST64	msvc/inttypes.h	231;"	d
SCNuFAST8	msvc/inttypes.h	287;"	d
SCNuLEAST16	msvc/inttypes.h	225;"	d
SCNuLEAST32	msvc/inttypes.h	226;"	d
SCNuLEAST64	msvc/inttypes.h	227;"	d
SCNuLEAST8	msvc/inttypes.h	286;"	d
SCNuMAX	msvc/inttypes.h	233;"	d
SCNuPTR	msvc/inttypes.h	246;"	d
SCNuPTR	msvc/inttypes.h	258;"	d
SCNx16	msvc/inttypes.h	205;"	d
SCNx32	msvc/inttypes.h	206;"	d
SCNx64	msvc/inttypes.h	207;"	d
SCNx8	msvc/inttypes.h	280;"	d
SCNxFAST16	msvc/inttypes.h	213;"	d
SCNxFAST32	msvc/inttypes.h	214;"	d
SCNxFAST64	msvc/inttypes.h	215;"	d
SCNxFAST8	msvc/inttypes.h	282;"	d
SCNxLEAST16	msvc/inttypes.h	209;"	d
SCNxLEAST32	msvc/inttypes.h	210;"	d
SCNxLEAST64	msvc/inttypes.h	211;"	d
SCNxLEAST8	msvc/inttypes.h	281;"	d
SCNxMAX	msvc/inttypes.h	217;"	d
SCNxPTR	msvc/inttypes.h	245;"	d
SCNxPTR	msvc/inttypes.h	257;"	d
SHORT_PACKET_TERMINATE	libusb/os/windows_usb.h	584;"	d
SIG_ATOMIC_MAX	msvc/stdint.h	201;"	d
SIG_ATOMIC_MIN	msvc/stdint.h	200;"	d
SIZE_MAX	msvc/stdint.h	205;"	d
SIZE_MAX	msvc/stdint.h	207;"	d
SPDRP_ADDRESS	libusb/os/windows_usb.h	37;"	d
SPDRP_INSTALL_STATE	libusb/os/windows_usb.h	40;"	d
STATE_AWAIT_IMAGE	examples/dpfp.c	/^	STATE_AWAIT_IMAGE,$/;"	e	enum:__anon30	file:
STATE_AWAIT_IMAGE	examples/dpfp_threaded.c	/^	STATE_AWAIT_IMAGE,$/;"	e	enum:__anon28	file:
STATE_AWAIT_IRQ_FINGER_DETECTED	examples/dpfp.c	/^	STATE_AWAIT_IRQ_FINGER_DETECTED,$/;"	e	enum:__anon30	file:
STATE_AWAIT_IRQ_FINGER_DETECTED	examples/dpfp_threaded.c	/^	STATE_AWAIT_IRQ_FINGER_DETECTED,$/;"	e	enum:__anon28	file:
STATE_AWAIT_IRQ_FINGER_REMOVED	examples/dpfp.c	/^	STATE_AWAIT_IRQ_FINGER_REMOVED,$/;"	e	enum:__anon30	file:
STATE_AWAIT_IRQ_FINGER_REMOVED	examples/dpfp_threaded.c	/^	STATE_AWAIT_IRQ_FINGER_REMOVED,$/;"	e	enum:__anon28	file:
STATE_AWAIT_MODE_CHANGE_AWAIT_FINGER_OFF	examples/dpfp.c	/^	STATE_AWAIT_MODE_CHANGE_AWAIT_FINGER_OFF,$/;"	e	enum:__anon30	file:
STATE_AWAIT_MODE_CHANGE_AWAIT_FINGER_OFF	examples/dpfp_threaded.c	/^	STATE_AWAIT_MODE_CHANGE_AWAIT_FINGER_OFF,$/;"	e	enum:__anon28	file:
STATE_AWAIT_MODE_CHANGE_AWAIT_FINGER_ON	examples/dpfp.c	/^	STATE_AWAIT_MODE_CHANGE_AWAIT_FINGER_ON = 1,$/;"	e	enum:__anon30	file:
STATE_AWAIT_MODE_CHANGE_AWAIT_FINGER_ON	examples/dpfp_threaded.c	/^	STATE_AWAIT_MODE_CHANGE_AWAIT_FINGER_ON = 1,$/;"	e	enum:__anon28	file:
STATE_AWAIT_MODE_CHANGE_CAPTURE	examples/dpfp.c	/^	STATE_AWAIT_MODE_CHANGE_CAPTURE,$/;"	e	enum:__anon30	file:
STATE_AWAIT_MODE_CHANGE_CAPTURE	examples/dpfp_threaded.c	/^	STATE_AWAIT_MODE_CHANGE_CAPTURE,$/;"	e	enum:__anon28	file:
STATIC_LIBC	msvc/ddk_build.cmd	/^if \/I Test%1==Test\/MT set STATIC_LIBC=1$/;"	v
STATIC_LIBC	msvc/ddk_build.cmd	/^set STATIC_LIBC=$/;"	v
STATUS_COMPLETED_SYNCHRONOUSLY	libusb/os/poll_windows.h	34;"	d
STATUS_HALT_FLAG	libusb/os/wince_usb.h	114;"	d
STATUS_REPARSE	libusb/os/poll_windows.h	32;"	d
STDERR_FILENO	tests/testlib.c	45;"	d	file:
STDOUT_FILENO	tests/testlib.c	35;"	d	file:
STDOUT_FILENO	tests/testlib.c	44;"	d	file:
SUBMIT_FAILED	libusb/os/linux_usbfs.c	/^	SUBMIT_FAILED,$/;"	e	enum:reap_action	file:
SUB_API_LIBUSB0	libusb/os/windows_usb.h	101;"	d
SUB_API_LIBUSBK	libusb/os/windows_usb.h	100;"	d
SUB_API_MAX	libusb/os/windows_usb.h	103;"	d
SUB_API_NOTSET	libusb/os/windows_usb.h	99;"	d
SUB_API_WINUSB	libusb/os/windows_usb.h	102;"	d
SUSPEND_DELAY	libusb/os/windows_usb.h	593;"	d
SWAP_FLAGS	examples/getopt/getopt.c	276;"	d	file:
SWAP_FLAGS	examples/getopt/getopt.c	284;"	d	file:
SWAP_FLAGS	examples/getopt/getopt.c	287;"	d	file:
SYSFS_DEVICE_PATH	libusb/os/linux_usbfs.h	26;"	d
ScheduleOffset	libusb/os/windows_usb.h	/^	ULONG  ScheduleOffset;$/;"	m	struct:USB_PIPE_INFO
SetCurrentAlternateSetting	libusb/os/windows_usb.h	/^	WinUsb_SetCurrentAlternateSetting_t SetCurrentAlternateSetting;$/;"	m	struct:winusb_interface
SetPipePolicy	libusb/os/windows_usb.h	/^	WinUsb_SetPipePolicy_t SetPipePolicy;$/;"	m	struct:winusb_interface
SetPowerPolicy	libusb/os/windows_usb.h	/^	WinUsb_SetPowerPolicy_t SetPowerPolicy;$/;"	m	struct:winusb_interface
SetupPacket	libusb/os/windows_usb.h	/^		} SetupPacket;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon5	typeref:struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon5::__anon6
SetupPacket	libusb/os/windows_usb.h	/^	} SetupPacket;$/;"	m	struct:USB_DESCRIPTOR_REQUEST	typeref:struct:USB_DESCRIPTOR_REQUEST::__anon7
Size	libusb/os/windows_usb.h	/^	ULONG Size;$/;"	m	struct:__anon12
SleepEx	msvc/missing.h	24;"	d
Speed	libusb/os/windows_usb.h	/^	UCHAR  Speed;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX
StringIndex	libusb/os/windows_usb.h	/^		USHORT  StringIndex, Reserved2;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon16
StringMax	libusb/os/windows_usb.h	/^		USHORT  StringMin, StringMax;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon15
StringMin	libusb/os/windows_usb.h	/^		USHORT  StringMin, StringMax;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon15
TARGET	msvc/ddk_build.cmd	/^if \/I Test%1==TestDLL set TARGET=DYNLINK$/;"	v
TARGET	msvc/ddk_build.cmd	/^set TARGET=LIBRARY$/;"	v
TEST_STATUS_ERROR	tests/libusbx_testlib.h	/^	TEST_STATUS_ERROR,$/;"	e	enum:__anon22
TEST_STATUS_FAILURE	tests/libusbx_testlib.h	/^	TEST_STATUS_FAILURE,$/;"	e	enum:__anon22
TEST_STATUS_SKIP	tests/libusbx_testlib.h	/^	TEST_STATUS_SKIP$/;"	e	enum:__anon22
TEST_STATUS_SUCCESS	tests/libusbx_testlib.h	/^	TEST_STATUS_SUCCESS,$/;"	e	enum:__anon22
THREADS_POSIX	Xcode/config.h	25;"	d
THREADS_POSIX	android/config.h	45;"	d
TIMER_REQUEST_RETRY_MS	libusb/os/windows_common.h	62;"	d
TIMESPEC_IS_SET	libusb/libusbi.h	150;"	d
TIMESPEC_TO_TIMEVAL	android/config.h	85;"	d
TIMESPEC_TO_TIMEVAL	libusb/os/poll_windows.h	110;"	d
TRANSFER_CTX	libusb/libusbi.h	204;"	d
UINT16_C	msvc/stdint.h	248;"	d
UINT16_MAX	msvc/stdint.h	138;"	d
UINT32_C	msvc/stdint.h	249;"	d
UINT32_MAX	msvc/stdint.h	139;"	d
UINT64_C	msvc/stdint.h	250;"	d
UINT64_MAX	msvc/stdint.h	140;"	d
UINT8_C	msvc/stdint.h	247;"	d
UINT8_MAX	msvc/stdint.h	137;"	d
UINTMAX_C	msvc/stdint.h	254;"	d
UINTMAX_MAX	msvc/stdint.h	189;"	d
UINTPTR_MAX	msvc/stdint.h	179;"	d
UINTPTR_MAX	msvc/stdint.h	183;"	d
UINT_FAST16_MAX	msvc/stdint.h	170;"	d
UINT_FAST32_MAX	msvc/stdint.h	171;"	d
UINT_FAST64_MAX	msvc/stdint.h	172;"	d
UINT_FAST8_MAX	msvc/stdint.h	169;"	d
UINT_LEAST16_MAX	msvc/stdint.h	154;"	d
UINT_LEAST32_MAX	msvc/stdint.h	155;"	d
UINT_LEAST64_MAX	msvc/stdint.h	156;"	d
UINT_LEAST8_MAX	msvc/stdint.h	153;"	d
UKW_ACTIVE_CONFIGURATION	libusb/os/wince_usb.h	88;"	d
UKW_CONTROL_HEADER	libusb/os/wince_usb.h	/^} UKW_CONTROL_HEADER, *PUKW_CONTROL_HEADER, *LPUKW_CONTROL_HEADER;$/;"	t	typeref:struct:__anon20
UKW_DEVICE	libusb/os/wince_usb.h	/^typedef struct UKW_DEVICE_PRIV *UKW_DEVICE;$/;"	t	typeref:struct:UKW_DEVICE_PRIV
UKW_DEVICE_DESCRIPTOR	libusb/os/wince_usb.h	/^} UKW_DEVICE_DESCRIPTOR, *PUKW_DEVICE_DESCRIPTOR, *LPUKW_DEVICE_DESCRIPTOR;$/;"	t	typeref:struct:__anon19
UKW_TF_DONT_BLOCK_FOR_MEM	libusb/os/wince_usb.h	84;"	d
UKW_TF_IN_TRANSFER	libusb/os/wince_usb.h	72;"	d
UKW_TF_NO_WAIT	libusb/os/wince_usb.h	77;"	d
UKW_TF_OUT_TRANSFER	libusb/os/wince_usb.h	74;"	d
UKW_TF_SEND_TO_DEVICE	libusb/os/wince_usb.h	80;"	d
UKW_TF_SEND_TO_ENDPOINT	libusb/os/wince_usb.h	82;"	d
UKW_TF_SEND_TO_INTERFACE	libusb/os/wince_usb.h	81;"	d
UKW_TF_SHORT_TRANSFER_OK	libusb/os/wince_usb.h	79;"	d
UNUSED	libusb/libusbi.h	67;"	d
USAGE	libusb/os/windows_usb.h	/^typedef USHORT USAGE;$/;"	t
USBDEV	libusb/os/openbsd_usb.c	138;"	d	file:
USBD_PIPE_TYPE	libusb/os/windows_usb.h	/^typedef enum USBD_PIPE_TYPE {$/;"	g
USBD_PIPE_TYPE	libusb/os/windows_usb.h	/^} USBD_PIPE_TYPE;$/;"	t	typeref:enum:USBD_PIPE_TYPE
USBFS_CAP_BULK_CONTINUATION	libusb/os/linux_usbfs.h	122;"	d
USBFS_CAP_BULK_SCATTER_GATHER	libusb/os/linux_usbfs.h	124;"	d
USBFS_CAP_NO_PACKET_SIZE_LIM	libusb/os/linux_usbfs.h	123;"	d
USBFS_CAP_ZERO_PACKET	libusb/os/linux_usbfs.h	121;"	d
USBFS_DISCONNECT_CLAIM_EXCEPT_DRIVER	libusb/os/linux_usbfs.h	127;"	d
USBFS_DISCONNECT_CLAIM_IF_DRIVER	libusb/os/linux_usbfs.h	126;"	d
USBFS_MAXDRIVERNAME	libusb/os/linux_usbfs.h	58;"	d
USBFS_URB_BULK_CONTINUATION	libusb/os/linux_usbfs.h	67;"	d
USBFS_URB_ISO_ASAP	libusb/os/linux_usbfs.h	66;"	d
USBFS_URB_QUEUE_BULK	libusb/os/linux_usbfs.h	68;"	d
USBFS_URB_SHORT_NOT_OK	libusb/os/linux_usbfs.h	65;"	d
USBFS_URB_TYPE_BULK	libusb/os/linux_usbfs.h	/^	USBFS_URB_TYPE_BULK = 3,$/;"	e	enum:usbfs_urb_type
USBFS_URB_TYPE_CONTROL	libusb/os/linux_usbfs.h	/^	USBFS_URB_TYPE_CONTROL = 2,$/;"	e	enum:usbfs_urb_type
USBFS_URB_TYPE_INTERRUPT	libusb/os/linux_usbfs.h	/^	USBFS_URB_TYPE_INTERRUPT = 1,$/;"	e	enum:usbfs_urb_type
USBFS_URB_TYPE_ISO	libusb/os/linux_usbfs.h	/^	USBFS_URB_TYPE_ISO = 0,$/;"	e	enum:usbfs_urb_type
USBFS_URB_ZERO_PACKET	libusb/os/linux_usbfs.h	69;"	d
USBI_CAP_HAS_HID_ACCESS	libusb/libusbi.h	58;"	d
USBI_CAP_SUPPORTS_DETACH_KERNEL_DRIVER	libusb/libusbi.h	59;"	d
USBI_CLOCK_MONOTONIC	libusb/libusbi.h	/^  USBI_CLOCK_MONOTONIC,$/;"	e	enum:__anon3
USBI_CLOCK_REALTIME	libusb/libusbi.h	/^  USBI_CLOCK_REALTIME$/;"	e	enum:__anon3
USBI_GET_CONTEXT	libusb/libusbi.h	201;"	d
USBI_HOTPLUG_H	libusb/hotplug.h	23;"	d
USBI_LOG_LINE_END	libusb/libusbi.h	64;"	d
USBI_MAX_LOG_LEN	libusb/libusbi.h	62;"	d
USBI_MUTEX_INITIALIZER	libusb/os/threads_posix.h	27;"	d
USBI_MUTEX_INITIALIZER	libusb/os/threads_windows.h	25;"	d
USBI_TRANSFER_CANCELLING	libusb/libusbi.h	/^	USBI_TRANSFER_CANCELLING = 1 << 2,$/;"	e	enum:usbi_transfer_flags
USBI_TRANSFER_DEVICE_DISAPPEARED	libusb/libusbi.h	/^	USBI_TRANSFER_DEVICE_DISAPPEARED = 1 << 3,$/;"	e	enum:usbi_transfer_flags
USBI_TRANSFER_OS_HANDLES_TIMEOUT	libusb/libusbi.h	/^	USBI_TRANSFER_OS_HANDLES_TIMEOUT = 1 << 1,$/;"	e	enum:usbi_transfer_flags
USBI_TRANSFER_TIMED_OUT	libusb/libusbi.h	/^	USBI_TRANSFER_TIMED_OUT = 1 << 0,$/;"	e	enum:usbi_transfer_flags
USBI_TRANSFER_TO_LIBUSB_TRANSFER	libusb/libusbi.h	389;"	d
USBI_TRANSFER_UPDATED_FDS	libusb/libusbi.h	/^	USBI_TRANSFER_UPDATED_FDS = 1 << 4,$/;"	e	enum:usbi_transfer_flags
USB_API_COMPOSITE	libusb/os/windows_usb.h	90;"	d
USB_API_HID	libusb/os/windows_usb.h	92;"	d
USB_API_HUB	libusb/os/windows_usb.h	89;"	d
USB_API_MAX	libusb/os/windows_usb.h	93;"	d
USB_API_SET	libusb/os/windows_usb.h	95;"	d
USB_API_UNSUPPORTED	libusb/os/windows_usb.h	88;"	d
USB_API_WINUSBX	libusb/os/windows_usb.h	91;"	d
USB_CONFIGURATION_DESCRIPTOR	libusb/os/windows_usb.h	/^typedef struct USB_CONFIGURATION_DESCRIPTOR {$/;"	s
USB_CONFIGURATION_DESCRIPTOR	libusb/os/windows_usb.h	/^} USB_CONFIGURATION_DESCRIPTOR, *PUSB_CONFIGURATION_DESCRIPTOR;$/;"	t	typeref:struct:USB_CONFIGURATION_DESCRIPTOR
USB_CONFIGURATION_DESCRIPTOR_SHORT	libusb/os/windows_usb.h	/^typedef struct USB_CONFIGURATION_DESCRIPTOR_SHORT {$/;"	s
USB_CONFIGURATION_DESCRIPTOR_SHORT	libusb/os/windows_usb.h	/^} USB_CONFIGURATION_DESCRIPTOR_SHORT;$/;"	t	typeref:struct:USB_CONFIGURATION_DESCRIPTOR_SHORT
USB_CONFIGURATION_DESCRIPTOR_TYPE	libusb/os/windows_usb.h	335;"	d
USB_CONNECTION_STATUS	libusb/os/windows_usb.h	/^typedef enum USB_CONNECTION_STATUS {$/;"	g
USB_CONNECTION_STATUS	libusb/os/windows_usb.h	/^} USB_CONNECTION_STATUS, *PUSB_CONNECTION_STATUS;$/;"	t	typeref:enum:USB_CONNECTION_STATUS
USB_DESCRIPTOR_REQUEST	libusb/os/windows_usb.h	/^typedef struct USB_DESCRIPTOR_REQUEST {$/;"	s
USB_DESCRIPTOR_REQUEST	libusb/os/windows_usb.h	/^} USB_DESCRIPTOR_REQUEST, *PUSB_DESCRIPTOR_REQUEST;$/;"	t	typeref:struct:USB_DESCRIPTOR_REQUEST
USB_DEVICE_DESCRIPTOR	libusb/os/windows_usb.h	/^typedef struct libusb_device_descriptor USB_DEVICE_DESCRIPTOR, *PUSB_DEVICE_DESCRIPTOR;$/;"	t	typeref:struct:libusb_device_descriptor
USB_DEVICE_DESCRIPTOR_TYPE	libusb/os/windows_usb.h	334;"	d
USB_ENDPOINT_DESCRIPTOR	libusb/os/windows_usb.h	/^typedef struct USB_ENDPOINT_DESCRIPTOR {$/;"	s
USB_ENDPOINT_DESCRIPTOR	libusb/os/windows_usb.h	/^} USB_ENDPOINT_DESCRIPTOR, *PUSB_ENDPOINT_DESCRIPTOR;$/;"	t	typeref:struct:USB_ENDPOINT_DESCRIPTOR
USB_ENDPOINT_DESCRIPTOR_TYPE	libusb/os/windows_usb.h	338;"	d
USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION	libusb/os/windows_usb.h	353;"	d
USB_GET_HUB_CAPABILITIES	libusb/os/windows_usb.h	355;"	d
USB_GET_HUB_CAPABILITIES_EX	libusb/os/windows_usb.h	360;"	d
USB_GET_NODE_CONNECTION_INFORMATION_EX	libusb/os/windows_usb.h	357;"	d
USB_GET_NODE_CONNECTION_NAME	libusb/os/windows_usb.h	354;"	d
USB_GET_NODE_INFORMATION	libusb/os/windows_usb.h	352;"	d
USB_HUB_CAPABILITIES	libusb/os/windows_usb.h	/^typedef struct USB_HUB_CAPABILITIES {$/;"	s
USB_HUB_CAPABILITIES	libusb/os/windows_usb.h	/^} USB_HUB_CAPABILITIES, *PUSB_HUB_CAPABILITIES;$/;"	t	typeref:struct:USB_HUB_CAPABILITIES
USB_HUB_CAPABILITIES_EX	libusb/os/windows_usb.h	/^typedef struct USB_HUB_CAPABILITIES_EX {$/;"	s
USB_HUB_CAPABILITIES_EX	libusb/os/windows_usb.h	/^} USB_HUB_CAPABILITIES_EX, *PUSB_HUB_CAPABILITIES_EX;$/;"	t	typeref:struct:USB_HUB_CAPABILITIES_EX
USB_HUB_CAP_FLAGS	libusb/os/windows_usb.h	/^typedef struct USB_HUB_CAP_FLAGS {$/;"	s
USB_HUB_CAP_FLAGS	libusb/os/windows_usb.h	/^} USB_HUB_CAP_FLAGS, *PUSB_HUB_CAP_FLAGS;$/;"	t	typeref:struct:USB_HUB_CAP_FLAGS
USB_HUB_DESCRIPTOR	libusb/os/windows_usb.h	/^typedef struct USB_HUB_DESCRIPTOR {$/;"	s
USB_HUB_DESCRIPTOR	libusb/os/windows_usb.h	/^} USB_HUB_DESCRIPTOR, *PUSB_HUB_DESCRIPTOR;$/;"	t	typeref:struct:USB_HUB_DESCRIPTOR
USB_HUB_INFORMATION	libusb/os/windows_usb.h	/^typedef struct USB_HUB_INFORMATION {$/;"	s
USB_HUB_INFORMATION	libusb/os/windows_usb.h	/^} USB_HUB_INFORMATION, *PUSB_HUB_INFORMATION;$/;"	t	typeref:struct:USB_HUB_INFORMATION
USB_HUB_NAME_FIXED	libusb/os/windows_usb.h	/^typedef struct USB_HUB_NAME_FIXED {$/;"	s
USB_HUB_NAME_FIXED	libusb/os/windows_usb.h	/^} USB_HUB_NAME_FIXED;$/;"	t	typeref:struct:USB_HUB_NAME_FIXED
USB_HUB_NODE	libusb/os/windows_usb.h	/^typedef enum USB_HUB_NODE {$/;"	g
USB_HUB_NODE	libusb/os/windows_usb.h	/^} USB_HUB_NODE;$/;"	t	typeref:enum:USB_HUB_NODE
USB_INTERFACE_DESCRIPTOR	libusb/os/windows_usb.h	/^typedef struct USB_INTERFACE_DESCRIPTOR {$/;"	s
USB_INTERFACE_DESCRIPTOR	libusb/os/windows_usb.h	/^} USB_INTERFACE_DESCRIPTOR, *PUSB_INTERFACE_DESCRIPTOR;$/;"	t	typeref:struct:USB_INTERFACE_DESCRIPTOR
USB_INTERFACE_DESCRIPTOR_TYPE	libusb/os/windows_usb.h	337;"	d
USB_MAXCONFIG	libusb/libusbi.h	55;"	d
USB_MAXENDPOINTS	libusb/libusbi.h	53;"	d
USB_MAXINTERFACES	libusb/libusbi.h	54;"	d
USB_MI_PARENT_INFORMATION	libusb/os/windows_usb.h	/^typedef struct USB_MI_PARENT_INFORMATION {$/;"	s
USB_MI_PARENT_INFORMATION	libusb/os/windows_usb.h	/^} USB_MI_PARENT_INFORMATION, *PUSB_MI_PARENT_INFORMATION;$/;"	t	typeref:struct:USB_MI_PARENT_INFORMATION
USB_NODE_CONNECTION_INFORMATION_EX	libusb/os/windows_usb.h	/^typedef struct USB_NODE_CONNECTION_INFORMATION_EX {$/;"	s
USB_NODE_CONNECTION_INFORMATION_EX	libusb/os/windows_usb.h	/^} USB_NODE_CONNECTION_INFORMATION_EX, *PUSB_NODE_CONNECTION_INFORMATION_EX;$/;"	t	typeref:struct:USB_NODE_CONNECTION_INFORMATION_EX
USB_NODE_CONNECTION_NAME	libusb/os/windows_usb.h	/^typedef struct USB_NODE_CONNECTION_NAME {$/;"	s
USB_NODE_CONNECTION_NAME	libusb/os/windows_usb.h	/^} USB_NODE_CONNECTION_NAME, *PUSB_NODE_CONNECTION_NAME;$/;"	t	typeref:struct:USB_NODE_CONNECTION_NAME
USB_NODE_CONNECTION_NAME_FIXED	libusb/os/windows_usb.h	/^typedef struct USB_NODE_CONNECTION_NAME_FIXED {$/;"	s
USB_NODE_CONNECTION_NAME_FIXED	libusb/os/windows_usb.h	/^} USB_NODE_CONNECTION_NAME_FIXED;$/;"	t	typeref:struct:USB_NODE_CONNECTION_NAME_FIXED
USB_NODE_INFORMATION	libusb/os/windows_usb.h	/^typedef struct USB_NODE_INFORMATION {$/;"	s
USB_NODE_INFORMATION	libusb/os/windows_usb.h	/^} USB_NODE_INFORMATION, *PUSB_NODE_INFORMATION;$/;"	t	typeref:struct:USB_NODE_INFORMATION
USB_PIPE_INFO	libusb/os/windows_usb.h	/^typedef struct USB_PIPE_INFO {$/;"	s
USB_PIPE_INFO	libusb/os/windows_usb.h	/^} USB_PIPE_INFO, *PUSB_PIPE_INFO;$/;"	t	typeref:struct:USB_PIPE_INFO
USB_REQUEST_CLEAR_FEATURE	libusb/os/windows_usb.h	341;"	d
USB_REQUEST_GET_CONFIGURATION	libusb/os/windows_usb.h	346;"	d
USB_REQUEST_GET_DESCRIPTOR	libusb/os/windows_usb.h	344;"	d
USB_REQUEST_GET_INTERFACE	libusb/os/windows_usb.h	348;"	d
USB_REQUEST_GET_STATUS	libusb/os/windows_usb.h	340;"	d
USB_REQUEST_SET_ADDRESS	libusb/os/windows_usb.h	343;"	d
USB_REQUEST_SET_CONFIGURATION	libusb/os/windows_usb.h	347;"	d
USB_REQUEST_SET_DESCRIPTOR	libusb/os/windows_usb.h	345;"	d
USB_REQUEST_SET_FEATURE	libusb/os/windows_usb.h	342;"	d
USB_REQUEST_SET_INTERFACE	libusb/os/windows_usb.h	349;"	d
USB_REQUEST_SYNC_FRAME	libusb/os/windows_usb.h	350;"	d
USB_ROOT_HUB_NAME	libusb/os/windows_usb.h	/^typedef struct USB_ROOT_HUB_NAME {$/;"	s
USB_ROOT_HUB_NAME	libusb/os/windows_usb.h	/^} USB_ROOT_HUB_NAME, *PUSB_ROOT_HUB_NAME;$/;"	t	typeref:struct:USB_ROOT_HUB_NAME
USB_ROOT_HUB_NAME_FIXED	libusb/os/windows_usb.h	/^typedef struct USB_ROOT_HUB_NAME_FIXED {$/;"	s
USB_ROOT_HUB_NAME_FIXED	libusb/os/windows_usb.h	/^} USB_ROOT_HUB_NAME_FIXED;$/;"	t	typeref:struct:USB_ROOT_HUB_NAME_FIXED
USB_RQ	examples/dpfp.c	36;"	d	file:
USB_RQ	examples/dpfp_threaded.c	37;"	d	file:
USB_STRING_DESCRIPTOR_TYPE	libusb/os/windows_usb.h	336;"	d
USE_GENERIC	examples/xusb.c	/^	USE_GENERIC,$/;"	e	enum:test_type	file:
USE_HID	examples/xusb.c	/^	USE_HID,$/;"	e	enum:test_type	file:
USE_PS3	examples/xusb.c	/^	USE_PS3,$/;"	e	enum:test_type	file:
USE_SCSI	examples/xusb.c	/^	USE_SCSI,$/;"	e	enum:test_type	file:
USE_SYSTEM_LOGGING_FACILITY	android/config.h	39;"	d
USE_XBOX	examples/xusb.c	/^	USE_XBOX,$/;"	e	enum:test_type	file:
Units	libusb/os/windows_usb.h	/^  ULONG  Units;$/;"	m	struct:_HIDP_VALUE_CAPS
UnitsExp	libusb/os/windows_usb.h	/^  ULONG  UnitsExp;$/;"	m	struct:_HIDP_VALUE_CAPS
Usage	libusb/os/windows_usb.h	/^		USAGE  Usage, Reserved1;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon16
Usage	libusb/os/windows_usb.h	/^  USAGE Usage;$/;"	m	struct:__anon13
UsageMax	libusb/os/windows_usb.h	/^		USAGE  UsageMin, UsageMax;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon15
UsageMin	libusb/os/windows_usb.h	/^		USAGE  UsageMin, UsageMax;$/;"	m	struct:_HIDP_VALUE_CAPS::__anon14::__anon15
UsagePage	libusb/os/windows_usb.h	/^  USAGE  UsagePage;$/;"	m	struct:_HIDP_VALUE_CAPS
UsagePage	libusb/os/windows_usb.h	/^  USAGE UsagePage;$/;"	m	struct:__anon13
UsbHub	libusb/os/windows_usb.h	/^	UsbHub,$/;"	e	enum:USB_HUB_NODE
UsbMIParent	libusb/os/windows_usb.h	/^	UsbMIParent$/;"	e	enum:USB_HUB_NODE
UsbdPipeTypeBulk	libusb/os/windows_usb.h	/^	UsbdPipeTypeBulk,$/;"	e	enum:USBD_PIPE_TYPE
UsbdPipeTypeControl	libusb/os/windows_usb.h	/^	UsbdPipeTypeControl,$/;"	e	enum:USBD_PIPE_TYPE
UsbdPipeTypeInterrupt	libusb/os/windows_usb.h	/^	UsbdPipeTypeInterrupt$/;"	e	enum:USBD_PIPE_TYPE
UsbdPipeTypeIsochronous	libusb/os/windows_usb.h	/^	UsbdPipeTypeIsochronous,$/;"	e	enum:USBD_PIPE_TYPE
Use_Duplicate_Handles	libusb/os/poll_windows.c	128;"	d	file:
Use_Duplicate_Handles	libusb/os/poll_windows.c	90;"	d	file:
VID	examples/xusb.c	/^static uint16_t VID, PID;$/;"	v	file:
VendorID	libusb/os/windows_usb.h	/^	USHORT VendorID;$/;"	m	struct:__anon12
VersionNumber	libusb/os/windows_usb.h	/^	USHORT VersionNumber;$/;"	m	struct:__anon12
WCHAR_MAX	msvc/stdint.h	213;"	d
WCHAR_MIN	msvc/stdint.h	212;"	d
WINCE_SLN	.private/bwince.cmd	/^set WINCE_SLN=msvc\\libusbx_wince.sln$/;"	v
WINCE_TARGET_ARCHES	.private/bwince.cmd	/^if "x%WINCE_TARGET_ARCHES%"=="x" set WINCE_TARGET_ARCHES=ARMV4I MIPSII MIPSII_FP MIPSIV MIPSIV_FP SH4 x86$/;"	v
WINCE_TARGET_DIR	.private/bwince.cmd	/^set WINCE_TARGET_DIR=%WINCE_TARGET_DIR_BASE%\\%DATE:\/=-%$/;"	v
WINCE_TARGET_DIR_BASE	.private/bwince.cmd	/^if "x%WINCE_TARGET_DIR_BASE%"=="x" set WINCE_TARGET_DIR_BASE=E:\\dailies$/;"	v
WINDOWS_2003	libusb/os/poll_windows.h	/^	WINDOWS_2003,	\/\/ also includes XP 64$/;"	e	enum:windows_version
WINDOWS_CE	libusb/os/poll_windows.h	/^	WINDOWS_CE,$/;"	e	enum:windows_version
WINDOWS_UNSUPPORTED	libusb/os/poll_windows.h	/^	WINDOWS_UNSUPPORTED,$/;"	e	enum:windows_version
WINDOWS_VISTA_AND_LATER	libusb/os/poll_windows.h	/^	WINDOWS_VISTA_AND_LATER,$/;"	e	enum:windows_version
WINDOWS_XP	libusb/os/poll_windows.h	/^	WINDOWS_XP,$/;"	e	enum:windows_version
WINT_MAX	msvc/stdint.h	220;"	d
WINT_MIN	msvc/stdint.h	219;"	d
WINUSBX_DRV_NAMES	libusb/os/windows_usb.h	105;"	d
WINUSB_INTERFACE_HANDLE	libusb/os/windows_usb.h	/^typedef void *WINUSB_INTERFACE_HANDLE, *PWINUSB_INTERFACE_HANDLE;$/;"	t
WINUSB_PIPE_INFORMATION	libusb/os/windows_usb.h	/^} WINUSB_PIPE_INFORMATION, *PWINUSB_PIPE_INFORMATION;$/;"	t	typeref:struct:__anon10
WINUSB_SETUP_PACKET	libusb/os/windows_usb.h	/^} WINUSB_SETUP_PACKET, *PWINUSB_SETUP_PACKET;$/;"	t	typeref:struct:__anon11
WinUSBX	libusb/os/windows_usb.c	/^static struct winusb_interface WinUSBX[SUB_API_MAX];$/;"	v	typeref:struct:winusb_interface	file:
WinUSBX_Set	libusb/os/windows_usb.c	2501;"	d	file:
WinUsb_AbortPipe_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_AbortPipe_t)($/;"	t
WinUsb_ControlTransfer_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_ControlTransfer_t)($/;"	t
WinUsb_FlushPipe_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_FlushPipe_t)($/;"	t
WinUsb_Free_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_Free_t)($/;"	t
WinUsb_GetAssociatedInterface_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_GetAssociatedInterface_t)($/;"	t
WinUsb_GetCurrentAlternateSetting_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_GetCurrentAlternateSetting_t)($/;"	t
WinUsb_GetDescriptor_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_GetDescriptor_t)($/;"	t
WinUsb_GetOverlappedResult_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_GetOverlappedResult_t)($/;"	t
WinUsb_GetPipePolicy_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_GetPipePolicy_t)($/;"	t
WinUsb_GetPowerPolicy_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_GetPowerPolicy_t)($/;"	t
WinUsb_Initialize_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_Initialize_t)($/;"	t
WinUsb_QueryDeviceInformation_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_QueryDeviceInformation_t)($/;"	t
WinUsb_QueryInterfaceSettings_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_QueryInterfaceSettings_t)($/;"	t
WinUsb_QueryPipe_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_QueryPipe_t)($/;"	t
WinUsb_ReadPipe_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_ReadPipe_t)($/;"	t
WinUsb_ResetDevice_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_ResetDevice_t)($/;"	t
WinUsb_ResetPipe_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_ResetPipe_t)($/;"	t
WinUsb_SetCurrentAlternateSetting_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_SetCurrentAlternateSetting_t)($/;"	t
WinUsb_SetPipePolicy_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_SetPipePolicy_t)($/;"	t
WinUsb_SetPowerPolicy_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_SetPowerPolicy_t)($/;"	t
WinUsb_WritePipe_t	libusb/os/windows_usb.h	/^typedef BOOL (WINAPI *WinUsb_WritePipe_t)($/;"	t
WritePipe	libusb/os/windows_usb.h	/^	WinUsb_WritePipe_t WritePipe;$/;"	m	struct:winusb_interface
_	examples/getopt/getopt.c	84;"	d	file:
_	examples/getopt/getopt.c	87;"	d	file:
_AMD64bit	.private/bd.cmd	/^set _AMD64bit=$/;"	v
_AMD64bit	.private/bd.cmd	/^set _AMD64bit=true$/;"	v
_BSD_SOURCE	libusb/os/threads_posix.c	26;"	d	file:
_BUILDARCH	.private/bd.cmd	/^set _BUILDARCH=%ORG_BUILDARCH%$/;"	v
_BUILDARCH	.private/bd.cmd	/^set _BUILDARCH=AMD64$/;"	v
_BUILDARCH	.private/bd.cmd	/^set _BUILDARCH=x86$/;"	v
_ERRNO_H_	msvc/errno.h	12;"	d
_GETOPT_H	examples/getopt/getopt.h	23;"	d
_GNU_SOURCE	Xcode/config.h	28;"	d
_GNU_SOURCE	libusb/os/threads_posix.c	24;"	d	file:
_HIDP_REPORT_TYPE	libusb/os/windows_usb.h	/^typedef enum _HIDP_REPORT_TYPE {$/;"	g
_HIDP_VALUE_CAPS	libusb/os/windows_usb.h	/^typedef struct _HIDP_VALUE_CAPS {$/;"	s
_INTPTR_T_DEFINED	msvc/stdint.h	33;"	d
_INTTYPES_H_	msvc/inttypes.h	29;"	d
_KLIB_VERSION	libusb/os/windows_usb.h	/^typedef struct _KLIB_VERSION {$/;"	s
_KUSB_FNID	libusb/os/windows_usb.h	/^typedef enum _KUSB_FNID$/;"	g
_NO_PROTO	examples/getopt/getopt.c	27;"	d	file:
_PTRDIFF_T_	msvc/stdint.h	61;"	d
_PTRDIFF_T_DEFINED	msvc/stdint.h	59;"	d
_SSIZE_T_DEFINED	libusb/libusb.h	34;"	d
_STDINT_H	msvc/stdint.h	30;"	d
_TIMESPEC_DEFINED	libusb/os/threads_windows.h	46;"	d
_UINTPTR_T_DEFINED	msvc/stdint.h	46;"	d
_W32_FT_OFFSET	libusb/core.c	2007;"	d	file:
_WCHAR_T_DEFINED	msvc/stdint.h	72;"	d
_WCTYPE_T_DEFINED	msvc/stdint.h	79;"	d
_WINT_T	msvc/stdint.h	81;"	d
__attribute__	examples/ezusb.h	26;"	d
__ezusb_H	examples/ezusb.h	2;"	d
__getopt_initialized	examples/getopt/getopt.c	/^int __getopt_initialized;$/;"	v
__intptr_t_defined	msvc/stdint.h	35;"	d
__need_getopt	examples/getopt/getopt.h	178;"	d
__read_sysfs_attr	libusb/os/linux_usbfs.c	/^static int __read_sysfs_attr(struct libusb_context *ctx,$/;"	f	file:
__uintptr_t_defined	msvc/stdint.h	48;"	d
_access_endpoint	libusb/os/netbsd_usb.c	/^_access_endpoint(struct libusb_transfer *transfer)$/;"	f
_access_endpoint	libusb/os/openbsd_usb.c	/^_access_endpoint(struct libusb_transfer *transfer)$/;"	f
_beginthreadex	libusb/os/windows_usb.h	49;"	d
_bus_open	libusb/os/openbsd_usb.c	/^_bus_open(int number)$/;"	f
_cache_active_config_descriptor	libusb/os/netbsd_usb.c	/^_cache_active_config_descriptor(struct libusb_device *dev, int fd)$/;"	f
_cache_active_config_descriptor	libusb/os/openbsd_usb.c	/^_cache_active_config_descriptor(struct libusb_device *dev)$/;"	f
_darwin_finalize	libusb/os/darwin_usb.c	/^static void _darwin_finalize(void) {$/;"	f	file:
_device_handle_priv	libusb/os/linux_usbfs.c	/^static struct linux_device_handle_priv *_device_handle_priv($/;"	f	file:
_device_handle_priv	libusb/os/windows_usb.h	/^static inline struct windows_device_handle_priv *_device_handle_priv($/;"	f
_device_priv	libusb/os/linux_usbfs.c	/^static struct linux_device_priv *_device_priv(struct libusb_device *dev)$/;"	f	file:
_device_priv	libusb/os/wince_usb.c	/^static struct wince_device_priv *_device_priv(struct libusb_device *dev)$/;"	f	file:
_device_priv	libusb/os/windows_usb.h	/^static inline struct windows_device_priv *_device_priv(struct libusb_device *dev) {$/;"	f
_errno_to_libusb	libusb/os/netbsd_usb.c	/^_errno_to_libusb(int err)$/;"	f
_errno_to_libusb	libusb/os/openbsd_usb.c	/^_errno_to_libusb(int err)$/;"	f
_fd_to_index_and_lock	libusb/os/poll_windows.c	/^static int _fd_to_index_and_lock(int fd)$/;"	f	file:
_free_index	libusb/os/poll_windows.c	/^static void _free_index(int _index)$/;"	f	file:
_get_usbfs_fd	libusb/os/linux_usbfs.c	/^static int _get_usbfs_fd(struct libusb_device *dev, mode_t mode, int silent)$/;"	f	file:
_getopt_initialize	examples/getopt/getopt.c	/^_getopt_initialize (argc, argv, optstring)$/;"	f	file:
_getopt_internal	examples/getopt/getopt.c	/^_getopt_internal (argc, argv, optstring, longopts, longind, long_only)$/;"	f
_hid_class_request	libusb/os/windows_usb.c	/^static int _hid_class_request(struct hid_device_priv* dev, HANDLE hid_handle, int request_type,$/;"	f	file:
_hid_get_config_descriptor	libusb/os/windows_usb.c	/^static int _hid_get_config_descriptor(struct hid_device_priv* dev, void *data, size_t *size)$/;"	f	file:
_hid_get_descriptor	libusb/os/windows_usb.c	/^static int _hid_get_descriptor(struct hid_device_priv* dev, HANDLE hid_handle, int recipient,$/;"	f	file:
_hid_get_device_descriptor	libusb/os/windows_usb.c	/^static int _hid_get_device_descriptor(struct hid_device_priv* dev, void *data, size_t *size)$/;"	f	file:
_hid_get_hid_descriptor	libusb/os/windows_usb.c	/^static int _hid_get_hid_descriptor(struct hid_device_priv* dev, void *data, size_t *size)$/;"	f	file:
_hid_get_report	libusb/os/windows_usb.c	/^static int _hid_get_report(struct hid_device_priv* dev, HANDLE hid_handle, int id, void *data,$/;"	f	file:
_hid_get_report_descriptor	libusb/os/windows_usb.c	/^static int _hid_get_report_descriptor(struct hid_device_priv* dev, void *data, size_t *size)$/;"	f	file:
_hid_get_string_descriptor	libusb/os/windows_usb.c	/^static int _hid_get_string_descriptor(struct hid_device_priv* dev, int _index,$/;"	f	file:
_hid_set_report	libusb/os/windows_usb.c	/^static int _hid_set_report(struct hid_device_priv* dev, HANDLE hid_handle, int id, void *data,$/;"	f	file:
_hid_wcslen	libusb/os/windows_usb.c	/^static int _hid_wcslen(WCHAR *str)$/;"	f	file:
_is_usbdev_entry	libusb/os/linux_usbfs.c	/^static int _is_usbdev_entry(struct dirent *entry, int *bus_p, int *dev_p)$/;"	f	file:
_open_sysfs_attr	libusb/os/linux_usbfs.c	/^static int _open_sysfs_attr(struct libusb_device *dev, const char *attr)$/;"	f	file:
_poll_fd	libusb/os/poll_windows.c	/^} _poll_fd[MAX_FDS];$/;"	v	typeref:struct:__anon17
_stricmp	examples/fxload.c	39;"	d	file:
_stricmp	libusb/os/windows_usb.h	44;"	d
_sync_control_transfer	libusb/os/netbsd_usb.c	/^_sync_control_transfer(struct usbi_transfer *itransfer)$/;"	f
_sync_control_transfer	libusb/os/openbsd_usb.c	/^_sync_control_transfer(struct usbi_transfer *itransfer)$/;"	f
_sync_gen_transfer	libusb/os/netbsd_usb.c	/^_sync_gen_transfer(struct usbi_transfer *itransfer)$/;"	f
_sync_gen_transfer	libusb/os/openbsd_usb.c	/^_sync_gen_transfer(struct usbi_transfer *itransfer)$/;"	f
_undef	examples/ezusb.c	/^	_undef = 0,$/;"	e	enum:__anon25	file:
_usbi_log	libusb/libusbi.h	161;"	d
_usbi_log	libusb/libusbi.h	164;"	d
abort_control	libusb/os/windows_usb.h	/^	int (*abort_control)(int sub_api, struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend
abort_transfers	libusb/os/windows_usb.h	/^	int (*abort_transfers)(int sub_api, struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend
active_config	libusb/os/darwin_usb.h	/^  UInt8                 first_config, active_config, port;  $/;"	m	struct:darwin_cached_device
active_config	libusb/os/linux_usbfs.c	/^	int active_config; \/* cache val for !sysfs_can_relate_devices  *\/$/;"	m	struct:linux_device_priv	file:
active_config	libusb/os/windows_usb.h	/^	uint8_t active_config;$/;"	m	struct:windows_device_priv
active_contexts_list	libusb/core.c	/^struct list_head active_contexts_list;$/;"	v	typeref:struct:list_head
active_contexts_lock	libusb/core.c	/^usbi_mutex_static_t active_contexts_lock = USBI_MUTEX_INITIALIZER;$/;"	v
active_interface	libusb/os/windows_usb.h	/^	int active_interface;$/;"	m	struct:windows_device_handle_priv
actual_length	libusb/libusb.h	/^	int actual_length;$/;"	m	struct:libusb_transfer
actual_length	libusb/libusb.h	/^	unsigned int actual_length;$/;"	m	struct:libusb_iso_packet_descriptor
actual_length	libusb/os/linux_usbfs.h	/^	int actual_length;$/;"	m	struct:usbfs_urb
actual_length	libusb/os/linux_usbfs.h	/^	unsigned int actual_length;$/;"	m	struct:usbfs_iso_packet_desc
add_iso_packet_size	libusb/libusbi.h	/^	size_t add_iso_packet_size;$/;"	m	struct:usbi_os_backend
add_to_flying_list	libusb/io.c	/^static int add_to_flying_list(struct usbi_transfer *transfer)$/;"	f	file:
address	libusb/os/darwin_usb.h	/^  UInt16                address;$/;"	m	struct:darwin_cached_device
alloc_transfers	examples/dpfp.c	/^static int alloc_transfers(void)$/;"	f	file:
alloc_transfers	examples/dpfp_threaded.c	/^static int alloc_transfers(void)$/;"	f	file:
altsetting	libusb/libusb.h	/^	const struct libusb_interface_descriptor *altsetting;$/;"	m	struct:libusb_interface	typeref:struct:libusb_interface::libusb_interface_descriptor
altsetting	libusb/os/linux_usbfs.h	/^	unsigned int altsetting;$/;"	m	struct:usbfs_setinterface
api_handle	libusb/os/windows_usb.h	/^	HANDLE api_handle; \/\/ used by the API to communicate with the device$/;"	m	struct:interface_handle_t
api_hid_available	libusb/os/windows_usb.c	/^bool api_hid_available = false;$/;"	v
apib	libusb/os/windows_usb.h	/^		struct windows_usb_api_backend const *apib; \/\/ an API backend (multiple drivers support),$/;"	m	struct:windows_device_priv::__anon4
apib	libusb/os/windows_usb.h	/^	struct windows_usb_api_backend const *apib;$/;"	m	struct:windows_device_priv
arm_timerfd_for_next_timeout	libusb/io.c	/^static int arm_timerfd_for_next_timeout(struct libusb_context *ctx)$/;"	f	file:
attach_kernel_driver	libusb/libusbi.h	/^	int (*attach_kernel_driver)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend
attached	libusb/libusbi.h	/^	int attached;$/;"	m	struct:libusb_device
auto_claim	libusb/os/windows_usb.c	/^static int auto_claim(struct libusb_transfer *transfer, int *interface_number, int api_type)$/;"	f	file:
auto_detach_kernel_driver	libusb/libusbi.h	/^	int auto_detach_kernel_driver;$/;"	m	struct:libusb_device_handle
auto_release	libusb/os/windows_usb.c	/^static void auto_release(struct usbi_transfer *itransfer)$/;"	f	file:
autoclaim_count	libusb/os/windows_usb.h	/^	int autoclaim_count[USB_MAXINTERFACES]; \/\/ For auto-release$/;"	m	struct:windows_device_handle_priv
autoclaim_lock	libusb/os/windows_usb.c	/^usbi_mutex_t autoclaim_lock;$/;"	v
bAlternateSetting	libusb/libusb.h	/^	uint8_t  bAlternateSetting;$/;"	m	struct:libusb_interface_descriptor
bAlternateSetting	libusb/os/windows_usb.h	/^  UCHAR  bAlternateSetting;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR
bCBWCBLength	examples/xusb.c	/^	uint8_t bCBWCBLength;$/;"	m	struct:command_block_wrapper	file:
bCBWLUN	examples/xusb.c	/^	uint8_t bCBWLUN;$/;"	m	struct:command_block_wrapper	file:
bCSWStatus	examples/xusb.c	/^	uint8_t bCSWStatus;$/;"	m	struct:command_status_wrapper	file:
bClassDescriptorType	libusb/os/windows_usb.h	/^	uint8_t  bClassDescriptorType;$/;"	m	struct:libusb_hid_descriptor
bConfigurationValue	libusb/libusb.h	/^	uint8_t  bConfigurationValue;$/;"	m	struct:libusb_config_descriptor
bConfigurationValue	libusb/os/windows_usb.h	/^  UCHAR  bConfigurationValue;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR
bCountryCode	libusb/os/windows_usb.h	/^	uint8_t  bCountryCode;$/;"	m	struct:libusb_hid_descriptor
bDescriptorLength	libusb/os/windows_usb.h	/^	UCHAR  bDescriptorLength;$/;"	m	struct:USB_HUB_DESCRIPTOR
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_bos_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_config_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_container_id_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_device_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_endpoint_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_interface_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_usb_2_0_extension_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t bDescriptorType;$/;"	m	struct:libusb_bos_dev_capability_descriptor
bDescriptorType	libusb/libusbi.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:usb_descriptor_header
bDescriptorType	libusb/os/wince_usb.h	/^	UINT8 bDescriptorType;$/;"	m	struct:__anon19
bDescriptorType	libusb/os/windows_usb.h	/^	UCHAR  bDescriptorType;$/;"	m	struct:USB_HUB_DESCRIPTOR
bDescriptorType	libusb/os/windows_usb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_hid_descriptor
bDescriptorType	libusb/os/windows_usb.h	/^  UCHAR  bDescriptorType;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR
bDescriptorType	libusb/os/windows_usb.h	/^  UCHAR  bDescriptorType;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR
bDescriptorType	libusb/os/windows_usb.h	/^  UCHAR  bDescriptorType;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR
bDevCapabilityType	libusb/libusb.h	/^	uint8_t  bDevCapabilityType;$/;"	m	struct:libusb_container_id_descriptor
bDevCapabilityType	libusb/libusb.h	/^	uint8_t  bDevCapabilityType;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bDevCapabilityType	libusb/libusb.h	/^	uint8_t  bDevCapabilityType;$/;"	m	struct:libusb_usb_2_0_extension_descriptor
bDevCapabilityType	libusb/libusb.h	/^	uint8_t bDevCapabilityType;$/;"	m	struct:libusb_bos_dev_capability_descriptor
bDeviceClass	libusb/libusb.h	/^	uint8_t  bDeviceClass;$/;"	m	struct:libusb_device_descriptor
bDeviceClass	libusb/os/wince_usb.h	/^	UINT8 bDeviceClass;$/;"	m	struct:__anon19
bDeviceProtocol	libusb/libusb.h	/^	uint8_t  bDeviceProtocol;$/;"	m	struct:libusb_device_descriptor
bDeviceProtocol	libusb/os/wince_usb.h	/^	UINT8 bDeviceProtocol;$/;"	m	struct:__anon19
bDeviceSubClass	libusb/libusb.h	/^	uint8_t  bDeviceSubClass;$/;"	m	struct:libusb_device_descriptor
bDeviceSubClass	libusb/os/wince_usb.h	/^	UINT8 bDeviceSubClass;$/;"	m	struct:__anon19
bEndpointAddress	libusb/libusb.h	/^	uint8_t  bEndpointAddress;$/;"	m	struct:libusb_endpoint_descriptor
bEndpointAddress	libusb/os/windows_usb.h	/^  UCHAR  bEndpointAddress;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR
bFunctionalitySupport	libusb/libusb.h	/^	uint8_t  bFunctionalitySupport;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bHubControlCurrent	libusb/os/windows_usb.h	/^	UCHAR  bHubControlCurrent;$/;"	m	struct:USB_HUB_DESCRIPTOR
bInterfaceClass	libusb/libusb.h	/^	uint8_t  bInterfaceClass;$/;"	m	struct:libusb_interface_descriptor
bInterfaceClass	libusb/os/windows_usb.h	/^  UCHAR  bInterfaceClass;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR
bInterfaceNumber	libusb/libusb.h	/^	uint8_t  bInterfaceNumber;$/;"	m	struct:libusb_interface_descriptor
bInterfaceNumber	libusb/os/windows_usb.h	/^  UCHAR  bInterfaceNumber;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR
bInterfaceProtocol	libusb/libusb.h	/^	uint8_t  bInterfaceProtocol;$/;"	m	struct:libusb_interface_descriptor
bInterfaceProtocol	libusb/os/windows_usb.h	/^  UCHAR  bInterfaceProtocol;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR
bInterfaceSubClass	libusb/libusb.h	/^	uint8_t  bInterfaceSubClass;$/;"	m	struct:libusb_interface_descriptor
bInterfaceSubClass	libusb/os/windows_usb.h	/^  UCHAR  bInterfaceSubClass;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR
bInterval	libusb/libusb.h	/^	uint8_t  bInterval;$/;"	m	struct:libusb_endpoint_descriptor
bInterval	libusb/os/windows_usb.h	/^  UCHAR  bInterval;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_bos_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_config_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_container_id_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_device_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_endpoint_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_interface_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_usb_2_0_extension_descriptor
bLength	libusb/libusb.h	/^	uint8_t bLength;$/;"	m	struct:libusb_bos_dev_capability_descriptor
bLength	libusb/libusbi.h	/^	uint8_t  bLength;$/;"	m	struct:usb_descriptor_header
bLength	libusb/os/wince_usb.h	/^	UINT8 bLength;$/;"	m	struct:__anon19
bLength	libusb/os/windows_usb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_hid_descriptor
bLength	libusb/os/windows_usb.h	/^  UCHAR  bLength;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR
bLength	libusb/os/windows_usb.h	/^  UCHAR  bLength;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR
bLength	libusb/os/windows_usb.h	/^  UCHAR  bLength;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR
bMaxBurst	libusb/libusb.h	/^	uint8_t  bMaxBurst;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor
bMaxPacketSize0	libusb/libusb.h	/^	uint8_t  bMaxPacketSize0;$/;"	m	struct:libusb_device_descriptor
bMaxPacketSize0	libusb/os/wince_usb.h	/^	UINT8 bMaxPacketSize0;$/;"	m	struct:__anon19
bNumConfigurations	libusb/libusb.h	/^	uint8_t  bNumConfigurations;$/;"	m	struct:libusb_device_descriptor
bNumConfigurations	libusb/os/wince_usb.h	/^	UINT8 bNumConfigurations;$/;"	m	struct:__anon19
bNumDescriptors	libusb/os/windows_usb.h	/^	uint8_t  bNumDescriptors;$/;"	m	struct:libusb_hid_descriptor
bNumDeviceCaps	libusb/libusb.h	/^	uint8_t  bNumDeviceCaps;$/;"	m	struct:libusb_bos_descriptor
bNumEndpoints	libusb/libusb.h	/^	uint8_t  bNumEndpoints;$/;"	m	struct:libusb_interface_descriptor
bNumEndpoints	libusb/os/windows_usb.h	/^  UCHAR  bNumEndpoints;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR
bNumInterfaces	libusb/libusb.h	/^	uint8_t  bNumInterfaces;$/;"	m	struct:libusb_config_descriptor
bNumInterfaces	libusb/os/windows_usb.h	/^  UCHAR  bNumInterfaces;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR
bNumberOfPorts	libusb/os/windows_usb.h	/^	UCHAR  bNumberOfPorts;$/;"	m	struct:USB_HUB_DESCRIPTOR
bPowerOnToPowerGood	libusb/os/windows_usb.h	/^	UCHAR  bPowerOnToPowerGood;$/;"	m	struct:USB_HUB_DESCRIPTOR
bRefresh	libusb/libusb.h	/^	uint8_t  bRefresh;$/;"	m	struct:libusb_endpoint_descriptor
bRemoveAndPowerMask	libusb/os/windows_usb.h	/^	UCHAR  bRemoveAndPowerMask[64];$/;"	m	struct:USB_HUB_DESCRIPTOR
bRequest	libusb/libusb.h	/^	uint8_t  bRequest;$/;"	m	struct:libusb_control_setup
bRequest	libusb/os/linux_usbfs.h	/^	uint8_t  bRequest;$/;"	m	struct:usbfs_ctrltransfer
bRequest	libusb/os/wince_usb.h	/^	UINT8 bRequest;$/;"	m	struct:__anon20
bRequest	libusb/os/windows_usb.h	/^			UCHAR bRequest;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon5::__anon6
bRequest	libusb/os/windows_usb.h	/^		UCHAR  bRequest;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon7
bReserved	libusb/libusb.h	/^	uint8_t bReserved;$/;"	m	struct:libusb_container_id_descriptor
bSynchAddress	libusb/libusb.h	/^	uint8_t  bSynchAddress;$/;"	m	struct:libusb_endpoint_descriptor
bU1DevExitLat	libusb/libusb.h	/^	uint8_t  bU1DevExitLat;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bU2DevExitLat	libusb/libusb.h	/^	uint16_t bU2DevExitLat;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bcdDevice	libusb/libusb.h	/^	uint16_t bcdDevice;$/;"	m	struct:libusb_device_descriptor
bcdDevice	libusb/os/wince_usb.h	/^	UINT16 bcdDevice;$/;"	m	struct:__anon19
bcdHID	libusb/os/windows_usb.h	/^	uint16_t bcdHID;$/;"	m	struct:libusb_hid_descriptor
bcdUSB	libusb/libusb.h	/^	uint16_t bcdUSB;$/;"	m	struct:libusb_device_descriptor
bcdUSB	libusb/os/wince_usb.h	/^	UINT16 bcdUSB;$/;"	m	struct:__anon19
be_to_int32	examples/xusb.c	70;"	d	file:
benchmark_in	examples/sam3u_benchmark.c	/^static int benchmark_in(uint8_t ep)$/;"	f	file:
binary_dump	examples/xusb.c	/^static bool binary_dump = false;$/;"	v	file:
binary_name	examples/xusb.c	/^static const char* binary_name = NULL;$/;"	v	file:
bmAttributes	libusb/libusb.h	/^	uint32_t  bmAttributes;$/;"	m	struct:libusb_usb_2_0_extension_descriptor
bmAttributes	libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_config_descriptor
bmAttributes	libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_endpoint_descriptor
bmAttributes	libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor
bmAttributes	libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bmAttributes	libusb/os/windows_usb.h	/^  UCHAR  bmAttributes;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR
bmAttributes	libusb/os/windows_usb.h	/^  UCHAR  bmAttributes;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR
bmCBWFlags	examples/xusb.c	/^	uint8_t bmCBWFlags;$/;"	m	struct:command_block_wrapper	file:
bmRequest	libusb/os/windows_usb.h	/^			UCHAR bmRequest;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon5::__anon6
bmRequest	libusb/os/windows_usb.h	/^		UCHAR  bmRequest;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon7
bmRequestType	libusb/libusb.h	/^	uint8_t  bmRequestType;$/;"	m	struct:libusb_control_setup
bmRequestType	libusb/os/linux_usbfs.h	/^	uint8_t  bmRequestType;$/;"	m	struct:usbfs_ctrltransfer
bmRequestType	libusb/os/wince_usb.h	/^	UINT8 bmRequestType;$/;"	m	struct:__anon20
bool	examples/ezusb.h	28;"	d
bool	examples/xusb.c	37;"	d	file:
bool	libusb/os/windows_common.h	31;"	d
bool	tests/libusbx_testlib.h	26;"	d
buffer	libusb/libusb.h	/^	unsigned char *buffer;$/;"	m	struct:libusb_transfer
buffer	libusb/os/linux_usbfs.h	/^	void *buffer;$/;"	m	struct:usbfs_urb
buffer_length	libusb/os/linux_usbfs.h	/^	int buffer_length;$/;"	m	struct:usbfs_urb
builderror	msvc/ddk_build.cmd	/^:builderror$/;"	l
bus_number	libusb/libusbi.h	/^	uint8_t bus_number;$/;"	m	struct:libusb_device
cache_config_descriptors	libusb/os/windows_usb.c	/^static int cache_config_descriptors(struct libusb_device *dev, HANDLE hub_handle, char* device_id)$/;"	f	file:
calculate_timeout	libusb/io.c	/^static int calculate_timeout(struct usbi_transfer *transfer)$/;"	f	file:
callback	libusb/libusb.h	/^	libusb_transfer_cb_fn callback;$/;"	m	struct:libusb_transfer
can_enumerate	libusb/os/darwin_usb.h	/^  int                   can_enumerate;$/;"	m	struct:darwin_cached_device
cancel_control_transfer	libusb/os/darwin_usb.c	/^static int cancel_control_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:
cancel_fn	libusb/os/poll_windows.h	/^	cancel_transfer *cancel_fn;		\/\/ Function pointer to cancel transfer API$/;"	m	struct:winfd
cancel_io	libusb/os/poll_windows.c	/^static __inline BOOL cancel_io(int _index)$/;"	f	file:
cancel_io	libusb/os/poll_windows.c	/^static inline BOOL cancel_io(int _index)$/;"	f	file:
cancel_transfer	libusb/libusbi.h	/^	int (*cancel_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:usbi_os_backend
cancel_transfer	libusb/os/poll_windows.h	/^typedef int cancel_transfer(struct usbi_transfer *itransfer);$/;"	t
capacity	libusb/libusbi.h	/^	size_t capacity;$/;"	m	struct:discovered_devs
caps	libusb/libusbi.h	/^	uint32_t caps;$/;"	m	struct:usbi_os_backend
caps	libusb/os/linux_usbfs.c	/^	uint32_t caps;$/;"	m	struct:linux_device_handle_priv	file:
cb	libusb/hotplug.h	/^	libusb_hotplug_callback_fn cb;$/;"	m	struct:libusb_hotplug_callback
cb_img	examples/dpfp.c	/^static void LIBUSB_CALL cb_img(struct libusb_transfer *transfer)$/;"	f	file:
cb_img	examples/dpfp_threaded.c	/^static void LIBUSB_CALL cb_img(struct libusb_transfer *transfer)$/;"	f	file:
cb_irq	examples/dpfp.c	/^static void LIBUSB_CALL cb_irq(struct libusb_transfer *transfer)$/;"	f	file:
cb_irq	examples/dpfp_threaded.c	/^static void LIBUSB_CALL cb_irq(struct libusb_transfer *transfer)$/;"	f	file:
cb_mode_changed	examples/dpfp.c	/^static void LIBUSB_CALL cb_mode_changed(struct libusb_transfer *transfer)$/;"	f	file:
cb_mode_changed	examples/dpfp_threaded.c	/^static void LIBUSB_CALL cb_mode_changed(struct libusb_transfer *transfer)$/;"	f	file:
cb_xfr	examples/sam3u_benchmark.c	/^static void LIBUSB_CALL cb_xfr(struct libusb_transfer *xfr)$/;"	f	file:
cdb_length	examples/xusb.c	/^static uint8_t cdb_length[256] = {$/;"	v	file:
cdesc	libusb/os/netbsd_usb.c	/^	unsigned char *cdesc;			\/* active config descriptor *\/$/;"	m	struct:device_priv	file:
cdesc	libusb/os/openbsd_usb.c	/^	unsigned char *cdesc;			\/* active config descriptor *\/$/;"	m	struct:device_priv	file:
cfSource	libusb/os/darwin_usb.h	/^    CFRunLoopSourceRef   cfSource;$/;"	m	struct:darwin_device_handle_priv::darwin_interface
cfSource	libusb/os/darwin_usb.h	/^  CFRunLoopSourceRef   cfSource;$/;"	m	struct:darwin_device_handle_priv
check_usb_vfs	libusb/os/linux_usbfs.c	/^static int check_usb_vfs(const char *dirname)$/;"	f	file:
claim_interface	libusb/libusbi.h	/^	int (*claim_interface)(struct libusb_device_handle *handle, int interface_number);$/;"	m	struct:usbi_os_backend
claim_interface	libusb/os/linux_usbfs.c	/^static int claim_interface(struct libusb_device_handle *handle, int iface)$/;"	f	file:
claim_interface	libusb/os/windows_usb.h	/^	int (*claim_interface)(int sub_api, struct libusb_device_handle *dev_handle, int iface);$/;"	m	struct:windows_usb_api_backend
claimed_interfaces	libusb/libusbi.h	/^	unsigned long claimed_interfaces;$/;"	m	struct:libusb_device_handle
cleanup_test_output	tests/testlib.c	/^static void cleanup_test_output(libusbx_testlib_ctx * ctx)$/;"	f	file:
clear_configuration	libusb/descriptor.c	/^static void clear_configuration(struct libusb_config_descriptor *config)$/;"	f	file:
clear_endpoint	libusb/descriptor.c	/^static void clear_endpoint(struct libusb_endpoint_descriptor *endpoint)$/;"	f	file:
clear_halt	libusb/libusbi.h	/^	int (*clear_halt)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend
clear_halt	libusb/os/windows_usb.h	/^	int (*clear_halt)(int sub_api, struct libusb_device_handle *dev_handle, unsigned char endpoint);$/;"	m	struct:windows_usb_api_backend
clear_interface	libusb/descriptor.c	/^static void clear_interface(struct libusb_interface *usb_interface)$/;"	f	file:
clear_transfer_priv	libusb/libusbi.h	/^	void (*clear_transfer_priv)(struct usbi_transfer *itransfer);$/;"	m	struct:usbi_os_backend
clock_gettime	libusb/libusbi.h	/^	int (*clock_gettime)(int clkid, struct timespec *tp);$/;"	m	struct:usbi_os_backend
clock_monotonic	libusb/os/darwin_usb.c	/^static clock_serv_t clock_monotonic;$/;"	v	file:
clock_realtime	libusb/os/darwin_usb.c	/^static clock_serv_t clock_realtime;$/;"	v	file:
close	libusb/libusbi.h	/^	void (*close)(struct libusb_device_handle *handle);$/;"	m	struct:usbi_os_backend
close	libusb/os/windows_usb.h	/^	void (*close)(int sub_api, struct libusb_device_handle *dev_handle);$/;"	m	struct:windows_usb_api_backend
close	tests/testlib.c	41;"	d	file:
command_block_wrapper	examples/xusb.c	/^struct command_block_wrapper {$/;"	s	file:
command_status_wrapper	examples/xusb.c	/^struct command_status_wrapper {$/;"	s	file:
common_configure_endpoints	libusb/os/windows_usb.c	/^static int common_configure_endpoints(int sub_api, struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:
compat_spinlock	libusb/os/poll_windows.c	/^static volatile LONG compat_spinlock = 0;$/;"	v	file:
composite_abort_control	libusb/os/windows_usb.c	/^static int composite_abort_control(int sub_api, struct usbi_transfer *itransfer)$/;"	f	file:
composite_abort_transfers	libusb/os/windows_usb.c	/^static int composite_abort_transfers(int sub_api, struct usbi_transfer *itransfer)$/;"	f	file:
composite_claim_interface	libusb/os/windows_usb.c	/^static int composite_claim_interface(int sub_api, struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
composite_clear_halt	libusb/os/windows_usb.c	/^static int composite_clear_halt(int sub_api, struct libusb_device_handle *dev_handle, unsigned char endpoint)$/;"	f	file:
composite_close	libusb/os/windows_usb.c	/^static void composite_close(int sub_api, struct libusb_device_handle *dev_handle)$/;"	f	file:
composite_copy_transfer_data	libusb/os/windows_usb.c	/^static int composite_copy_transfer_data(int sub_api, struct usbi_transfer *itransfer, uint32_t io_size)$/;"	f	file:
composite_driver_names	libusb/os/windows_usb.c	/^const char* composite_driver_names[] = {"USBCCGP"};$/;"	v
composite_exit	libusb/os/windows_usb.c	/^static int composite_exit(int sub_api)$/;"	f	file:
composite_init	libusb/os/windows_usb.c	/^static int composite_init(int sub_api, struct libusb_context *ctx)$/;"	f	file:
composite_open	libusb/os/windows_usb.c	/^static int composite_open(int sub_api, struct libusb_device_handle *dev_handle)$/;"	f	file:
composite_release_interface	libusb/os/windows_usb.c	/^static int composite_release_interface(int sub_api, struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
composite_reset_device	libusb/os/windows_usb.c	/^static int composite_reset_device(int sub_api, struct libusb_device_handle *dev_handle)$/;"	f	file:
composite_set_interface_altsetting	libusb/os/windows_usb.c	/^static int composite_set_interface_altsetting(int sub_api, struct libusb_device_handle *dev_handle, int iface, int altsetting)$/;"	f	file:
composite_submit_bulk_transfer	libusb/os/windows_usb.c	/^static int composite_submit_bulk_transfer(int sub_api, struct usbi_transfer *itransfer) {$/;"	f	file:
composite_submit_control_transfer	libusb/os/windows_usb.c	/^static int composite_submit_control_transfer(int sub_api, struct usbi_transfer *itransfer)$/;"	f	file:
composite_submit_iso_transfer	libusb/os/windows_usb.c	/^static int composite_submit_iso_transfer(int sub_api, struct usbi_transfer *itransfer) {$/;"	f	file:
concurrent_usage	libusb/os/wince_usb.c	/^static int concurrent_usage = -1;$/;"	v	file:
concurrent_usage	libusb/os/windows_usb.c	/^static int concurrent_usage = -1;$/;"	v	file:
config	libusb/os/windows_usb.h	/^	uint8_t config;$/;"	m	struct:hid_device_priv
config_descriptor	libusb/os/windows_usb.h	/^	unsigned char **config_descriptor;	\/\/ list of pointers to the cached config descriptors$/;"	m	struct:windows_device_priv
configure_endpoints	libusb/os/windows_usb.h	/^	int (*configure_endpoints)(int sub_api, struct libusb_device_handle *dev_handle, int iface);$/;"	m	struct:windows_usb_api_backend
const	examples/getopt/getopt.c	38;"	d	file:
const	examples/getopt/getopt1.c	31;"	d	file:
container_of	libusb/libusbi.h	143;"	d
copy_transfer_data	libusb/os/windows_usb.h	/^	int (*copy_transfer_data)(int sub_api, struct usbi_transfer *itransfer, uint32_t io_size);$/;"	m	struct:windows_usb_api_backend
copylib	msvc/ddk_build.cmd	/^:copylib$/;"	l
count	examples/ezusb.c	/^	size_t total, count;$/;"	m	struct:ram_poke_context	file:
cpudir	msvc/ddk_build.cmd	/^set cpudir=amd64$/;"	v
cpudir	msvc/ddk_build.cmd	/^set cpudir=i386$/;"	v
create_overlapped	libusb/os/poll_windows.c	/^static OVERLAPPED *create_overlapped(void)$/;"	f	file:
ctrl_pipe	libusb/libusbi.h	/^	int ctrl_pipe[2];$/;"	m	struct:libusb_context
ctx	libusb/hotplug.h	/^	struct libusb_context *ctx;$/;"	m	struct:libusb_hotplug_callback	typeref:struct:libusb_hotplug_callback::libusb_context
ctx	libusb/libusbi.h	/^	struct libusb_context *ctx;$/;"	m	struct:libusb_device	typeref:struct:libusb_device::libusb_context
dCBWDataTransferLength	examples/xusb.c	/^	uint32_t dCBWDataTransferLength;$/;"	m	struct:command_block_wrapper	file:
dCBWSignature	examples/xusb.c	/^	uint8_t dCBWSignature[4];$/;"	m	struct:command_block_wrapper	file:
dCBWTag	examples/xusb.c	/^	uint32_t dCBWTag;$/;"	m	struct:command_block_wrapper	file:
dCSWDataResidue	examples/xusb.c	/^	uint32_t dCSWDataResidue;$/;"	m	struct:command_status_wrapper	file:
dCSWSignature	examples/xusb.c	/^	uint8_t dCSWSignature[4];$/;"	m	struct:command_status_wrapper	file:
dCSWTag	examples/xusb.c	/^	uint32_t dCSWTag;$/;"	m	struct:command_status_wrapper	file:
darwin_abort_transfers	libusb/os/darwin_usb.c	/^static int darwin_abort_transfers (struct usbi_transfer *itransfer) {$/;"	f	file:
darwin_async_io_callback	libusb/os/darwin_usb.c	/^static void darwin_async_io_callback (void *refcon, IOReturn result, void *arg0) {$/;"	f	file:
darwin_attach_kernel_driver	libusb/os/darwin_usb.c	/^static int darwin_attach_kernel_driver (struct libusb_device_handle *dev_handle, int interface) {$/;"	f	file:
darwin_backend	libusb/os/darwin_usb.c	/^const struct usbi_os_backend darwin_backend = {$/;"	v	typeref:struct:usbi_os_backend
darwin_cache_device_descriptor	libusb/os/darwin_usb.c	/^static int darwin_cache_device_descriptor (struct libusb_context *ctx, struct darwin_cached_device *dev) {$/;"	f	file:
darwin_cached_device	libusb/os/darwin_usb.h	/^struct darwin_cached_device {$/;"	s
darwin_cached_devices	libusb/os/darwin_usb.c	/^static struct list_head darwin_cached_devices = {&darwin_cached_devices, &darwin_cached_devices};$/;"	v	typeref:struct:list_head	file:
darwin_cached_devices_lock	libusb/os/darwin_usb.c	/^static usbi_mutex_t darwin_cached_devices_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
darwin_cancel_transfer	libusb/os/darwin_usb.c	/^static int darwin_cancel_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:
darwin_check_configuration	libusb/os/darwin_usb.c	/^static int darwin_check_configuration (struct libusb_context *ctx, struct darwin_cached_device *dev) {$/;"	f	file:
darwin_claim_interface	libusb/os/darwin_usb.c	/^static int darwin_claim_interface(struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:
darwin_clear_halt	libusb/os/darwin_usb.c	/^static int darwin_clear_halt(struct libusb_device_handle *dev_handle, unsigned char endpoint) {$/;"	f	file:
darwin_clear_iterator	libusb/os/darwin_usb.c	/^static void darwin_clear_iterator (io_iterator_t iter) {$/;"	f	file:
darwin_clear_transfer_priv	libusb/os/darwin_usb.c	/^static void darwin_clear_transfer_priv (struct usbi_transfer *itransfer) {$/;"	f	file:
darwin_clock_gettime	libusb/os/darwin_usb.c	/^static int darwin_clock_gettime(int clk_id, struct timespec *tp) {$/;"	f	file:
darwin_close	libusb/os/darwin_usb.c	/^static void darwin_close (struct libusb_device_handle *dev_handle) {$/;"	f	file:
darwin_deref_cached_device	libusb/os/darwin_usb.c	/^static void darwin_deref_cached_device(struct darwin_cached_device *cached_dev) {$/;"	f	file:
darwin_destroy_device	libusb/os/darwin_usb.c	/^static void darwin_destroy_device(struct libusb_device *dev) {$/;"	f	file:
darwin_detach_kernel_driver	libusb/os/darwin_usb.c	/^static int darwin_detach_kernel_driver (struct libusb_device_handle *dev_handle, int interface) {$/;"	f	file:
darwin_device_from_service	libusb/os/darwin_usb.c	/^static usb_device_t **darwin_device_from_service (io_service_t service)$/;"	f	file:
darwin_device_handle_priv	libusb/os/darwin_usb.h	/^struct darwin_device_handle_priv {$/;"	s
darwin_device_priv	libusb/os/darwin_usb.h	/^struct darwin_device_priv {$/;"	s
darwin_devices_attached	libusb/os/darwin_usb.c	/^static void darwin_devices_attached (void *ptr, io_iterator_t add_devices) {$/;"	f	file:
darwin_devices_detached	libusb/os/darwin_usb.c	/^static void darwin_devices_detached (void *ptr, io_iterator_t rem_devices) {$/;"	f	file:
darwin_error_str	libusb/os/darwin_usb.c	/^static const char *darwin_error_str (int result) {$/;"	f	file:
darwin_event_thread_main	libusb/os/darwin_usb.c	/^static void *darwin_event_thread_main (void *arg0) {$/;"	f	file:
darwin_exit	libusb/os/darwin_usb.c	/^static void darwin_exit (void) {$/;"	f	file:
darwin_get_active_config_descriptor	libusb/os/darwin_usb.c	/^static int darwin_get_active_config_descriptor(struct libusb_device *dev, unsigned char *buffer, size_t len, int *host_endian) {$/;"	f	file:
darwin_get_cached_device	libusb/os/darwin_usb.c	/^static int darwin_get_cached_device(struct libusb_context *ctx, io_service_t service,$/;"	f	file:
darwin_get_config_descriptor	libusb/os/darwin_usb.c	/^static int darwin_get_config_descriptor(struct libusb_device *dev, uint8_t config_index, unsigned char *buffer, size_t len, int *host_endian) {$/;"	f	file:
darwin_get_configuration	libusb/os/darwin_usb.c	/^static int darwin_get_configuration(struct libusb_device_handle *dev_handle, int *config) {$/;"	f	file:
darwin_get_device_descriptor	libusb/os/darwin_usb.c	/^static int darwin_get_device_descriptor(struct libusb_device *dev, unsigned char *buffer, int *host_endian) {$/;"	f	file:
darwin_get_interface	libusb/os/darwin_usb.c	/^static int darwin_get_interface (usb_device_t **darwin_device, uint8_t ifc, io_service_t *usbInterfacep) {$/;"	f	file:
darwin_handle_callback	libusb/os/darwin_usb.c	/^static void darwin_handle_callback (struct usbi_transfer *itransfer, kern_return_t result, UInt32 io_size) {$/;"	f	file:
darwin_init	libusb/os/darwin_usb.c	/^static int darwin_init(struct libusb_context *ctx) {$/;"	f	file:
darwin_interface	libusb/os/darwin_usb.h	/^  struct darwin_interface {$/;"	s	struct:darwin_device_handle_priv
darwin_kernel_driver_active	libusb/os/darwin_usb.c	/^static int darwin_kernel_driver_active(struct libusb_device_handle *dev_handle, int interface) {$/;"	f	file:
darwin_msg_async_io_complete	libusb/os/darwin_usb.h	/^struct darwin_msg_async_io_complete {$/;"	s
darwin_open	libusb/os/darwin_usb.c	/^static int darwin_open (struct libusb_device_handle *dev_handle) {$/;"	f	file:
darwin_ref_cached_device	libusb/os/darwin_usb.c	/^static void darwin_ref_cached_device(struct darwin_cached_device *cached_dev) {$/;"	f	file:
darwin_release_interface	libusb/os/darwin_usb.c	/^static int darwin_release_interface(struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:
darwin_request_descriptor	libusb/os/darwin_usb.c	/^static int darwin_request_descriptor (usb_device_t **device, UInt8 desc, UInt8 desc_index, void *buffer, size_t buffer_size) {$/;"	f	file:
darwin_reset_device	libusb/os/darwin_usb.c	/^static int darwin_reset_device(struct libusb_device_handle *dev_handle) {$/;"	f	file:
darwin_scan_devices	libusb/os/darwin_usb.c	/^static int darwin_scan_devices(struct libusb_context *ctx) {$/;"	f	file:
darwin_set_configuration	libusb/os/darwin_usb.c	/^static int darwin_set_configuration(struct libusb_device_handle *dev_handle, int config) {$/;"	f	file:
darwin_set_interface_altsetting	libusb/os/darwin_usb.c	/^static int darwin_set_interface_altsetting(struct libusb_device_handle *dev_handle, int iface, int altsetting) {$/;"	f	file:
darwin_submit_transfer	libusb/os/darwin_usb.c	/^static int darwin_submit_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:
darwin_to_libusb	libusb/os/darwin_usb.c	/^static int darwin_to_libusb (int result) {$/;"	f	file:
darwin_transfer_priv	libusb/os/darwin_usb.h	/^struct darwin_transfer_priv {$/;"	s
darwin_transfer_status	libusb/os/darwin_usb.c	/^static int darwin_transfer_status (struct usbi_transfer *itransfer, kern_return_t result) {$/;"	f	file:
data	libusb/os/linux_usbfs.h	/^	void *data;	\/* param buffer (in, or out) *\/$/;"	m	struct:usbfs_ioctl
data	libusb/os/linux_usbfs.h	/^	void *data;$/;"	m	struct:usbfs_bulktransfer
data	libusb/os/linux_usbfs.h	/^	void *data;$/;"	m	struct:usbfs_ctrltransfer
data	libusb/os/windows_usb.h	/^	USB_CONFIGURATION_DESCRIPTOR data;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT
ddesc	libusb/os/netbsd_usb.c	/^	usb_device_descriptor_t ddesc;		\/* usb device descriptor *\/$/;"	m	struct:device_priv	file:
ddesc	libusb/os/openbsd_usb.c	/^	usb_device_descriptor_t ddesc;		\/* usb device descriptor *\/$/;"	m	struct:device_priv	file:
debug	libusb/libusbi.h	/^	int debug;$/;"	m	struct:libusb_context
debug_fixed	libusb/libusbi.h	/^	int debug_fixed;$/;"	m	struct:libusb_context
default_context_lock	libusb/core.c	/^static usbi_mutex_static_t default_context_lock = USBI_MUTEX_INITIALIZER;$/;"	v	file:
default_context_refcnt	libusb/core.c	/^static int default_context_refcnt = 0;$/;"	v	file:
depth	libusb/os/windows_usb.h	/^	uint8_t depth;						\/\/ distance to HCD$/;"	m	struct:windows_device_priv
desc	libusb/os/wince_usb.h	/^	UKW_DEVICE_DESCRIPTOR desc;$/;"	m	struct:wince_device_priv
describe	libusb/libusb.h	/^	const char* describe;$/;"	m	struct:libusb_version
descriptors	libusb/os/linux_usbfs.c	/^	unsigned char *descriptors;$/;"	m	struct:linux_device_priv	file:
descriptors_len	libusb/os/linux_usbfs.c	/^	int descriptors_len;$/;"	m	struct:linux_device_priv	file:
designation	examples/ezusb.h	/^	const char* designation;$/;"	m	struct:__anon26
designation	libusb/os/windows_usb.h	/^	const char* designation;	\/\/ internal designation (for debug output)$/;"	m	struct:driver_lookup
designation	libusb/os/windows_usb.h	/^	const char* designation;$/;"	m	struct:windows_usb_api_backend
destType	msvc/ddk_build.cmd	/^set destType=Win32$/;"	v
destType	msvc/ddk_build.cmd	/^set destType=x64$/;"	v
destroy_device	libusb/libusbi.h	/^	void (*destroy_device)(struct libusb_device *dev);$/;"	m	struct:usbi_os_backend
detach_kernel_driver	libusb/libusbi.h	/^	int (*detach_kernel_driver)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend
detach_kernel_driver_and_claim	libusb/os/linux_usbfs.c	/^static int detach_kernel_driver_and_claim(struct libusb_device_handle *handle,$/;"	f	file:
dev	libusb/libusbi.h	/^	struct libusb_device *dev;$/;"	m	struct:libusb_device_handle	typeref:struct:libusb_device_handle::libusb_device
dev	libusb/os/darwin_usb.h	/^  struct darwin_cached_device *dev;$/;"	m	struct:darwin_device_priv	typeref:struct:darwin_device_priv::darwin_cached_device
dev	libusb/os/wince_usb.h	/^	UKW_DEVICE dev;$/;"	m	struct:wince_device_priv
dev_capability	libusb/libusb.h	/^	struct libusb_bos_dev_capability_descriptor *dev_capability$/;"	m	struct:libusb_bos_descriptor	typeref:struct:libusb_bos_descriptor::libusb_bos_dev_capability_descriptor
dev_capability_data	libusb/libusb.h	/^	uint8_t dev_capability_data$/;"	m	struct:libusb_bos_dev_capability_descriptor
dev_class	libusb/hotplug.h	/^	int dev_class;$/;"	m	struct:libusb_hotplug_callback
dev_descriptor	libusb/os/darwin_usb.h	/^  IOUSBDeviceDescriptor dev_descriptor;$/;"	m	struct:darwin_cached_device
dev_descriptor	libusb/os/windows_usb.h	/^	USB_DEVICE_DESCRIPTOR dev_descriptor;$/;"	m	struct:windows_device_priv
dev_handle	libusb/libusb.h	/^	libusb_device_handle *dev_handle;$/;"	m	struct:libusb_transfer
dev_handle	libusb/os/windows_usb.h	/^	HANDLE dev_handle; \/\/ WinUSB needs an extra handle for the file$/;"	m	struct:interface_handle_t
devh	examples/dpfp.c	/^static struct libusb_device_handle *devh = NULL;$/;"	v	typeref:struct:libusb_device_handle	file:
devh	examples/dpfp_threaded.c	/^static struct libusb_device_handle *devh = NULL;$/;"	v	typeref:struct:libusb_device_handle	file:
devh	examples/sam3u_benchmark.c	/^static struct libusb_device_handle *devh = NULL;$/;"	v	typeref:struct:libusb_device_handle	file:
device	examples/ezusb.c	/^	libusb_device_handle *device;$/;"	m	struct:ram_poke_context	file:
device	libusb/hotplug.h	/^	struct libusb_device *device;$/;"	m	struct:libusb_hotplug_message	typeref:struct:libusb_hotplug_message::libusb_device
device	libusb/os/darwin_usb.h	/^  usb_device_t        **device;$/;"	m	struct:darwin_cached_device
device_address	libusb/libusbi.h	/^	uint8_t device_address;$/;"	m	struct:libusb_device
device_descriptor	libusb/libusbi.h	/^	struct libusb_device_descriptor device_descriptor;$/;"	m	struct:libusb_device	typeref:struct:libusb_device::libusb_device_descriptor
device_handle_priv_size	libusb/libusbi.h	/^	size_t device_handle_priv_size;$/;"	m	struct:usbi_os_backend
device_priv	libusb/os/netbsd_usb.c	/^struct device_priv {$/;"	s	file:
device_priv	libusb/os/openbsd_usb.c	/^struct device_priv {$/;"	s	file:
device_priv_size	libusb/libusbi.h	/^	size_t device_priv_size;$/;"	m	struct:usbi_os_backend
devices	libusb/libusbi.h	/^	struct libusb_device *devices$/;"	m	struct:discovered_devs	typeref:struct:discovered_devs::libusb_device
devname	libusb/os/openbsd_usb.c	/^	char *devname;				\/* name of the ugen(4) node *\/$/;"	m	struct:device_priv	file:
devnode	libusb/os/netbsd_usb.c	/^	char devnode[16];$/;"	m	struct:device_priv	file:
devnum	libusb/os/linux_usbfs.h	/^	unsigned int devnum;$/;"	m	struct:usbfs_connectinfo
disarm_timerfd	libusb/io.c	/^static int disarm_timerfd(struct libusb_context *ctx)$/;"	f	file:
discard_urbs	libusb/os/linux_usbfs.c	/^static int discard_urbs(struct usbi_transfer *itransfer, int first, int last_plus_one)$/;"	f	file:
discovered_devs	libusb/libusbi.h	/^struct discovered_devs {$/;"	s
discovered_devs_alloc	libusb/core.c	/^static struct discovered_devs *discovered_devs_alloc(void)$/;"	f	file:
discovered_devs_append	libusb/core.c	/^struct discovered_devs *discovered_devs_append($/;"	f
discovered_devs_free	libusb/core.c	/^static void discovered_devs_free(struct discovered_devs *discdevs)$/;"	f	file:
display_buffer_hex	examples/xusb.c	/^static void display_buffer_hex(unsigned char *buffer, unsigned size)$/;"	f	file:
display_ps3_status	examples/xusb.c	/^static int display_ps3_status(libusb_device_handle *handle)$/;"	f	file:
display_xbox_status	examples/xusb.c	/^static int display_xbox_status(libusb_device_handle *handle)$/;"	f	file:
do_close	libusb/core.c	/^static void do_close(struct libusb_context *ctx,$/;"	f	file:
do_exit	examples/dpfp.c	/^static int do_exit = 0;$/;"	v	file:
do_exit	examples/dpfp_threaded.c	/^static int do_exit = 0;$/;"	v	file:
do_exit	examples/sam3u_benchmark.c	/^static int do_exit = 0;$/;"	v	file:
do_init	examples/dpfp.c	/^static int do_init(void)$/;"	f	file:
do_init	examples/dpfp_threaded.c	/^static int do_init(void)$/;"	f	file:
do_sync_bulk_transfer	libusb/sync.c	/^static int do_sync_bulk_transfer(struct libusb_device_handle *dev_handle,$/;"	f	file:
do_sync_intr	examples/dpfp.c	/^static int do_sync_intr(unsigned char *data)$/;"	f	file:
do_sync_intr	examples/dpfp_threaded.c	/^static int do_sync_intr(unsigned char *data)$/;"	f	file:
done	.private/bd.cmd	/^:done$/;"	l
done	.private/bwince.cmd	/^:done$/;"	l
done	examples/hotplugtest.c	/^int done = 0;$/;"	v
done	msvc/ddk_build.cmd	/^:done$/;"	l
dosyslog	examples/fxload.c	/^static bool dosyslog = false;$/;"	v	file:
driver	libusb/os/linux_usbfs.h	/^	char driver[USBFS_MAXDRIVERNAME + 1];$/;"	m	struct:usbfs_disconnect_claim
driver	libusb/os/linux_usbfs.h	/^	char driver[USBFS_MAXDRIVERNAME + 1];$/;"	m	struct:usbfs_getdriver
driver_handle	libusb/os/wince_usb.c	/^HANDLE driver_handle = INVALID_HANDLE_VALUE;$/;"	v
driver_lookup	libusb/os/windows_usb.h	/^struct driver_lookup {$/;"	s
driver_name_list	libusb/os/windows_usb.h	/^	const char **driver_name_list; \/\/ Driver name, without .sys, e.g. "usbccgp"$/;"	m	struct:windows_usb_api_backend
dstPath	msvc/ddk_build.cmd	/^set dstPath=%destType%\\Debug$/;"	v
dstPath	msvc/ddk_build.cmd	/^set dstPath=%destType%\\Release$/;"	v
dup	tests/testlib.c	38;"	d	file:
dup2	tests/testlib.c	39;"	d	file:
endpoint	libusb/libusb.h	/^	const struct libusb_endpoint_descriptor *endpoint;$/;"	m	struct:libusb_interface_descriptor	typeref:struct:libusb_interface_descriptor::libusb_endpoint_descriptor
endpoint	libusb/libusb.h	/^	unsigned char endpoint;$/;"	m	struct:libusb_transfer
endpoint	libusb/os/linux_usbfs.h	/^	unsigned char endpoint;$/;"	m	struct:usbfs_urb
endpoint	libusb/os/windows_usb.h	/^		uint8_t *endpoint;$/;"	m	struct:windows_device_priv::__anon4
endpoint_addrs	libusb/os/darwin_usb.h	/^    uint8_t            endpoint_addrs[USB_MAXENDPOINTS];$/;"	m	struct:darwin_device_handle_priv::darwin_interface
endpoints	libusb/os/netbsd_usb.c	/^	int endpoints[USB_MAX_ENDPOINTS];$/;"	m	struct:handle_priv	file:
endpoints	libusb/os/openbsd_usb.c	/^	int endpoints[USB_MAX_ENDPOINTS];$/;"	m	struct:handle_priv	file:
ep	libusb/os/linux_usbfs.h	/^	unsigned int ep;$/;"	m	struct:usbfs_bulktransfer
ep_to_pipeRef	libusb/os/darwin_usb.c	/^static int ep_to_pipeRef(struct libusb_device_handle *dev_handle, uint8_t ep, uint8_t *pipep, uint8_t *ifcp) {$/;"	f	file:
epoch_time	libusb/os/wince_usb.c	/^const uint64_t epoch_time = UINT64_C(116444736000000000);       \/\/ 1970.01.01 00:00:000 in MS Filetime$/;"	v
epoch_time	libusb/os/windows_usb.c	/^const uint64_t epoch_time = UINT64_C(116444736000000000);	\/\/ 1970.01.01 00:00:000 in MS Filetime$/;"	v
errno	libusb/os/wince_usb.c	/^int errno;$/;"	v
errno	msvc/errno.h	89;"	d
errno	msvc/errno.h	93;"	d
error_count	libusb/os/linux_usbfs.h	/^	int error_count;$/;"	m	struct:usbfs_urb
event	libusb/hotplug.h	/^	libusb_hotplug_event event;$/;"	m	struct:libusb_hotplug_message
event	libusb/os/threads_windows.h	/^	HANDLE           event;$/;"	m	struct:usbi_cond_perthread
event_handler_active	libusb/libusbi.h	/^	int event_handler_active;$/;"	m	struct:libusb_context
event_waiters_cond	libusb/libusbi.h	/^	usbi_cond_t event_waiters_cond;$/;"	m	struct:libusb_context
event_waiters_lock	libusb/libusbi.h	/^	usbi_mutex_t event_waiters_lock;$/;"	m	struct:libusb_context
events	libusb/hotplug.h	/^	libusb_hotplug_event events;$/;"	m	struct:libusb_hotplug_callback
events	libusb/libusb.h	/^	short events;$/;"	m	struct:libusb_pollfd
events	libusb/os/poll_windows.h	/^    short events;     \/* requested events *\/$/;"	m	struct:pollfd
events_lock	libusb/libusbi.h	/^	usbi_mutex_t events_lock;$/;"	m	struct:libusb_context
exchange	examples/getopt/getopt.c	/^exchange (argv)$/;"	f	file:
exit	libusb/libusbi.h	/^	void (*exit)(void);$/;"	m	struct:usbi_os_backend
exit	libusb/os/windows_usb.h	/^	int (*exit)(int sub_api);$/;"	m	struct:windows_usb_api_backend
exit_cond	examples/dpfp_threaded.c	/^static pthread_cond_t exit_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
exit_cond_lock	examples/dpfp_threaded.c	/^static pthread_mutex_t exit_cond_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
exit_polling	libusb/os/poll_windows.c	/^void exit_polling(void)$/;"	f
extra	libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_config_descriptor
extra	libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_endpoint_descriptor
extra	libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_interface_descriptor
extra_info	examples/xusb.c	/^static bool extra_info = false;$/;"	v	file:
extra_length	libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_config_descriptor
extra_length	libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_endpoint_descriptor
extra_length	libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_interface_descriptor
ezusb_cpucs	examples/ezusb.c	/^static bool ezusb_cpucs(libusb_device_handle *device, uint32_t addr, bool doRun)$/;"	f	file:
ezusb_fx3_jump	examples/ezusb.c	/^static bool ezusb_fx3_jump(libusb_device_handle *device, uint32_t addr)$/;"	f	file:
ezusb_load_ram	examples/ezusb.c	/^int ezusb_load_ram(libusb_device_handle *device, const char *path, int fx_type, int img_type, int stage)$/;"	f
ezusb_read	examples/ezusb.c	/^static int ezusb_read(libusb_device_handle *device, const char *label,$/;"	f	file:
ezusb_write	examples/ezusb.c	/^static int ezusb_write(libusb_device_handle *device, const char *label,$/;"	f	file:
false	examples/ezusb.h	34;"	d
false	examples/xusb.c	43;"	d	file:
false	libusb/os/windows_common.h	37;"	d
false	tests/libusbx_testlib.h	32;"	d
fd	libusb/libusb.h	/^	int fd;$/;"	m	struct:libusb_pollfd
fd	libusb/os/linux_usbfs.c	/^	int fd;$/;"	m	struct:linux_device_handle_priv	file:
fd	libusb/os/netbsd_usb.c	/^	int fd;$/;"	m	struct:device_priv	file:
fd	libusb/os/openbsd_usb.c	/^	int fd;					\/* device file descriptor *\/$/;"	m	struct:device_priv	file:
fd	libusb/os/poll_windows.h	/^	int fd;							\/\/ what's exposed to libusb core$/;"	m	struct:winfd
fd	libusb/os/poll_windows.h	/^    int fd;           \/* file descriptor *\/$/;"	m	struct:pollfd
fd_added_cb	libusb/libusbi.h	/^	libusb_pollfd_added_cb fd_added_cb;$/;"	m	struct:libusb_context
fd_cb_user_data	libusb/libusbi.h	/^	void *fd_cb_user_data;$/;"	m	struct:libusb_context
fd_removed_cb	libusb/libusbi.h	/^	libusb_pollfd_removed_cb fd_removed_cb;$/;"	m	struct:libusb_context
fd_to_winfd	libusb/os/poll_windows.c	/^struct winfd fd_to_winfd(int fd)$/;"	f
fdopen	tests/testlib.c	42;"	d	file:
fds	libusb/os/darwin_usb.h	/^  int                  fds[2];$/;"	m	struct:darwin_device_handle_priv
feature_report_size	libusb/os/windows_usb.h	/^	uint16_t feature_report_size;$/;"	m	struct:hid_device_priv
find_dpfp_device	examples/dpfp.c	/^static int find_dpfp_device(void)$/;"	f	file:
find_dpfp_device	examples/dpfp_threaded.c	/^static int find_dpfp_device(void)$/;"	f	file:
find_endpoint	libusb/core.c	/^static const struct libusb_endpoint_descriptor *find_endpoint($/;"	f	file:
find_monotonic_clock	libusb/os/linux_usbfs.c	/^static clockid_t find_monotonic_clock(void)$/;"	f	file:
find_usbfs_path	libusb/os/linux_usbfs.c	/^static const char *find_usbfs_path(void)$/;"	f	file:
first_config	libusb/os/darwin_usb.h	/^  UInt8                 first_config, active_config, port;  $/;"	m	struct:darwin_cached_device
first_nonopt	examples/getopt/getopt.c	/^static int first_nonopt;$/;"	v	file:
flag	examples/getopt/getopt.h	/^  int *flag;$/;"	m	struct:option
flags	libusb/hotplug.h	/^	libusb_hotplug_flag flags;$/;"	m	struct:libusb_hotplug_callback
flags	libusb/libusb.h	/^	uint8_t flags;$/;"	m	struct:libusb_transfer
flags	libusb/libusbi.h	/^	uint8_t flags;$/;"	m	struct:usbi_transfer
flags	libusb/os/linux_usbfs.h	/^	unsigned int flags;$/;"	m	struct:usbfs_disconnect_claim
flags	libusb/os/linux_usbfs.h	/^	unsigned int flags;$/;"	m	struct:usbfs_urb
flying_transfers	libusb/libusbi.h	/^	struct list_head flying_transfers;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head
flying_transfers_lock	libusb/libusbi.h	/^	usbi_mutex_t flying_transfers_lock;$/;"	m	struct:libusb_context
force_hcd_device_descriptor	libusb/os/windows_usb.c	/^static int force_hcd_device_descriptor(struct libusb_device *dev)$/;"	f	file:
frames	libusb/os/darwin_usb.h	/^    uint64_t             frames[256];$/;"	m	struct:darwin_device_handle_priv::darwin_interface
free_iso_urbs	libusb/os/linux_usbfs.c	/^static void free_iso_urbs(struct linux_transfer_priv *tpriv)$/;"	f	file:
free_overlapped	libusb/os/poll_windows.c	/^static void free_overlapped(OVERLAPPED *overlapped)$/;"	f	file:
function	tests/libusbx_testlib.h	/^	libusbx_testlib_test_function function;$/;"	m	struct:__anon24
fx2_is_external	examples/ezusb.c	/^static bool fx2_is_external(uint32_t addr, size_t len)$/;"	f	file:
fx2lp_is_external	examples/ezusb.c	/^static bool fx2lp_is_external(uint32_t addr, size_t len)$/;"	f	file:
fx3_load_ram	examples/ezusb.c	/^static int fx3_load_ram(libusb_device_handle *device, const char *path)$/;"	f	file:
fx_is_external	examples/ezusb.c	/^static bool fx_is_external(uint32_t addr, size_t len)$/;"	f	file:
fx_known_device	examples/ezusb.h	/^} fx_known_device;$/;"	t	typeref:struct:__anon26
get_active_config_descriptor	libusb/libusbi.h	/^	int (*get_active_config_descriptor)(struct libusb_device *device,$/;"	m	struct:usbi_os_backend
get_ancestor_session_id	libusb/os/windows_usb.c	/^static unsigned long get_ancestor_session_id(DWORD devinst, unsigned level)$/;"	f	file:
get_api_type	libusb/os/windows_usb.c	/^static void get_api_type(struct libusb_context *ctx, HDEVINFO *dev_info,$/;"	f	file:
get_config_descriptor	libusb/libusbi.h	/^	int (*get_config_descriptor)(struct libusb_device *device,$/;"	m	struct:usbi_os_backend
get_config_descriptor_by_value	libusb/libusbi.h	/^	int (*get_config_descriptor_by_value)(struct libusb_device *device,$/;"	m	struct:usbi_os_backend
get_configuration	libusb/libusbi.h	/^	int (*get_configuration)(struct libusb_device_handle *handle, int *config);$/;"	m	struct:usbi_os_backend
get_configuration_index	libusb/os/darwin_usb.c	/^static int get_configuration_index (struct libusb_device *dev, int config_value) {$/;"	f	file:
get_device_descriptor	libusb/libusbi.h	/^	int (*get_device_descriptor)(struct libusb_device *device,$/;"	m	struct:usbi_os_backend
get_device_list	libusb/libusbi.h	/^	int (*get_device_list)(struct libusb_context *ctx,$/;"	m	struct:usbi_os_backend
get_devinfo_data	libusb/os/windows_usb.c	/^static bool get_devinfo_data(struct libusb_context *ctx,$/;"	f	file:
get_endpoints	libusb/os/darwin_usb.c	/^static int get_endpoints (struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:
get_hid_record_size	examples/xusb.c	/^static int get_hid_record_size(uint8_t *hid_report_descriptor, int size, int type)$/;"	f	file:
get_hwstat	examples/dpfp.c	/^static int get_hwstat(unsigned char *status)$/;"	f	file:
get_hwstat	examples/dpfp_threaded.c	/^static int get_hwstat(unsigned char *status)$/;"	f	file:
get_interface_details	libusb/os/windows_usb.c	/^static SP_DEVICE_INTERFACE_DETAIL_DATA_A *get_interface_details(struct libusb_context *ctx,$/;"	f	file:
get_interface_details_filter	libusb/os/windows_usb.c	/^static SP_DEVICE_INTERFACE_DETAIL_DATA_A *get_interface_details_filter(struct libusb_context *ctx,$/;"	f	file:
get_ioregistry_value_number	libusb/os/darwin_usb.c	/^static int get_ioregistry_value_number (io_service_t service, CFStringRef property, CFNumberType type, void *p) {$/;"	f	file:
get_mass_storage_status	examples/xusb.c	/^static int get_mass_storage_status(libusb_device_handle *handle, uint8_t endpoint, uint32_t expected_tag)$/;"	f	file:
get_next_timeout	libusb/io.c	/^static int get_next_timeout(libusb_context *ctx, struct timeval *tv,$/;"	f	file:
get_sense	examples/xusb.c	/^static void get_sense(libusb_device_handle *handle, uint8_t endpoint_in, uint8_t endpoint_out)$/;"	f	file:
get_sub_api	libusb/os/windows_usb.c	/^static int get_sub_api(char* driver, int api){$/;"	f	file:
get_timerfd_clockid	libusb/libusbi.h	/^	clockid_t (*get_timerfd_clockid)(void);$/;"	m	struct:usbi_os_backend
get_valid_interface	libusb/os/windows_usb.c	/^static int get_valid_interface(struct libusb_device_handle *dev_handle, int api_id)$/;"	f	file:
getenv	msvc/missing.c	/^char *getenv(const char *name)$/;"	f
getopt	examples/getopt/getopt.c	/^getopt (argc, argv, optstring)$/;"	f
getopt_long	examples/getopt/getopt1.c	/^getopt_long (argc, argv, options, long_options, opt_index)$/;"	f
getopt_long_only	examples/getopt/getopt1.c	/^getopt_long_only (argc, argv, options, long_options, opt_index)$/;"	f
guid_eq	libusb/os/windows_usb.c	/^static inline BOOLEAN guid_eq(const GUID *guid1, const GUID *guid2) {$/;"	f	file:
guid_to_string	libusb/os/windows_usb.c	/^static char* guid_to_string(const GUID* guid)$/;"	f	file:
handle	examples/hotplugtest.c	/^libusb_device_handle *handle;$/;"	v
handle	libusb/hotplug.h	/^	libusb_hotplug_callback_handle handle;$/;"	m	struct:libusb_hotplug_callback
handle	libusb/os/poll_windows.h	/^	HANDLE handle;					\/\/ what we need to attach overlapped to the I\/O op, so we can poll it$/;"	m	struct:winfd
handle_bulk_completion	libusb/os/linux_usbfs.c	/^static int handle_bulk_completion(struct usbi_transfer *itransfer,$/;"	f	file:
handle_control_completion	libusb/os/linux_usbfs.c	/^static int handle_control_completion(struct usbi_transfer *itransfer,$/;"	f	file:
handle_events	libusb/io.c	/^static int handle_events(struct libusb_context *ctx, struct timeval *tv)$/;"	f	file:
handle_events	libusb/libusbi.h	/^	int (*handle_events)(struct libusb_context *ctx,$/;"	m	struct:usbi_os_backend
handle_iso_completion	libusb/os/linux_usbfs.c	/^static int handle_iso_completion(struct usbi_transfer *itransfer,$/;"	f	file:
handle_priv	libusb/os/netbsd_usb.c	/^struct handle_priv {$/;"	s	file:
handle_priv	libusb/os/openbsd_usb.c	/^struct handle_priv {$/;"	s	file:
handle_timeout	libusb/io.c	/^static void handle_timeout(struct usbi_transfer *itransfer)$/;"	f	file:
handle_timeouts	libusb/io.c	/^static int handle_timeouts(struct libusb_context *ctx)$/;"	f	file:
handle_timeouts_locked	libusb/io.c	/^static int handle_timeouts_locked(struct libusb_context *ctx)$/;"	f	file:
handle_timerfd_trigger	libusb/io.c	/^static int handle_timerfd_trigger(struct libusb_context *ctx)$/;"	f	file:
handle_to_winfd	libusb/os/poll_windows.c	/^struct winfd handle_to_winfd(HANDLE handle)$/;"	f
has_arg	examples/getopt/getopt.h	/^  int has_arg;$/;"	m	struct:option
hid	libusb/os/windows_usb.h	/^	struct hid_device_priv *hid;$/;"	m	struct:windows_device_priv	typeref:struct:windows_device_priv::hid_device_priv
hid_abort_transfers	libusb/os/windows_usb.c	/^static int hid_abort_transfers(int sub_api, struct usbi_transfer *itransfer)$/;"	f	file:
hid_buffer	libusb/os/windows_usb.h	/^	uint8_t *hid_buffer; \/\/ 1 byte extended data buffer, required for HID$/;"	m	struct:windows_transfer_priv
hid_claim_interface	libusb/os/windows_usb.c	/^static int hid_claim_interface(int sub_api, struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
hid_clear_halt	libusb/os/windows_usb.c	/^static int hid_clear_halt(int sub_api, struct libusb_device_handle *dev_handle, unsigned char endpoint)$/;"	f	file:
hid_close	libusb/os/windows_usb.c	/^static void hid_close(int sub_api, struct libusb_device_handle *dev_handle)$/;"	f	file:
hid_copy_transfer_data	libusb/os/windows_usb.c	/^static int hid_copy_transfer_data(int sub_api, struct usbi_transfer *itransfer, uint32_t io_size) {$/;"	f	file:
hid_dest	libusb/os/windows_usb.h	/^	uint8_t *hid_dest;   \/\/ transfer buffer destination, required for HID$/;"	m	struct:windows_transfer_priv
hid_device_priv	libusb/os/windows_usb.h	/^struct hid_device_priv {$/;"	s
hid_driver_names	libusb/os/windows_usb.c	/^const char* hid_driver_names[] = {"HIDUSB", "MOUHID", "KBDHID"};$/;"	v
hid_exit	libusb/os/windows_usb.c	/^static int hid_exit(int sub_api)$/;"	f	file:
hid_expected_size	libusb/os/windows_usb.h	/^	size_t hid_expected_size;$/;"	m	struct:windows_transfer_priv
hid_init	libusb/os/windows_usb.c	/^static int hid_init(int sub_api, struct libusb_context *ctx)$/;"	f	file:
hid_open	libusb/os/windows_usb.c	/^static int hid_open(int sub_api, struct libusb_device_handle *dev_handle)$/;"	f	file:
hid_release_interface	libusb/os/windows_usb.c	/^static int hid_release_interface(int sub_api, struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
hid_reset_device	libusb/os/windows_usb.c	/^static int hid_reset_device(int sub_api, struct libusb_device_handle *dev_handle)$/;"	f	file:
hid_set_interface_altsetting	libusb/os/windows_usb.c	/^static int hid_set_interface_altsetting(int sub_api, struct libusb_device_handle *dev_handle, int iface, int altsetting)$/;"	f	file:
hid_submit_bulk_transfer	libusb/os/windows_usb.c	/^static int hid_submit_bulk_transfer(int sub_api, struct usbi_transfer *itransfer) {$/;"	f	file:
hid_submit_control_transfer	libusb/os/windows_usb.c	/^static int hid_submit_control_transfer(int sub_api, struct usbi_transfer *itransfer)$/;"	f	file:
hires_frequency	libusb/os/wince_usb.c	/^uint64_t hires_frequency, hires_ticks_to_ps;$/;"	v
hires_frequency	libusb/os/windows_usb.c	/^uint64_t hires_frequency, hires_ticks_to_ps;$/;"	v
hires_ticks_to_ps	libusb/os/wince_usb.c	/^uint64_t hires_frequency, hires_ticks_to_ps;$/;"	v
hires_ticks_to_ps	libusb/os/windows_usb.c	/^uint64_t hires_frequency, hires_ticks_to_ps;$/;"	v
hotplug_callback	examples/hotplugtest.c	/^static int LIBUSB_CALL hotplug_callback(libusb_context *ctx, libusb_device *dev, libusb_hotplug_event event, void *user_data)$/;"	f	file:
hotplug_callback_detach	examples/hotplugtest.c	/^static int LIBUSB_CALL hotplug_callback_detach(libusb_context *ctx, libusb_device *dev, libusb_hotplug_event event, void *user_data)$/;"	f	file:
hotplug_cbs	libusb/libusbi.h	/^	struct list_head hotplug_cbs;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head
hotplug_cbs_lock	libusb/libusbi.h	/^	usbi_mutex_t hotplug_cbs_lock;$/;"	m	struct:libusb_context
hotplug_pipe	libusb/libusbi.h	/^	int hotplug_pipe[2];$/;"	m	struct:libusb_context
hotplug_poll	libusb/libusbi.h	/^	void (*hotplug_poll)(void);$/;"	m	struct:usbi_os_backend
htab_create	libusb/os/windows_usb.c	/^static int htab_create(struct libusb_context *ctx, unsigned long nel)$/;"	f	file:
htab_destroy	libusb/os/windows_usb.c	/^static void htab_destroy(void)$/;"	f	file:
htab_entry	libusb/os/windows_usb.c	/^typedef struct htab_entry {$/;"	s	file:
htab_entry	libusb/os/windows_usb.c	/^} htab_entry;$/;"	t	typeref:struct:htab_entry	file:
htab_filled	libusb/os/windows_usb.c	/^unsigned long htab_size, htab_filled;$/;"	v
htab_hash	libusb/os/windows_usb.c	/^static unsigned long htab_hash(char* str)$/;"	f	file:
htab_size	libusb/os/windows_usb.c	/^unsigned long htab_size, htab_filled;$/;"	v
htab_table	libusb/os/windows_usb.c	/^htab_entry* htab_table = NULL;$/;"	v
htab_write_mutex	libusb/os/windows_usb.c	/^usbi_mutex_t htab_write_mutex = NULL;$/;"	v
hub_driver_names	libusb/os/windows_usb.c	/^const char* hub_driver_names[] = {"USBHUB", "USBHUB3", "NUSB3HUB", "RUSB3HUB", "FLXHCIH", "TIHUB3", "ETRONHUB3", "VIAHUB3", "ASMTHUB3", "IUSB3HUB"};$/;"	v
iConfiguration	libusb/libusb.h	/^	uint8_t  iConfiguration;$/;"	m	struct:libusb_config_descriptor
iConfiguration	libusb/os/windows_usb.h	/^  UCHAR  iConfiguration;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR
iInterface	libusb/libusb.h	/^	uint8_t  iInterface;$/;"	m	struct:libusb_interface_descriptor
iInterface	libusb/os/windows_usb.h	/^  UCHAR  iInterface;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR
iManufacturer	libusb/libusb.h	/^	uint8_t  iManufacturer;$/;"	m	struct:libusb_device_descriptor
iManufacturer	libusb/os/wince_usb.h	/^	UINT8 iManufacturer;$/;"	m	struct:__anon19
iProduct	libusb/libusb.h	/^	uint8_t  iProduct;$/;"	m	struct:libusb_device_descriptor
iProduct	libusb/os/wince_usb.h	/^	UINT8 iProduct;$/;"	m	struct:__anon19
iSerialNumber	libusb/libusb.h	/^	uint8_t  iSerialNumber;$/;"	m	struct:libusb_device_descriptor
iSerialNumber	libusb/os/wince_usb.h	/^	UINT8 iSerialNumber;$/;"	m	struct:__anon19
id	libusb/os/windows_usb.h	/^	const uint8_t id;$/;"	m	struct:windows_usb_api_backend
idProduct	libusb/libusb.h	/^	uint16_t idProduct;$/;"	m	struct:libusb_device_descriptor
idProduct	libusb/os/wince_usb.h	/^	UINT16 idProduct;$/;"	m	struct:__anon19
idVendor	libusb/libusb.h	/^	uint16_t idVendor;$/;"	m	struct:libusb_device_descriptor
idVendor	libusb/os/wince_usb.h	/^	UINT16 idVendor;$/;"	m	struct:__anon19
ifno	libusb/os/linux_usbfs.h	/^	int ifno;	\/* interface 0..N ; negative numbers reserved *\/$/;"	m	struct:usbfs_ioctl
imaxdiv_t	msvc/inttypes.h	/^	} imaxdiv_t;$/;"	t	typeref:struct:__anon21
img_idx	examples/dpfp.c	/^static int img_idx = 0;$/;"	v	file:
img_idx	examples/dpfp_threaded.c	/^static int img_idx = 0;$/;"	v	file:
img_transfer	examples/dpfp.c	/^static struct libusb_transfer *img_transfer = NULL;$/;"	v	typeref:struct:libusb_transfer	file:
img_transfer	examples/dpfp_threaded.c	/^static struct libusb_transfer *img_transfer = NULL;$/;"	v	typeref:struct:libusb_transfer	file:
imgbuf	examples/dpfp.c	/^static unsigned char imgbuf[0x1b340];$/;"	v	file:
imgbuf	examples/dpfp_threaded.c	/^static unsigned char imgbuf[0x1b340];$/;"	v	file:
index	libusb/os/windows_usb.h	/^  USHORT index;$/;"	m	struct:__anon11
init	libusb/libusbi.h	/^	int (*init)(struct libusb_context *ctx);$/;"	m	struct:usbi_os_backend
init	libusb/os/windows_usb.h	/^	int (*init)(int sub_api, struct libusb_context *ctx);$/;"	m	struct:windows_usb_api_backend
initCount	libusb/os/darwin_usb.c	/^static volatile int32_t initCount = 0;$/;"	v	file:
init_capture	examples/dpfp.c	/^static int init_capture(void)$/;"	f	file:
init_capture	examples/dpfp_threaded.c	/^static int init_capture(void)$/;"	f	file:
init_count	libusb/os/linux_usbfs.c	/^static volatile int init_count = 0;$/;"	v	file:
init_device	libusb/os/wince_usb.c	/^static int init_device(struct libusb_device *dev, UKW_DEVICE drv_dev,$/;"	f	file:
init_device	libusb/os/windows_usb.c	/^static int init_device(struct libusb_device* dev, struct libusb_device* parent_dev,$/;"	f	file:
init_dllimports	libusb/os/wince_usb.c	/^static int init_dllimports()$/;"	f	file:
init_dlls	libusb/os/windows_usb.c	/^static int init_dlls(void)$/;"	f	file:
init_polling	libusb/os/poll_windows.c	/^void init_polling(void)$/;"	f
initialize_device	libusb/os/linux_usbfs.c	/^static int initialize_device(struct libusb_device *dev, uint8_t busnum,$/;"	f	file:
initialized	libusb/os/windows_usb.h	/^	bool initialized;$/;"	m	struct:winusb_interface
inline	libusb/libusb.h	30;"	d
input_report_size	libusb/os/windows_usb.h	/^	uint16_t input_report_size;$/;"	m	struct:hid_device_priv
int16_t	msvc/stdint.h	/^typedef __int16  int16_t;$/;"	t
int32_t	msvc/stdint.h	/^typedef __int32  int32_t;$/;"	t
int64_t	msvc/stdint.h	/^typedef __int64  int64_t;$/;"	t
int8_t	msvc/stdint.h	/^typedef __int8 int8_t;$/;"	t
int_fast16_t	msvc/stdint.h	/^typedef __int16  int_fast16_t;$/;"	t
int_fast32_t	msvc/stdint.h	/^typedef __int32  int_fast32_t;$/;"	t
int_fast64_t	msvc/stdint.h	/^typedef __int64  int_fast64_t;$/;"	t
int_fast8_t	msvc/stdint.h	/^typedef __int8 int_fast8_t;$/;"	t
int_least16_t	msvc/stdint.h	/^typedef short  int_least16_t;$/;"	t
int_least32_t	msvc/stdint.h	/^typedef int  int_least32_t;$/;"	t
int_least64_t	msvc/stdint.h	/^typedef __int64  int_least64_t;$/;"	t
int_least8_t	msvc/stdint.h	/^typedef signed char int_least8_t;$/;"	t
interface	libusb/libusb.h	/^	const struct libusb_interface *interface;$/;"	m	struct:libusb_config_descriptor	typeref:struct:libusb_config_descriptor::libusb_interface
interface	libusb/libusb.h	72;"	d
interface	libusb/os/darwin_usb.h	/^    usb_interface_t    **interface;$/;"	m	struct:darwin_device_handle_priv::darwin_interface
interface	libusb/os/linux_usbfs.h	/^	unsigned int interface;$/;"	m	struct:usbfs_disconnect_claim
interface	libusb/os/linux_usbfs.h	/^	unsigned int interface;$/;"	m	struct:usbfs_getdriver
interface	libusb/os/linux_usbfs.h	/^	unsigned int interface;$/;"	m	struct:usbfs_setinterface
interface_by_endpoint	libusb/os/windows_usb.c	/^static int interface_by_endpoint(struct windows_device_priv *priv,$/;"	f	file:
interface_handle	libusb/os/windows_usb.h	/^	struct interface_handle_t interface_handle[USB_MAXINTERFACES];$/;"	m	struct:windows_device_handle_priv	typeref:struct:windows_device_handle_priv::interface_handle_t
interface_handle_t	libusb/os/windows_usb.h	/^struct interface_handle_t {$/;"	s
interface_number	libusb/os/wince_usb.h	/^	uint8_t interface_number;$/;"	m	struct:wince_transfer_priv
interface_number	libusb/os/windows_usb.h	/^	uint8_t interface_number;$/;"	m	struct:windows_transfer_priv
interfaces	libusb/os/darwin_usb.h	/^  } interfaces[USB_MAXINTERFACES];$/;"	m	struct:darwin_device_handle_priv	typeref:struct:darwin_device_handle_priv::darwin_interface
internal_only	examples/ezusb.c	/^	internal_only,		\/* hardware first-stage loader *\/$/;"	e	enum:__anon25	file:
intmax_t	msvc/stdint.h	/^typedef __int64  intmax_t;$/;"	t
intptr_t	msvc/stdint.h	/^  typedef __int64 intptr_t;$/;"	t
intptr_t	msvc/stdint.h	/^  typedef int intptr_t;$/;"	t
intptr_t	msvc/stdint.h	36;"	d
io_cf_plugin_ref_t	libusb/os/darwin_usb.h	/^typedef IOCFPlugInInterface *io_cf_plugin_ref_t;$/;"	t
io_notification_port_t	libusb/os/darwin_usb.h	/^typedef IONotificationPortRef io_notification_port_t;$/;"	t
ioctl_code	libusb/os/linux_usbfs.h	/^	int ioctl_code;	\/* MUST encode size + direction of data so the$/;"	m	struct:usbfs_ioctl
irq_transfer	examples/dpfp.c	/^static struct libusb_transfer *irq_transfer = NULL;$/;"	v	typeref:struct:libusb_transfer	file:
irq_transfer	examples/dpfp_threaded.c	/^static struct libusb_transfer *irq_transfer = NULL;$/;"	v	typeref:struct:libusb_transfer	file:
irqbuf	examples/dpfp.c	/^static unsigned char irqbuf[INTR_LENGTH];$/;"	v	file:
irqbuf	examples/dpfp_threaded.c	/^static unsigned char irqbuf[INTR_LENGTH];$/;"	v	file:
isDebug	msvc/ddk_build.cmd	/^:isDebug$/;"	l
isI386	msvc/ddk_build.cmd	/^:isI386$/;"	l
is_open	libusb/os/darwin_usb.h	/^  int                  is_open;$/;"	m	struct:darwin_device_handle_priv
is_polling_set	libusb/os/poll_windows.c	/^BOOLEAN is_polling_set = FALSE;$/;"	v
iso_frame_desc	libusb/os/linux_usbfs.h	/^	struct usbfs_iso_packet_desc iso_frame_desc[0];$/;"	m	struct:usbfs_urb	typeref:struct:usbfs_urb::usbfs_iso_packet_desc
iso_packet_desc	libusb/libusb.h	/^	struct libusb_iso_packet_descriptor iso_packet_desc$/;"	m	struct:libusb_transfer	typeref:struct:libusb_transfer::libusb_iso_packet_descriptor
iso_packet_offset	libusb/os/linux_usbfs.c	/^	int iso_packet_offset;$/;"	m	struct:linux_transfer_priv	file:
iso_urbs	libusb/os/linux_usbfs.c	/^		struct usbfs_urb **iso_urbs;$/;"	m	union:linux_transfer_priv::__anon18	typeref:struct:linux_transfer_priv::__anon18::usbfs_urb	file:
isoc_framelist	libusb/os/darwin_usb.h	/^  IOUSBIsocFrame *isoc_framelist;$/;"	m	struct:darwin_transfer_priv
isprime	libusb/os/windows_usb.c	/^static int isprime(unsigned long number)$/;"	f	file:
itransfer	libusb/os/darwin_usb.h	/^  struct usbi_transfer *itransfer;$/;"	m	struct:darwin_msg_async_io_complete	typeref:struct:darwin_msg_async_io_complete::usbi_transfer
itransfer	libusb/os/poll_windows.h	/^	struct usbi_transfer *itransfer;		\/\/ Associated transfer, or NULL if completed$/;"	m	struct:winfd	typeref:struct:winfd::usbi_transfer
kernel_driver_active	libusb/libusbi.h	/^	int (*kernel_driver_active)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend
kernel_version_ge	libusb/os/linux_usbfs.c	/^static int kernel_version_ge(int major, int minor, int sublevel)$/;"	f	file:
last_nonopt	examples/getopt/getopt.c	/^static int last_nonopt;$/;"	v	file:
len	libusb/libusbi.h	/^	size_t len;$/;"	m	struct:discovered_devs
len	libusb/os/linux_usbfs.h	/^	unsigned int len;$/;"	m	struct:usbfs_bulktransfer
length	libusb/libusb.h	/^	int length;$/;"	m	struct:libusb_transfer
length	libusb/libusb.h	/^	unsigned int length;$/;"	m	struct:libusb_iso_packet_descriptor
length	libusb/os/linux_usbfs.h	/^	unsigned int length;$/;"	m	struct:usbfs_iso_packet_desc
length	libusb/os/windows_usb.h	/^  USHORT length;$/;"	m	struct:__anon11
libusb_alloc_transfer	libusb/io.c	/^struct libusb_transfer * LIBUSB_CALL libusb_alloc_transfer($/;"	f
libusb_attach_kernel_driver	libusb/core.c	/^int API_EXPORTED libusb_attach_kernel_driver(libusb_device_handle *dev,$/;"	f
libusb_bos_descriptor	libusb/libusb.h	/^struct libusb_bos_descriptor {$/;"	s
libusb_bos_dev_capability_descriptor	libusb/libusb.h	/^struct libusb_bos_dev_capability_descriptor {$/;"	s
libusb_bos_type	libusb/libusb.h	/^enum libusb_bos_type {$/;"	g
libusb_bulk_transfer	libusb/sync.c	/^int API_EXPORTED libusb_bulk_transfer(struct libusb_device_handle *dev_handle,$/;"	f
libusb_cancel_transfer	libusb/io.c	/^int API_EXPORTED libusb_cancel_transfer(struct libusb_transfer *transfer)$/;"	f
libusb_capability	libusb/libusb.h	/^enum libusb_capability {$/;"	g
libusb_claim_interface	libusb/core.c	/^int API_EXPORTED libusb_claim_interface(libusb_device_handle *dev,$/;"	f
libusb_class_code	libusb/libusb.h	/^enum libusb_class_code {$/;"	g
libusb_clear_halt	libusb/core.c	/^int API_EXPORTED libusb_clear_halt(libusb_device_handle *dev,$/;"	f
libusb_close	libusb/core.c	/^void API_EXPORTED libusb_close(libusb_device_handle *dev_handle)$/;"	f
libusb_config_descriptor	libusb/libusb.h	/^struct libusb_config_descriptor {$/;"	s
libusb_container_id_descriptor	libusb/libusb.h	/^struct libusb_container_id_descriptor {$/;"	s
libusb_context	libusb/libusb.h	/^typedef struct libusb_context libusb_context;$/;"	t	typeref:struct:libusb_context
libusb_context	libusb/libusbi.h	/^struct libusb_context {$/;"	s
libusb_control_setup	libusb/libusb.h	/^struct libusb_control_setup {$/;"	s
libusb_control_transfer	libusb/sync.c	/^int API_EXPORTED libusb_control_transfer(libusb_device_handle *dev_handle,$/;"	f
libusb_control_transfer_get_data	libusb/libusb.h	/^static inline unsigned char *libusb_control_transfer_get_data($/;"	f
libusb_control_transfer_get_setup	libusb/libusb.h	/^static inline struct libusb_control_setup *libusb_control_transfer_get_setup($/;"	f
libusb_cpu_to_le16	libusb/libusb.h	/^static inline uint16_t libusb_cpu_to_le16(const uint16_t x)$/;"	f
libusb_darwin_acfl	libusb/os/darwin_usb.c	/^static CFRunLoopRef libusb_darwin_acfl = NULL; \/* event cf loop *\/$/;"	v	file:
libusb_darwin_at	libusb/os/darwin_usb.c	/^static pthread_t libusb_darwin_at;$/;"	v	file:
libusb_darwin_at_cond	libusb/os/darwin_usb.c	/^static pthread_cond_t  libusb_darwin_at_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
libusb_darwin_at_mutex	libusb/os/darwin_usb.c	/^static pthread_mutex_t libusb_darwin_at_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
libusb_descriptor_type	libusb/libusb.h	/^enum libusb_descriptor_type {$/;"	g
libusb_detach_kernel_driver	libusb/core.c	/^int API_EXPORTED libusb_detach_kernel_driver(libusb_device_handle *dev,$/;"	f
libusb_device	libusb/libusb.h	/^typedef struct libusb_device libusb_device;$/;"	t	typeref:struct:libusb_device
libusb_device	libusb/libusbi.h	/^struct libusb_device {$/;"	s
libusb_device_descriptor	libusb/libusb.h	/^struct libusb_device_descriptor {$/;"	s
libusb_device_handle	libusb/libusb.h	/^typedef struct libusb_device_handle libusb_device_handle;$/;"	t	typeref:struct:libusb_device_handle
libusb_device_handle	libusb/libusbi.h	/^struct libusb_device_handle {$/;"	s
libusb_endpoint_descriptor	libusb/libusb.h	/^struct libusb_endpoint_descriptor {$/;"	s
libusb_endpoint_direction	libusb/libusb.h	/^enum libusb_endpoint_direction {$/;"	g
libusb_error	libusb/libusb.h	/^enum libusb_error {$/;"	g
libusb_error_name	libusb/core.c	/^DEFAULT_VISIBILITY const char * LIBUSB_CALL libusb_error_name(int error_code)$/;"	f
libusb_event_handler_active	libusb/io.c	/^int API_EXPORTED libusb_event_handler_active(libusb_context *ctx)$/;"	f
libusb_event_handling_ok	libusb/io.c	/^int API_EXPORTED libusb_event_handling_ok(libusb_context *ctx)$/;"	f
libusb_exit	libusb/core.c	/^void API_EXPORTED libusb_exit(struct libusb_context *ctx)$/;"	f
libusb_fill_bulk_transfer	libusb/libusb.h	/^static inline void libusb_fill_bulk_transfer(struct libusb_transfer *transfer,$/;"	f
libusb_fill_control_setup	libusb/libusb.h	/^static inline void libusb_fill_control_setup(unsigned char *buffer,$/;"	f
libusb_fill_control_transfer	libusb/libusb.h	/^static inline void libusb_fill_control_transfer($/;"	f
libusb_fill_interrupt_transfer	libusb/libusb.h	/^static inline void libusb_fill_interrupt_transfer($/;"	f
libusb_fill_iso_transfer	libusb/libusb.h	/^static inline void libusb_fill_iso_transfer(struct libusb_transfer *transfer,$/;"	f
libusb_free_bos_descriptor	libusb/descriptor.c	/^void API_EXPORTED libusb_free_bos_descriptor(struct libusb_bos_descriptor *bos)$/;"	f
libusb_free_config_descriptor	libusb/descriptor.c	/^void API_EXPORTED libusb_free_config_descriptor($/;"	f
libusb_free_container_id_descriptor	libusb/descriptor.c	/^void API_EXPORTED libusb_free_container_id_descriptor($/;"	f
libusb_free_device_list	libusb/core.c	/^void API_EXPORTED libusb_free_device_list(libusb_device **list,$/;"	f
libusb_free_ss_endpoint_companion_descriptor	libusb/descriptor.c	/^void API_EXPORTED libusb_free_ss_endpoint_companion_descriptor($/;"	f
libusb_free_ss_usb_device_capability_descriptor	libusb/descriptor.c	/^void API_EXPORTED libusb_free_ss_usb_device_capability_descriptor($/;"	f
libusb_free_transfer	libusb/io.c	/^void API_EXPORTED libusb_free_transfer(struct libusb_transfer *transfer)$/;"	f
libusb_free_usb_2_0_extension_descriptor	libusb/descriptor.c	/^void API_EXPORTED libusb_free_usb_2_0_extension_descriptor($/;"	f
libusb_get_active_config_descriptor	libusb/descriptor.c	/^int API_EXPORTED libusb_get_active_config_descriptor(libusb_device *dev,$/;"	f
libusb_get_bos_descriptor	libusb/descriptor.c	/^int API_EXPORTED libusb_get_bos_descriptor(libusb_device_handle *handle,$/;"	f
libusb_get_bus_number	libusb/core.c	/^uint8_t API_EXPORTED libusb_get_bus_number(libusb_device *dev)$/;"	f
libusb_get_config_descriptor	libusb/descriptor.c	/^int API_EXPORTED libusb_get_config_descriptor(libusb_device *dev,$/;"	f
libusb_get_config_descriptor_by_value	libusb/descriptor.c	/^int API_EXPORTED libusb_get_config_descriptor_by_value(libusb_device *dev,$/;"	f
libusb_get_configuration	libusb/core.c	/^int API_EXPORTED libusb_get_configuration(libusb_device_handle *dev,$/;"	f
libusb_get_container_id_descriptor	libusb/descriptor.c	/^int API_EXPORTED libusb_get_container_id_descriptor(struct libusb_context *ctx,$/;"	f
libusb_get_descriptor	libusb/libusb.h	/^static inline int libusb_get_descriptor(libusb_device_handle *dev,$/;"	f
libusb_get_device	libusb/core.c	/^libusb_device * LIBUSB_CALL libusb_get_device(libusb_device_handle *dev_handle)$/;"	f
libusb_get_device_address	libusb/core.c	/^uint8_t API_EXPORTED libusb_get_device_address(libusb_device *dev)$/;"	f
libusb_get_device_descriptor	libusb/descriptor.c	/^int API_EXPORTED libusb_get_device_descriptor(libusb_device *dev,$/;"	f
libusb_get_device_list	libusb/core.c	/^ssize_t API_EXPORTED libusb_get_device_list(libusb_context *ctx,$/;"	f
libusb_get_device_speed	libusb/core.c	/^int API_EXPORTED libusb_get_device_speed(libusb_device *dev)$/;"	f
libusb_get_iso_packet_buffer	libusb/libusb.h	/^static inline unsigned char *libusb_get_iso_packet_buffer($/;"	f
libusb_get_iso_packet_buffer_simple	libusb/libusb.h	/^static inline unsigned char *libusb_get_iso_packet_buffer_simple($/;"	f
libusb_get_max_iso_packet_size	libusb/core.c	/^int API_EXPORTED libusb_get_max_iso_packet_size(libusb_device *dev,$/;"	f
libusb_get_max_packet_size	libusb/core.c	/^int API_EXPORTED libusb_get_max_packet_size(libusb_device *dev,$/;"	f
libusb_get_next_timeout	libusb/io.c	/^int API_EXPORTED libusb_get_next_timeout(libusb_context *ctx,$/;"	f
libusb_get_parent	libusb/core.c	/^libusb_device * LIBUSB_CALL libusb_get_parent(libusb_device *dev)$/;"	f
libusb_get_pollfds	libusb/io.c	/^const struct libusb_pollfd ** LIBUSB_CALL libusb_get_pollfds($/;"	f
libusb_get_port_number	libusb/core.c	/^uint8_t API_EXPORTED libusb_get_port_number(libusb_device *dev)$/;"	f
libusb_get_port_numbers	libusb/core.c	/^int API_EXPORTED libusb_get_port_numbers(libusb_device *dev,$/;"	f
libusb_get_port_path	libusb/core.c	/^int API_EXPORTED libusb_get_port_path(libusb_context *ctx, libusb_device *dev,$/;"	f
libusb_get_ss_endpoint_companion_descriptor	libusb/descriptor.c	/^int API_EXPORTED libusb_get_ss_endpoint_companion_descriptor($/;"	f
libusb_get_ss_usb_device_capability_descriptor	libusb/descriptor.c	/^int API_EXPORTED libusb_get_ss_usb_device_capability_descriptor($/;"	f
libusb_get_string_descriptor	libusb/libusb.h	/^static inline int libusb_get_string_descriptor(libusb_device_handle *dev,$/;"	f
libusb_get_string_descriptor_ascii	libusb/descriptor.c	/^int API_EXPORTED libusb_get_string_descriptor_ascii(libusb_device_handle *dev,$/;"	f
libusb_get_usb_2_0_extension_descriptor	libusb/descriptor.c	/^int API_EXPORTED libusb_get_usb_2_0_extension_descriptor($/;"	f
libusb_get_version	libusb/core.c	/^const struct libusb_version * LIBUSB_CALL libusb_get_version(void)$/;"	f
libusb_handle_events	libusb/io.c	/^int API_EXPORTED libusb_handle_events(libusb_context *ctx)$/;"	f
libusb_handle_events_completed	libusb/io.c	/^int API_EXPORTED libusb_handle_events_completed(libusb_context *ctx,$/;"	f
libusb_handle_events_locked	libusb/io.c	/^int API_EXPORTED libusb_handle_events_locked(libusb_context *ctx,$/;"	f
libusb_handle_events_timeout	libusb/io.c	/^int API_EXPORTED libusb_handle_events_timeout(libusb_context *ctx,$/;"	f
libusb_handle_events_timeout_completed	libusb/io.c	/^int API_EXPORTED libusb_handle_events_timeout_completed(libusb_context *ctx,$/;"	f
libusb_has_capability	libusb/core.c	/^int API_EXPORTED libusb_has_capability(uint32_t capability)$/;"	f
libusb_hid_descriptor	libusb/os/windows_usb.h	/^struct libusb_hid_descriptor {$/;"	s
libusb_hid_report_type	libusb/os/windows_usb.h	/^enum libusb_hid_report_type {$/;"	g
libusb_hid_request_type	libusb/os/windows_usb.h	/^enum libusb_hid_request_type {$/;"	g
libusb_hotplug_callback	libusb/hotplug.h	/^struct libusb_hotplug_callback {$/;"	s
libusb_hotplug_callback	libusb/hotplug.h	/^typedef struct libusb_hotplug_callback libusb_hotplug_callback;$/;"	t	typeref:struct:libusb_hotplug_callback
libusb_hotplug_callback_fn	libusb/libusb.h	/^typedef int (LIBUSB_CALL *libusb_hotplug_callback_fn)(libusb_context *ctx,$/;"	t
libusb_hotplug_callback_handle	libusb/libusb.h	/^typedef int libusb_hotplug_callback_handle;$/;"	t
libusb_hotplug_deregister_callback	libusb/hotplug.c	/^void API_EXPORTED libusb_hotplug_deregister_callback (struct libusb_context *ctx,$/;"	f
libusb_hotplug_event	libusb/libusb.h	/^} libusb_hotplug_event;$/;"	t	typeref:enum:__anon2
libusb_hotplug_flag	libusb/libusb.h	/^} libusb_hotplug_flag;$/;"	t	typeref:enum:__anon1
libusb_hotplug_message	libusb/hotplug.h	/^struct libusb_hotplug_message {$/;"	s
libusb_hotplug_message	libusb/hotplug.h	/^typedef struct libusb_hotplug_message libusb_hotplug_message;$/;"	t	typeref:struct:libusb_hotplug_message
libusb_hotplug_register_callback	libusb/hotplug.c	/^int API_EXPORTED libusb_hotplug_register_callback(libusb_context *ctx,$/;"	f
libusb_init	libusb/core.c	/^int API_EXPORTED libusb_init(libusb_context **context)$/;"	f
libusb_interface	libusb/libusb.h	/^struct libusb_interface {$/;"	s
libusb_interface_descriptor	libusb/libusb.h	/^struct libusb_interface_descriptor {$/;"	s
libusb_interrupt_transfer	libusb/sync.c	/^int API_EXPORTED libusb_interrupt_transfer($/;"	f
libusb_iso_packet_descriptor	libusb/libusb.h	/^struct libusb_iso_packet_descriptor {$/;"	s
libusb_iso_sync_type	libusb/libusb.h	/^enum libusb_iso_sync_type {$/;"	g
libusb_iso_usage_type	libusb/libusb.h	/^enum libusb_iso_usage_type {$/;"	g
libusb_kernel_driver_active	libusb/core.c	/^int API_EXPORTED libusb_kernel_driver_active(libusb_device_handle *dev,$/;"	f
libusb_le16_to_cpu	libusb/libusb.h	180;"	d
libusb_linux_event_thread	libusb/os/linux_netlink.c	/^static pthread_t libusb_linux_event_thread;$/;"	v	file:
libusb_lock_event_waiters	libusb/io.c	/^void API_EXPORTED libusb_lock_event_waiters(libusb_context *ctx)$/;"	f
libusb_lock_events	libusb/io.c	/^void API_EXPORTED libusb_lock_events(libusb_context *ctx)$/;"	f
libusb_log_level	libusb/libusb.h	/^enum libusb_log_level {$/;"	g
libusb_open	libusb/core.c	/^int API_EXPORTED libusb_open(libusb_device *dev,$/;"	f
libusb_open_device_with_vid_pid	libusb/core.c	/^libusb_device_handle * LIBUSB_CALL libusb_open_device_with_vid_pid($/;"	f
libusb_pollfd	libusb/libusb.h	/^struct libusb_pollfd {$/;"	s
libusb_pollfd_added_cb	libusb/libusb.h	/^typedef void (LIBUSB_CALL *libusb_pollfd_added_cb)(int fd, short events,$/;"	t
libusb_pollfd_removed_cb	libusb/libusb.h	/^typedef void (LIBUSB_CALL *libusb_pollfd_removed_cb)(int fd, void *user_data);$/;"	t
libusb_pollfds_handle_timeouts	libusb/io.c	/^int API_EXPORTED libusb_pollfds_handle_timeouts(libusb_context *ctx)$/;"	f
libusb_ref_device	libusb/core.c	/^libusb_device * LIBUSB_CALL libusb_ref_device(libusb_device *dev)$/;"	f
libusb_release_interface	libusb/core.c	/^int API_EXPORTED libusb_release_interface(libusb_device_handle *dev,$/;"	f
libusb_request_recipient	libusb/libusb.h	/^enum libusb_request_recipient {$/;"	g
libusb_request_type	libusb/libusb.h	/^enum libusb_request_type {$/;"	g
libusb_reset_device	libusb/core.c	/^int API_EXPORTED libusb_reset_device(libusb_device_handle *dev)$/;"	f
libusb_set_auto_detach_kernel_driver	libusb/core.c	/^int API_EXPORTED libusb_set_auto_detach_kernel_driver($/;"	f
libusb_set_configuration	libusb/core.c	/^int API_EXPORTED libusb_set_configuration(libusb_device_handle *dev,$/;"	f
libusb_set_debug	libusb/core.c	/^void API_EXPORTED libusb_set_debug(libusb_context *ctx, int level)$/;"	f
libusb_set_interface_alt_setting	libusb/core.c	/^int API_EXPORTED libusb_set_interface_alt_setting(libusb_device_handle *dev,$/;"	f
libusb_set_iso_packet_lengths	libusb/libusb.h	/^static inline void libusb_set_iso_packet_lengths($/;"	f
libusb_set_pollfd_notifiers	libusb/io.c	/^void API_EXPORTED libusb_set_pollfd_notifiers(libusb_context *ctx,$/;"	f
libusb_setlocale	libusb/strerror.c	/^int API_EXPORTED libusb_setlocale(const char *locale)$/;"	f
libusb_speed	libusb/libusb.h	/^enum libusb_speed {$/;"	g
libusb_ss_endpoint_companion_descriptor	libusb/libusb.h	/^struct libusb_ss_endpoint_companion_descriptor {$/;"	s
libusb_ss_usb_device_capability_attributes	libusb/libusb.h	/^enum libusb_ss_usb_device_capability_attributes {$/;"	g
libusb_ss_usb_device_capability_descriptor	libusb/libusb.h	/^struct libusb_ss_usb_device_capability_descriptor {$/;"	s
libusb_standard_request	libusb/libusb.h	/^enum libusb_standard_request {$/;"	g
libusb_strerror	libusb/strerror.c	/^DEFAULT_VISIBILITY const char* LIBUSB_CALL libusb_strerror(enum libusb_error errcode)$/;"	f
libusb_submit_transfer	libusb/io.c	/^int API_EXPORTED libusb_submit_transfer(struct libusb_transfer *transfer)$/;"	f
libusb_supported_speed	libusb/libusb.h	/^enum libusb_supported_speed {$/;"	g
libusb_transfer	libusb/libusb.h	/^struct libusb_transfer {$/;"	s
libusb_transfer_cb_fn	libusb/libusb.h	/^typedef void (LIBUSB_CALL *libusb_transfer_cb_fn)(struct libusb_transfer *transfer);$/;"	t
libusb_transfer_flags	libusb/libusb.h	/^enum libusb_transfer_flags {$/;"	g
libusb_transfer_status	libusb/libusb.h	/^enum libusb_transfer_status {$/;"	g
libusb_transfer_type	libusb/libusb.h	/^enum libusb_transfer_type {$/;"	g
libusb_try_lock_events	libusb/io.c	/^int API_EXPORTED libusb_try_lock_events(libusb_context *ctx)$/;"	f
libusb_unlock_event_waiters	libusb/io.c	/^void API_EXPORTED libusb_unlock_event_waiters(libusb_context *ctx)$/;"	f
libusb_unlock_events	libusb/io.c	/^void API_EXPORTED libusb_unlock_events(libusb_context *ctx)$/;"	f
libusb_unref_device	libusb/core.c	/^void API_EXPORTED libusb_unref_device(libusb_device *dev)$/;"	f
libusb_usb_2_0_extension_attributes	libusb/libusb.h	/^enum libusb_usb_2_0_extension_attributes {$/;"	g
libusb_usb_2_0_extension_descriptor	libusb/libusb.h	/^struct libusb_usb_2_0_extension_descriptor {$/;"	s
libusb_version	libusb/libusb.h	/^struct libusb_version {$/;"	s
libusb_version_internal	libusb/core.c	/^static const struct libusb_version libusb_version_internal =$/;"	v	typeref:struct:libusb_version	file:
libusb_wait_for_event	libusb/io.c	/^int API_EXPORTED libusb_wait_for_event(libusb_context *ctx, struct timeval *tv)$/;"	f
libusbx_testlib_ctx	tests/libusbx_testlib.h	/^} libusbx_testlib_ctx;$/;"	t	typeref:struct:__anon23
libusbx_testlib_logf	tests/testlib.c	/^void libusbx_testlib_logf(libusbx_testlib_ctx * ctx,$/;"	f
libusbx_testlib_result	tests/libusbx_testlib.h	/^} libusbx_testlib_result;$/;"	t	typeref:enum:__anon22
libusbx_testlib_run_tests	tests/testlib.c	/^int libusbx_testlib_run_tests(int argc,$/;"	f
libusbx_testlib_test	tests/libusbx_testlib.h	/^} libusbx_testlib_test;$/;"	t	typeref:struct:__anon24
libusbx_testlib_test_function	tests/libusbx_testlib.h	/^(*libusbx_testlib_test_function)(libusbx_testlib_ctx * ctx);$/;"	t
linux_default_scan_devices	libusb/os/linux_usbfs.c	/^static int linux_default_scan_devices (struct libusb_context *ctx)$/;"	f	file:
linux_device_disconnected	libusb/os/linux_usbfs.c	/^void linux_device_disconnected(uint8_t busnum, uint8_t devaddr, const char *sys_name)$/;"	f
linux_device_handle_priv	libusb/os/linux_usbfs.c	/^struct linux_device_handle_priv {$/;"	s	file:
linux_device_priv	libusb/os/linux_usbfs.c	/^struct linux_device_priv {$/;"	s	file:
linux_enumerate_device	libusb/os/linux_usbfs.c	/^int linux_enumerate_device(struct libusb_context *ctx,$/;"	f
linux_event_thread	libusb/os/linux_udev.c	/^static pthread_t linux_event_thread;$/;"	v	file:
linux_get_device_address	libusb/os/linux_usbfs.c	/^int linux_get_device_address (struct libusb_context *ctx, int detached,$/;"	f
linux_get_parent_info	libusb/os/linux_usbfs.c	/^static int linux_get_parent_info(struct libusb_device *dev, const char *sysfs_dir)$/;"	f	file:
linux_hotplug_enumerate	libusb/os/linux_usbfs.c	/^void linux_hotplug_enumerate(uint8_t busnum, uint8_t devaddr, const char *sys_name)$/;"	f
linux_hotplug_lock	libusb/os/linux_usbfs.c	/^usbi_mutex_static_t linux_hotplug_lock = USBI_MUTEX_INITIALIZER;$/;"	v
linux_hotplug_startstop_lock	libusb/os/linux_usbfs.c	/^usbi_mutex_static_t linux_hotplug_startstop_lock = USBI_MUTEX_INITIALIZER;$/;"	v
linux_netlink_event_thread_main	libusb/os/linux_netlink.c	/^static void *linux_netlink_event_thread_main(void *arg)$/;"	f	file:
linux_netlink_hotplug_poll	libusb/os/linux_netlink.c	/^void linux_netlink_hotplug_poll(void)$/;"	f
linux_netlink_parse	libusb/os/linux_netlink.c	/^static int linux_netlink_parse(char *buffer, size_t len, int *detached, const char **sys_name,$/;"	f	file:
linux_netlink_read_message	libusb/os/linux_netlink.c	/^static int linux_netlink_read_message(void)$/;"	f	file:
linux_netlink_socket	libusb/os/linux_netlink.c	/^static int linux_netlink_socket = -1;$/;"	v	file:
linux_netlink_start_event_monitor	libusb/os/linux_netlink.c	/^int linux_netlink_start_event_monitor(void)$/;"	f
linux_netlink_stop_event_monitor	libusb/os/linux_netlink.c	/^int linux_netlink_stop_event_monitor(void)$/;"	f
linux_scan_devices	libusb/os/linux_usbfs.c	/^static int linux_scan_devices(struct libusb_context *ctx)$/;"	f	file:
linux_start_event_monitor	libusb/os/linux_usbfs.c	/^static int linux_start_event_monitor(void)$/;"	f	file:
linux_stop_event_monitor	libusb/os/linux_usbfs.c	/^static int linux_stop_event_monitor(void)$/;"	f	file:
linux_transfer_priv	libusb/os/linux_usbfs.c	/^struct linux_transfer_priv {$/;"	s	file:
linux_udev_event_thread_main	libusb/os/linux_udev.c	/^static void *linux_udev_event_thread_main(void *arg)$/;"	f	file:
linux_udev_hotplug_poll	libusb/os/linux_udev.c	/^void linux_udev_hotplug_poll(void)$/;"	f
linux_udev_scan_devices	libusb/os/linux_udev.c	/^int linux_udev_scan_devices(struct libusb_context *ctx)$/;"	f
linux_udev_start_event_monitor	libusb/os/linux_udev.c	/^int linux_udev_start_event_monitor(void)$/;"	f
linux_udev_stop_event_monitor	libusb/os/linux_udev.c	/^int linux_udev_stop_event_monitor(void)$/;"	f
linux_usbfs_backend	libusb/os/linux_usbfs.c	/^const struct usbi_os_backend linux_usbfs_backend = {$/;"	v	typeref:struct:usbi_os_backend
list	libusb/hotplug.h	/^	struct list_head list;$/;"	m	struct:libusb_hotplug_callback	typeref:struct:libusb_hotplug_callback::list_head
list	libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head
list	libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:libusb_device	typeref:struct:libusb_device::list_head
list	libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:libusb_device_handle	typeref:struct:libusb_device_handle::list_head
list	libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:usbi_pollfd	typeref:struct:usbi_pollfd::list_head
list	libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:usbi_transfer	typeref:struct:usbi_transfer::list_head
list	libusb/os/darwin_usb.h	/^  struct list_head      list;$/;"	m	struct:darwin_cached_device	typeref:struct:darwin_cached_device::list_head
list	libusb/os/threads_windows.h	/^	struct list_head list;$/;"	m	struct:usbi_cond_perthread	typeref:struct:usbi_cond_perthread::list_head
list	libusb/os/windows_usb.h	/^	char list[MAX_KEY_LENGTH+1];\/\/ REG_MULTI_SZ list of services (driver) names$/;"	m	struct:driver_lookup
list_add	libusb/libusbi.h	/^static inline void list_add(struct list_head *entry, struct list_head *head)$/;"	f
list_add_tail	libusb/libusbi.h	/^static inline void list_add_tail(struct list_head *entry,$/;"	f
list_del	libusb/libusbi.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_empty	libusb/libusbi.h	102;"	d
list_entry	libusb/libusbi.h	82;"	d
list_for_each_entry	libusb/libusbi.h	91;"	d
list_for_each_entry_safe	libusb/libusbi.h	96;"	d
list_head	libusb/libusbi.h	/^struct list_head {$/;"	s
list_init	libusb/libusbi.h	/^static inline void list_init(struct list_head *entry)$/;"	f
list_tests	tests/libusbx_testlib.h	/^	bool list_tests;$/;"	m	struct:__anon23
location	libusb/os/darwin_usb.h	/^  UInt32                location;$/;"	m	struct:darwin_cached_device
lock	libusb/libusbi.h	/^	usbi_mutex_t lock;$/;"	m	struct:libusb_device
lock	libusb/libusbi.h	/^	usbi_mutex_t lock;$/;"	m	struct:libusb_device_handle
lock	libusb/libusbi.h	/^	usbi_mutex_t lock;$/;"	m	struct:usbi_transfer
logerror	examples/fxload.c	/^void logerror(const char *format, ...)$/;"	f
main	examples/dpfp.c	/^int main(void)$/;"	f
main	examples/dpfp_threaded.c	/^int main(void)$/;"	f
main	examples/fxload.c	/^int main(int argc, char*argv[])$/;"	f
main	examples/getopt/getopt.c	/^main (argc, argv)$/;"	f
main	examples/getopt/getopt1.c	/^main (argc, argv)$/;"	f
main	examples/hotplugtest.c	/^int main(int argc, char *argv[])$/;"	f
main	examples/listdevs.c	/^int main(void)$/;"	f
main	examples/sam3u_benchmark.c	/^int main(int argc, char **argv)$/;"	f
main	examples/xusb.c	/^int main(int argc, char** argv)$/;"	f
main	tests/stress.c	/^int main (int argc, char ** argv)$/;"	f
major	libusb/libusb.h	/^	const uint16_t major;$/;"	m	struct:libusb_version
md10	msvc/ddk_build.cmd	/^:md10$/;"	l
md11	msvc/ddk_build.cmd	/^:md11$/;"	l
md2	msvc/ddk_build.cmd	/^:md2$/;"	l
md3	msvc/ddk_build.cmd	/^:md3$/;"	l
md4	msvc/ddk_build.cmd	/^:md4$/;"	l
md5	msvc/ddk_build.cmd	/^:md5$/;"	l
md6	msvc/ddk_build.cmd	/^:md6$/;"	l
md7	msvc/ddk_build.cmd	/^:md7$/;"	l
md8	msvc/ddk_build.cmd	/^:md8$/;"	l
md9	msvc/ddk_build.cmd	/^:md9$/;"	l
measure	examples/sam3u_benchmark.c	/^static void measure(void)$/;"	f	file:
micro	libusb/libusb.h	/^	const uint16_t micro;$/;"	m	struct:libusb_version
minor	libusb/libusb.h	/^	const uint16_t minor;$/;"	m	struct:libusb_version
mode	examples/ezusb.c	/^	ram_mode mode;$/;"	m	struct:ram_poke_context	file:
monotonic_clkid	libusb/os/linux_usbfs.c	/^static clockid_t monotonic_clkid = -1;$/;"	v	file:
msleep	examples/xusb.c	30;"	d	file:
msleep	examples/xusb.c	33;"	d	file:
mutex	libusb/os/poll_windows.c	/^	CRITICAL_SECTION mutex; \/\/ lock for fds$/;"	m	struct:__anon17	file:
my_index	examples/getopt/getopt.c	/^my_index (str, chr)$/;"	f	file:
my_index	examples/getopt/getopt.c	199;"	d	file:
name	examples/getopt/getopt.h	/^  const char *name;$/;"	m	struct:option
name	libusb/libusbi.h	/^	const char *name;$/;"	m	struct:usbi_os_backend
name	tests/libusbx_testlib.h	/^	const char * name;$/;"	m	struct:__anon24
nano	libusb/libusb.h	/^	const uint16_t nano;$/;"	m	struct:libusb_version
nb_driver_names	libusb/os/windows_usb.h	/^	const uint8_t nb_driver_names;$/;"	m	struct:windows_usb_api_backend
nb_endpoints	libusb/os/windows_usb.h	/^		int8_t nb_endpoints;			\/\/ and a set of endpoint addresses (USB_MAXENDPOINTS)$/;"	m	struct:windows_device_priv::__anon4
nb_interfaces	libusb/os/windows_usb.h	/^	uint8_t nb_interfaces;$/;"	m	struct:hid_device_priv
needs_free	libusb/hotplug.h	/^	int needs_free;$/;"	m	struct:libusb_hotplug_callback
netbsd_backend	libusb/os/netbsd_usb.c	/^const struct usbi_os_backend netbsd_backend = {$/;"	v	typeref:struct:usbi_os_backend
netbsd_cancel_transfer	libusb/os/netbsd_usb.c	/^netbsd_cancel_transfer(struct usbi_transfer *itransfer)$/;"	f
netbsd_claim_interface	libusb/os/netbsd_usb.c	/^netbsd_claim_interface(struct libusb_device_handle *handle, int iface)$/;"	f
netbsd_clear_halt	libusb/os/netbsd_usb.c	/^netbsd_clear_halt(struct libusb_device_handle *handle, unsigned char endpoint)$/;"	f
netbsd_clear_transfer_priv	libusb/os/netbsd_usb.c	/^netbsd_clear_transfer_priv(struct usbi_transfer *itransfer)$/;"	f
netbsd_clock_gettime	libusb/os/netbsd_usb.c	/^netbsd_clock_gettime(int clkid, struct timespec *tp)$/;"	f
netbsd_close	libusb/os/netbsd_usb.c	/^netbsd_close(struct libusb_device_handle *handle)$/;"	f
netbsd_destroy_device	libusb/os/netbsd_usb.c	/^netbsd_destroy_device(struct libusb_device *dev)$/;"	f
netbsd_get_active_config_descriptor	libusb/os/netbsd_usb.c	/^netbsd_get_active_config_descriptor(struct libusb_device *dev,$/;"	f
netbsd_get_config_descriptor	libusb/os/netbsd_usb.c	/^netbsd_get_config_descriptor(struct libusb_device *dev, uint8_t idx,$/;"	f
netbsd_get_configuration	libusb/os/netbsd_usb.c	/^netbsd_get_configuration(struct libusb_device_handle *handle, int *config)$/;"	f
netbsd_get_device_descriptor	libusb/os/netbsd_usb.c	/^netbsd_get_device_descriptor(struct libusb_device *dev, unsigned char *buf,$/;"	f
netbsd_get_device_list	libusb/os/netbsd_usb.c	/^netbsd_get_device_list(struct libusb_context * ctx,$/;"	f
netbsd_handle_events	libusb/os/netbsd_usb.c	/^netbsd_handle_events(struct libusb_context *ctx, struct pollfd *fds, nfds_t nfds,$/;"	f
netbsd_open	libusb/os/netbsd_usb.c	/^netbsd_open(struct libusb_device_handle *handle)$/;"	f
netbsd_release_interface	libusb/os/netbsd_usb.c	/^netbsd_release_interface(struct libusb_device_handle *handle, int iface)$/;"	f
netbsd_reset_device	libusb/os/netbsd_usb.c	/^netbsd_reset_device(struct libusb_device_handle *handle)$/;"	f
netbsd_set_configuration	libusb/os/netbsd_usb.c	/^netbsd_set_configuration(struct libusb_device_handle *handle, int config)$/;"	f
netbsd_set_interface_altsetting	libusb/os/netbsd_usb.c	/^netbsd_set_interface_altsetting(struct libusb_device_handle *handle, int iface,$/;"	f
netbsd_submit_transfer	libusb/os/netbsd_usb.c	/^netbsd_submit_transfer(struct usbi_transfer *itransfer)$/;"	f
netlink_control_pipe	libusb/os/linux_netlink.c	/^static int netlink_control_pipe[2] = { -1, -1 };$/;"	v	file:
netlink_message_parse	libusb/os/linux_netlink.c	/^static const char *netlink_message_parse (const char *buffer, size_t len, const char *key)$/;"	f	file:
next	libusb/libusbi.h	/^	struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::
next_state	examples/dpfp.c	/^static int next_state(void)$/;"	f	file:
next_state	examples/dpfp_threaded.c	/^static int next_state(void)$/;"	f	file:
nextchar	examples/getopt/getopt.c	/^static char *nextchar;$/;"	v	file:
no_argument	examples/getopt/getopt.h	110;"	d
no_more_args	msvc/ddk_build.cmd	/^:no_more_args$/;"	l
node	libusb/os/windows_usb.h	/^		USB_NODE_CONNECTION_NAME_FIXED node;$/;"	m	union:USB_HUB_NAME_FIXED::__anon8
nonoption_flags_len	examples/getopt/getopt.c	/^static int nonoption_flags_len;$/;"	v	file:
nonoption_flags_max_len	examples/getopt/getopt.c	/^static int nonoption_flags_max_len;$/;"	v	file:
not_waiting	libusb/os/threads_windows.h	/^	struct list_head not_waiting;$/;"	m	struct:usbi_cond_t_	typeref:struct:usbi_cond_t_::list_head
null_fd	tests/libusbx_testlib.h	/^	int null_fd;$/;"	m	struct:__anon23
num_altsetting	libusb/libusb.h	/^	int num_altsetting;$/;"	m	struct:libusb_interface
num_bytes	examples/sam3u_benchmark.c	/^static unsigned long num_bytes = 0, num_xfer = 0;$/;"	v	file:
num_configurations	libusb/libusbi.h	/^	uint8_t num_configurations;$/;"	m	struct:libusb_device
num_endpoints	libusb/os/darwin_usb.h	/^    uint8_t              num_endpoints;$/;"	m	struct:darwin_device_handle_priv::darwin_interface
num_iso_packets	libusb/libusb.h	/^	int num_iso_packets;$/;"	m	struct:libusb_transfer
num_iso_packets	libusb/libusbi.h	/^	int num_iso_packets;$/;"	m	struct:usbi_transfer
num_iso_packets	libusb/os/darwin_usb.h	/^  int num_iso_packets;$/;"	m	struct:darwin_transfer_priv
num_retired	libusb/os/linux_usbfs.c	/^	int num_retired;$/;"	m	struct:linux_transfer_priv	file:
num_urbs	libusb/os/linux_usbfs.c	/^	int num_urbs;$/;"	m	struct:linux_transfer_priv	file:
num_xfer	examples/sam3u_benchmark.c	/^static unsigned long num_bytes = 0, num_xfer = 0;$/;"	v	file:
number_of_packets	libusb/os/linux_usbfs.h	/^	int number_of_packets;$/;"	m	struct:usbfs_urb
numports	libusb/os/linux_usbfs.h	/^	unsigned char numports;$/;"	m	struct:usbfs_hub_portinfo
obsd_cancel_transfer	libusb/os/openbsd_usb.c	/^obsd_cancel_transfer(struct usbi_transfer *itransfer)$/;"	f
obsd_claim_interface	libusb/os/openbsd_usb.c	/^obsd_claim_interface(struct libusb_device_handle *handle, int iface)$/;"	f
obsd_clear_halt	libusb/os/openbsd_usb.c	/^obsd_clear_halt(struct libusb_device_handle *handle, unsigned char endpoint)$/;"	f
obsd_clear_transfer_priv	libusb/os/openbsd_usb.c	/^obsd_clear_transfer_priv(struct usbi_transfer *itransfer)$/;"	f
obsd_clock_gettime	libusb/os/openbsd_usb.c	/^obsd_clock_gettime(int clkid, struct timespec *tp)$/;"	f
obsd_close	libusb/os/openbsd_usb.c	/^obsd_close(struct libusb_device_handle *handle)$/;"	f
obsd_destroy_device	libusb/os/openbsd_usb.c	/^obsd_destroy_device(struct libusb_device *dev)$/;"	f
obsd_get_active_config_descriptor	libusb/os/openbsd_usb.c	/^obsd_get_active_config_descriptor(struct libusb_device *dev,$/;"	f
obsd_get_config_descriptor	libusb/os/openbsd_usb.c	/^obsd_get_config_descriptor(struct libusb_device *dev, uint8_t idx,$/;"	f
obsd_get_configuration	libusb/os/openbsd_usb.c	/^obsd_get_configuration(struct libusb_device_handle *handle, int *config)$/;"	f
obsd_get_device_descriptor	libusb/os/openbsd_usb.c	/^obsd_get_device_descriptor(struct libusb_device *dev, unsigned char *buf,$/;"	f
obsd_get_device_list	libusb/os/openbsd_usb.c	/^obsd_get_device_list(struct libusb_context * ctx,$/;"	f
obsd_handle_events	libusb/os/openbsd_usb.c	/^obsd_handle_events(struct libusb_context *ctx, struct pollfd *fds, nfds_t nfds,$/;"	f
obsd_open	libusb/os/openbsd_usb.c	/^obsd_open(struct libusb_device_handle *handle)$/;"	f
obsd_release_interface	libusb/os/openbsd_usb.c	/^obsd_release_interface(struct libusb_device_handle *handle, int iface)$/;"	f
obsd_reset_device	libusb/os/openbsd_usb.c	/^obsd_reset_device(struct libusb_device_handle *handle)$/;"	f
obsd_set_configuration	libusb/os/openbsd_usb.c	/^obsd_set_configuration(struct libusb_device_handle *handle, int config)$/;"	f
obsd_set_interface_altsetting	libusb/os/openbsd_usb.c	/^obsd_set_interface_altsetting(struct libusb_device_handle *handle, int iface,$/;"	f
obsd_submit_transfer	libusb/os/openbsd_usb.c	/^obsd_submit_transfer(struct usbi_transfer *itransfer)$/;"	f
old_stderr	tests/libusbx_testlib.h	/^	int old_stderr;$/;"	m	struct:__anon23
old_stdout	tests/libusbx_testlib.h	/^	int old_stdout;$/;"	m	struct:__anon23
op_attach_kernel_driver	libusb/os/linux_usbfs.c	/^static int op_attach_kernel_driver(struct libusb_device_handle *handle,$/;"	f	file:
op_cancel_transfer	libusb/os/linux_usbfs.c	/^static int op_cancel_transfer(struct usbi_transfer *itransfer)$/;"	f	file:
op_claim_interface	libusb/os/linux_usbfs.c	/^static int op_claim_interface(struct libusb_device_handle *handle, int iface)$/;"	f	file:
op_clear_halt	libusb/os/linux_usbfs.c	/^static int op_clear_halt(struct libusb_device_handle *handle,$/;"	f	file:
op_clear_transfer_priv	libusb/os/linux_usbfs.c	/^static void op_clear_transfer_priv(struct usbi_transfer *itransfer)$/;"	f	file:
op_clock_gettime	libusb/os/linux_usbfs.c	/^static int op_clock_gettime(int clk_id, struct timespec *tp)$/;"	f	file:
op_close	libusb/os/linux_usbfs.c	/^static void op_close(struct libusb_device_handle *dev_handle)$/;"	f	file:
op_destroy_device	libusb/os/linux_usbfs.c	/^static void op_destroy_device(struct libusb_device *dev)$/;"	f	file:
op_detach_kernel_driver	libusb/os/linux_usbfs.c	/^static int op_detach_kernel_driver(struct libusb_device_handle *handle,$/;"	f	file:
op_exit	libusb/os/linux_usbfs.c	/^static void op_exit(void)$/;"	f	file:
op_get_active_config_descriptor	libusb/os/linux_usbfs.c	/^static int op_get_active_config_descriptor(struct libusb_device *dev,$/;"	f	file:
op_get_config_descriptor	libusb/os/linux_usbfs.c	/^static int op_get_config_descriptor(struct libusb_device *dev,$/;"	f	file:
op_get_config_descriptor_by_value	libusb/os/linux_usbfs.c	/^static int op_get_config_descriptor_by_value(struct libusb_device *dev,$/;"	f	file:
op_get_configuration	libusb/os/linux_usbfs.c	/^static int op_get_configuration(struct libusb_device_handle *handle,$/;"	f	file:
op_get_device_descriptor	libusb/os/linux_usbfs.c	/^static int op_get_device_descriptor(struct libusb_device *dev,$/;"	f	file:
op_get_timerfd_clockid	libusb/os/linux_usbfs.c	/^static clockid_t op_get_timerfd_clockid(void)$/;"	f	file:
op_handle_events	libusb/os/darwin_usb.c	/^static int op_handle_events(struct libusb_context *ctx, struct pollfd *fds, POLL_NFDS_TYPE nfds, int num_ready) {$/;"	f	file:
op_handle_events	libusb/os/linux_usbfs.c	/^static int op_handle_events(struct libusb_context *ctx,$/;"	f	file:
op_hotplug_poll	libusb/os/linux_usbfs.c	/^static void op_hotplug_poll(void)$/;"	f	file:
op_init	libusb/os/linux_usbfs.c	/^static int op_init(struct libusb_context *ctx)$/;"	f	file:
op_kernel_driver_active	libusb/os/linux_usbfs.c	/^static int op_kernel_driver_active(struct libusb_device_handle *handle,$/;"	f	file:
op_open	libusb/os/linux_usbfs.c	/^static int op_open(struct libusb_device_handle *handle)$/;"	f	file:
op_release_interface	libusb/os/linux_usbfs.c	/^static int op_release_interface(struct libusb_device_handle *handle, int iface)$/;"	f	file:
op_reset_device	libusb/os/linux_usbfs.c	/^static int op_reset_device(struct libusb_device_handle *handle)$/;"	f	file:
op_set_configuration	libusb/os/linux_usbfs.c	/^static int op_set_configuration(struct libusb_device_handle *handle, int config)$/;"	f	file:
op_set_interface	libusb/os/linux_usbfs.c	/^static int op_set_interface(struct libusb_device_handle *handle, int iface,$/;"	f	file:
op_submit_transfer	libusb/os/linux_usbfs.c	/^static int op_submit_transfer(struct usbi_transfer *itransfer)$/;"	f	file:
open	libusb/libusbi.h	/^	int (*open)(struct libusb_device_handle *handle);$/;"	m	struct:usbi_os_backend
open	libusb/os/windows_usb.h	/^	int (*open)(int sub_api, struct libusb_device_handle *dev_handle);$/;"	m	struct:windows_usb_api_backend
open	tests/testlib.c	40;"	d	file:
open_count	libusb/os/darwin_usb.h	/^  int                   open_count;$/;"	m	struct:darwin_cached_device
open_devs	libusb/libusbi.h	/^	struct list_head open_devs;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head
open_devs_lock	libusb/libusbi.h	/^	usbi_mutex_t open_devs_lock;$/;"	m	struct:libusb_context
openbsd_backend	libusb/os/openbsd_usb.c	/^const struct usbi_os_backend openbsd_backend = {$/;"	v	typeref:struct:usbi_os_backend
optarg	examples/getopt/getopt.c	/^char *optarg;$/;"	v
opterr	examples/getopt/getopt.c	/^int opterr = 1;$/;"	v
optind	examples/getopt/getopt.c	/^int optind = 1;$/;"	v
option	examples/getopt/getopt.h	/^struct option$/;"	s
optional_argument	examples/getopt/getopt.h	112;"	d
optopt	examples/getopt/getopt.c	/^int optopt = '?';$/;"	v
ordering	examples/getopt/getopt.c	/^} ordering;$/;"	v	typeref:enum:__anon31	file:
original_handle	libusb/os/poll_windows.c	/^	HANDLE original_handle;$/;"	m	struct:__anon17	file:
os_priv	libusb/libusbi.h	/^	unsigned char os_priv$/;"	m	struct:libusb_device
os_priv	libusb/libusbi.h	/^	unsigned char os_priv$/;"	m	struct:libusb_device_handle
output_file	tests/libusbx_testlib.h	/^	FILE* output_file;$/;"	m	struct:__anon23
output_report_size	libusb/os/windows_usb.h	/^	uint16_t output_report_size;$/;"	m	struct:hid_device_priv
overlapped	libusb/os/poll_windows.h	/^	OVERLAPPED* overlapped;			\/\/ what will report our I\/O status$/;"	m	struct:winfd
overlapped_to_winfd	libusb/os/poll_windows.c	/^struct winfd overlapped_to_winfd(OVERLAPPED* overlapped)$/;"	f
pCancelIoEx	libusb/os/poll_windows.c	/^static BOOL (__stdcall *pCancelIoEx)(HANDLE, LPOVERLAPPED) = NULL;$/;"	v	file:
parent_dev	libusb/libusbi.h	/^	struct libusb_device* parent_dev;$/;"	m	struct:libusb_device	typeref:struct:libusb_device::libusb_device
parent_dev	libusb/os/windows_usb.h	/^	struct libusb_device *parent_dev;	\/\/ access to parent is required for usermode ops$/;"	m	struct:windows_device_priv	typeref:struct:windows_device_priv::libusb_device
parent_session	libusb/os/darwin_usb.h	/^  UInt64                parent_session;$/;"	m	struct:darwin_cached_device
parse	examples/ezusb.c	/^static int (*parse[IMG_TYPE_MAX])(FILE *image, void *context, bool (*is_external)(uint32_t addr, size_t len),$/;"	v	file:
parse_bin	examples/ezusb.c	/^static int parse_bin(FILE *image, void *context,$/;"	f	file:
parse_bos	libusb/descriptor.c	/^static int parse_bos(struct libusb_context *ctx,$/;"	f	file:
parse_configuration	libusb/descriptor.c	/^static int parse_configuration(struct libusb_context *ctx,$/;"	f	file:
parse_endpoint	libusb/descriptor.c	/^static int parse_endpoint(struct libusb_context *ctx,$/;"	f	file:
parse_ihex	examples/ezusb.c	/^static int parse_ihex(FILE *image, void *context,$/;"	f	file:
parse_iic	examples/ezusb.c	/^static int parse_iic(FILE *image, void *context,$/;"	f	file:
parse_interface	libusb/descriptor.c	/^static int parse_interface(libusb_context *ctx,$/;"	f	file:
path	libusb/os/windows_usb.h	/^		char *path;						\/\/ each interface needs a device interface path,$/;"	m	struct:windows_device_priv::__anon4
path	libusb/os/windows_usb.h	/^	char *path;							\/\/ device interface path$/;"	m	struct:windows_device_priv
perr	examples/xusb.c	/^static int perr(char const *format, ...)$/;"	f	file:
pid	examples/ezusb.h	/^	uint16_t pid;$/;"	m	struct:__anon26
pid	libusb/os/windows_usb.h	/^	uint16_t pid;$/;"	m	struct:hid_device_priv
pipe	libusb/os/netbsd_usb.c	/^	int pipe[2];				\/* for event notification *\/$/;"	m	struct:handle_priv	file:
pipe	libusb/os/openbsd_usb.c	/^	int pipe[2];				\/* for event notification *\/$/;"	m	struct:handle_priv	file:
pipe_number	libusb/os/poll_windows.c	/^LONG pipe_number = 0;$/;"	v
poll_dbg	libusb/os/poll_windows.c	52;"	d	file:
poll_dbg	libusb/os/poll_windows.c	57;"	d	file:
poll_dbg	libusb/os/poll_windows.c	59;"	d	file:
poll_fd	libusb/os/poll_windows.c	/^struct winfd poll_fd[MAX_FDS];$/;"	v	typeref:struct:winfd
poll_thread	examples/dpfp_threaded.c	/^static pthread_t poll_thread;$/;"	v	file:
poll_thread_main	examples/dpfp_threaded.c	/^static void *poll_thread_main(void *arg)$/;"	f	file:
pollable_fd	libusb/os/wince_usb.h	/^	struct winfd pollable_fd;$/;"	m	struct:wince_transfer_priv	typeref:struct:wince_transfer_priv::winfd
pollable_fd	libusb/os/windows_usb.h	/^	struct winfd pollable_fd;$/;"	m	struct:windows_transfer_priv	typeref:struct:windows_transfer_priv::winfd
pollfd	libusb/libusbi.h	/^	struct libusb_pollfd pollfd;$/;"	m	struct:usbi_pollfd	typeref:struct:usbi_pollfd::libusb_pollfd
pollfd	libusb/os/poll_windows.h	/^struct pollfd {$/;"	s
pollfd_modify	libusb/libusbi.h	/^	unsigned int pollfd_modify;$/;"	m	struct:libusb_context
pollfd_modify_lock	libusb/libusbi.h	/^	usbi_mutex_t pollfd_modify_lock;$/;"	m	struct:libusb_context
pollfds	libusb/libusbi.h	/^	struct list_head pollfds;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head
pollfds_lock	libusb/libusbi.h	/^	usbi_mutex_t pollfds_lock;$/;"	m	struct:libusb_context
port	libusb/os/darwin_usb.h	/^  UInt8                 first_config, active_config, port;  $/;"	m	struct:darwin_cached_device
port	libusb/os/linux_usbfs.h	/^	unsigned char port[127];	\/* port to device num mapping *\/$/;"	m	struct:usbfs_hub_portinfo
port	libusb/os/windows_usb.h	/^	uint8_t port;						\/\/ port number on the hub$/;"	m	struct:windows_device_priv
port_number	libusb/libusbi.h	/^	uint8_t port_number;$/;"	m	struct:libusb_device
posixly_correct	examples/getopt/getopt.c	/^static char *posixly_correct;$/;"	v	file:
prev	libusb/libusbi.h	/^	struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
print_device_cap	examples/xusb.c	/^static void print_device_cap(struct libusb_bos_dev_capability_descriptor *dev_cap)$/;"	f	file:
print_devs	examples/listdevs.c	/^static void print_devs(libusb_device **devs)$/;"	f	file:
print_f0_data	examples/dpfp.c	/^static int print_f0_data(void)$/;"	f	file:
print_f0_data	examples/dpfp_threaded.c	/^static int print_f0_data(void)$/;"	f	file:
print_usage	examples/fxload.c	/^static int print_usage(int error_code) {$/;"	f	file:
print_usage	tests/testlib.c	/^static void print_usage(int argc, char ** argv)$/;"	f	file:
process_new_device	libusb/os/darwin_usb.c	/^static int process_new_device (struct libusb_context *ctx, io_service_t service) {$/;"	f	file:
product_id	libusb/hotplug.h	/^	int product_id;$/;"	m	struct:libusb_hotplug_callback
ptrdiff_t	msvc/stdint.h	/^  typedef __int64 ptrdiff_t;$/;"	t
ptrdiff_t	msvc/stdint.h	/^  typedef int ptrdiff_t;$/;"	t
ptrdiff_t	msvc/stdint.h	62;"	d
quot	msvc/inttypes.h	/^	intmax_t quot;$/;"	m	struct:__anon21
ram_mode	examples/ezusb.c	/^} ram_mode;$/;"	t	typeref:enum:__anon25	file:
ram_poke	examples/ezusb.c	/^static int ram_poke(void *context, uint32_t addr, bool external,$/;"	f	file:
ram_poke_context	examples/ezusb.c	/^struct ram_poke_context {$/;"	s	file:
raw_desc_to_config	libusb/descriptor.c	/^static int raw_desc_to_config(struct libusb_context *ctx,$/;"	f	file:
rc	libusb/libusb.h	/^	const char *rc;$/;"	m	struct:libusb_version
read_ms_winsub_feature_descriptors	examples/xusb.c	/^static void read_ms_winsub_feature_descriptors(libusb_device_handle *handle, uint8_t bRequest, int iface_number)$/;"	f	file:
reap_action	libusb/os/linux_usbfs.c	/^	enum reap_action reap_action;$/;"	m	struct:linux_transfer_priv	typeref:enum:linux_transfer_priv::reap_action	file:
reap_action	libusb/os/linux_usbfs.c	/^enum reap_action {$/;"	g	file:
reap_for_handle	libusb/os/linux_usbfs.c	/^static int reap_for_handle(struct libusb_device_handle *handle)$/;"	f	file:
reap_status	libusb/os/linux_usbfs.c	/^	enum libusb_transfer_status reap_status;$/;"	m	struct:linux_transfer_priv	typeref:enum:linux_transfer_priv::libusb_transfer_status	file:
refcnt	libusb/libusbi.h	/^	int refcnt;$/;"	m	struct:libusb_device
refcount	libusb/os/darwin_usb.h	/^  int                   refcount;$/;"	m	struct:darwin_cached_device
reg_prop	libusb/os/windows_usb.h	/^	const DWORD reg_prop;		\/\/ SPDRP registry key to use to retreive list$/;"	m	struct:driver_lookup
release_interface	libusb/libusbi.h	/^	int (*release_interface)(struct libusb_device_handle *handle, int interface_number);$/;"	m	struct:usbi_os_backend
release_interface	libusb/os/linux_usbfs.c	/^static int release_interface(struct libusb_device_handle *handle, int iface)$/;"	f	file:
release_interface	libusb/os/windows_usb.h	/^	int (*release_interface)(int sub_api, struct libusb_device_handle *dev_handle, int iface);$/;"	m	struct:windows_usb_api_backend
rem	msvc/inttypes.h	/^	intmax_t rem;$/;"	m	struct:__anon21
req	libusb/os/darwin_usb.h	/^  IOUSBDevRequestTO req;$/;"	m	struct:darwin_transfer_priv
req	libusb/os/windows_usb.h	/^	} req;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT	typeref:struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon5
request	libusb/os/windows_usb.h	/^  UCHAR  request;$/;"	m	struct:__anon11
request_count	libusb/os/wince_usb.c	/^volatile LONG request_count[2] = {0, 1};	\/\/ last one must be > 0$/;"	v
request_count	libusb/os/windows_usb.c	/^volatile LONG request_count[2] = {0, 1};	\/\/ last one must be > 0$/;"	v
request_exit	examples/dpfp_threaded.c	/^static void request_exit(int code)$/;"	f	file:
request_type	libusb/os/windows_usb.h	/^  UCHAR  request_type;$/;"	m	struct:__anon11
required_argument	examples/getopt/getopt.h	111;"	d
reserved	libusb/os/wince_usb.h	/^	int reserved;$/;"	m	struct:wince_device_handle_priv
reset_device	libusb/libusbi.h	/^	int (*reset_device)(struct libusb_device_handle *handle);$/;"	m	struct:usbi_os_backend
reset_device	libusb/os/windows_usb.h	/^	int (*reset_device)(int sub_api, struct libusb_device_handle *dev_handle);$/;"	m	struct:windows_usb_api_backend
restricted_functionality	libusb/os/windows_usb.h	/^		bool restricted_functionality;	\/\/ indicates if the interface functionality is restricted$/;"	m	struct:windows_device_priv::__anon4
result	libusb/os/darwin_usb.h	/^  IOReturn result;$/;"	m	struct:darwin_msg_async_io_complete
revents	libusb/os/poll_windows.h	/^    short revents;    \/* returned events *\/$/;"	m	struct:pollfd
root	libusb/os/windows_usb.h	/^		USB_ROOT_HUB_NAME_FIXED root;$/;"	m	union:USB_HUB_NAME_FIXED::__anon8
rw	libusb/os/poll_windows.h	/^	enum rw_type rw;				\/\/ I\/O transfer direction: read *XOR* write (NOT BOTH)$/;"	m	struct:winfd	typeref:enum:winfd::rw_type
rw_type	libusb/os/poll_windows.h	/^enum rw_type {$/;"	g
safe_closehandle	libusb/os/windows_common.h	41;"	d
safe_free	libusb/os/windows_common.h	40;"	d
safe_min	libusb/os/windows_common.h	42;"	d
safe_sprintf	libusb/os/windows_common.h	52;"	d
safe_stprintf	libusb/os/windows_common.h	53;"	d
safe_strcat	libusb/os/windows_common.h	47;"	d
safe_strcmp	libusb/os/windows_common.h	48;"	d
safe_strcp	libusb/os/windows_common.h	43;"	d
safe_strcpy	libusb/os/windows_common.h	45;"	d
safe_stricmp	libusb/os/windows_common.h	49;"	d
safe_strlen	libusb/os/windows_common.h	51;"	d
safe_strncat	libusb/os/windows_common.h	46;"	d
safe_strncmp	libusb/os/windows_common.h	50;"	d
safe_tcslen	libusb/os/windows_common.h	54;"	d
safe_unref_device	libusb/os/windows_common.h	55;"	d
sanitize_path	libusb/os/windows_usb.c	/^static char* sanitize_path(const char* path)$/;"	f	file:
save_to_file	examples/dpfp.c	/^static int save_to_file(unsigned char *data)$/;"	f	file:
save_to_file	examples/dpfp_threaded.c	/^static int save_to_file(unsigned char *data)$/;"	f	file:
seek_to_next_config	libusb/os/linux_usbfs.c	/^static int seek_to_next_config(struct libusb_context *ctx,$/;"	f	file:
seek_to_next_descriptor	libusb/os/linux_usbfs.c	/^static int seek_to_next_descriptor(struct libusb_context *ctx,$/;"	f	file:
send_mass_storage_command	examples/xusb.c	/^static int send_mass_storage_command(libusb_device_handle *handle, uint8_t endpoint, uint8_t lun,$/;"	f	file:
session	libusb/os/darwin_usb.h	/^  UInt64                session;$/;"	m	struct:darwin_cached_device
session_data	libusb/libusbi.h	/^	unsigned long session_data;$/;"	m	struct:libusb_device
set_composite_interface	libusb/os/windows_usb.c	/^static int set_composite_interface(struct libusb_context* ctx, struct libusb_device* dev,$/;"	f	file:
set_configuration	libusb/libusbi.h	/^	int (*set_configuration)(struct libusb_device_handle *handle, int config);$/;"	m	struct:usbi_os_backend
set_fd_cloexec_nb	libusb/os/linux_netlink.c	/^static int set_fd_cloexec_nb (int fd)$/;"	f	file:
set_hid_interface	libusb/os/windows_usb.c	/^static int set_hid_interface(struct libusb_context* ctx, struct libusb_device* dev,$/;"	f	file:
set_hwstat	examples/dpfp.c	/^static int set_hwstat(unsigned char data)$/;"	f	file:
set_hwstat	examples/dpfp_threaded.c	/^static int set_hwstat(unsigned char data)$/;"	f	file:
set_interface_altsetting	libusb/libusbi.h	/^	int (*set_interface_altsetting)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend
set_interface_altsetting	libusb/os/windows_usb.h	/^	int (*set_interface_altsetting)(int sub_api, struct libusb_device_handle *dev_handle, int iface, int altsetting);$/;"	m	struct:windows_usb_api_backend
set_mode	examples/dpfp.c	/^static int set_mode(unsigned char data)$/;"	f	file:
set_mode	examples/dpfp_threaded.c	/^static int set_mode(unsigned char data)$/;"	f	file:
set_mode_async	examples/dpfp.c	/^static int set_mode_async(unsigned char data)$/;"	f	file:
set_mode_async	examples/dpfp_threaded.c	/^static int set_mode_async(unsigned char data)$/;"	f	file:
set_xbox_actuators	examples/xusb.c	/^static int set_xbox_actuators(libusb_device_handle *handle, uint8_t left, uint8_t right)$/;"	f	file:
setup_cancel_io	libusb/os/poll_windows.c	/^static __inline void setup_cancel_io()$/;"	f	file:
setup_cancel_io	libusb/os/poll_windows.c	/^static inline void setup_cancel_io(void)$/;"	f	file:
setup_test_output	tests/testlib.c	/^static int setup_test_output(libusbx_testlib_ctx * ctx)$/;"	f	file:
sig_hdlr	examples/sam3u_benchmark.c	/^static void sig_hdlr(int signum)$/;"	f	file:
sighandler	examples/dpfp.c	/^static void sighandler(int signum)$/;"	f	file:
sighandler	examples/dpfp_threaded.c	/^static void sighandler(int signum)$/;"	f	file:
signr	libusb/os/linux_usbfs.h	/^	unsigned int signr;$/;"	m	struct:usbfs_urb
size	libusb/os/darwin_usb.h	/^  UInt32 size;$/;"	m	struct:darwin_msg_async_io_complete
skip_external	examples/ezusb.c	/^	skip_external		\/* second phase, second-stage loader *\/$/;"	e	enum:__anon25	file:
skip_internal	examples/ezusb.c	/^	skip_internal,		\/* first phase, second-stage loader *\/$/;"	e	enum:__anon25	file:
slow	libusb/os/linux_usbfs.h	/^	unsigned char slow;$/;"	m	struct:usbfs_connectinfo
snl	libusb/os/linux_netlink.c	/^struct sockaddr_nl snl = { .nl_family=AF_NETLINK, .nl_groups=KERNEL };$/;"	v	typeref:struct:sockaddr_nl
snprintf	libusb/libusbi.h	446;"	d
speed	libusb/libusbi.h	/^	enum libusb_speed speed;$/;"	m	struct:libusb_device	typeref:enum:libusb_device::libusb_speed
srcPath	msvc/ddk_build.cmd	/^set srcPath=examples\\fxload_ddkbuild\\obj%BUILD_ALT_DIR%\\%cpudir%$/;"	v
srcPath	msvc/ddk_build.cmd	/^set srcPath=examples\\hotplugtest_ddkbuild\\obj%BUILD_ALT_DIR%\\%cpudir%$/;"	v
srcPath	msvc/ddk_build.cmd	/^set srcPath=examples\\listdevs_ddkbuild\\obj%BUILD_ALT_DIR%\\%cpudir%$/;"	v
srcPath	msvc/ddk_build.cmd	/^set srcPath=examples\\xusb_ddkbuild\\obj%BUILD_ALT_DIR%\\%cpudir%$/;"	v
srcPath	msvc/ddk_build.cmd	/^set srcPath=libusb\\os\\obj%BUILD_ALT_DIR%\\%cpudir%$/;"	v
ssize_t	libusb/libusb.h	/^  typedef __int64 ssize_t;$/;"	t
ssize_t	libusb/libusb.h	/^  typedef int ssize_t;$/;"	t
ssize_t	libusb/libusb.h	35;"	d
start_frame	libusb/os/linux_usbfs.h	/^	int start_frame;$/;"	m	struct:usbfs_urb
state	examples/dpfp.c	/^static int state = 0;$/;"	v	file:
state	examples/dpfp_threaded.c	/^static int state = 0;$/;"	v	file:
status	libusb/libusb.h	/^	enum libusb_transfer_status status;$/;"	m	struct:libusb_iso_packet_descriptor	typeref:enum:libusb_iso_packet_descriptor::libusb_transfer_status
status	libusb/libusb.h	/^	enum libusb_transfer_status status;$/;"	m	struct:libusb_transfer	typeref:enum:libusb_transfer::libusb_transfer_status
status	libusb/os/linux_usbfs.h	/^	int status;$/;"	m	struct:usbfs_urb
status	libusb/os/linux_usbfs.h	/^	unsigned int status;$/;"	m	struct:usbfs_iso_packet_desc
str	libusb/os/windows_usb.c	/^	char* str;$/;"	m	struct:htab_entry	file:
string	libusb/os/windows_usb.h	/^	WCHAR string[3][MAX_USB_STRING_LENGTH];$/;"	m	struct:hid_device_priv
string_index	libusb/os/windows_usb.h	/^	uint8_t string_index[3];	\/\/ man, prod, ser$/;"	m	struct:hid_device_priv
strncasecmp	libusb/strerror.c	29;"	d	file:
sub_api	libusb/os/windows_usb.h	/^		int sub_api;$/;"	m	struct:windows_device_priv::__anon4
sub_api	libusb/os/windows_usb.h	/^	int sub_api;						\/\/ for WinUSB-like APIs$/;"	m	struct:windows_device_priv
sub_api_name	libusb/os/windows_usb.c	/^const char* sub_api_name[SUB_API_MAX] = WINUSBX_DRV_NAMES;$/;"	v
submit_bulk_transfer	libusb/os/darwin_usb.c	/^static int submit_bulk_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:
submit_bulk_transfer	libusb/os/linux_usbfs.c	/^static int submit_bulk_transfer(struct usbi_transfer *itransfer,$/;"	f	file:
submit_bulk_transfer	libusb/os/windows_usb.c	/^static int submit_bulk_transfer(struct usbi_transfer *itransfer)$/;"	f	file:
submit_bulk_transfer	libusb/os/windows_usb.h	/^	int (*submit_bulk_transfer)(int sub_api, struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend
submit_control_transfer	libusb/os/darwin_usb.c	/^static int submit_control_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:
submit_control_transfer	libusb/os/linux_usbfs.c	/^static int submit_control_transfer(struct usbi_transfer *itransfer)$/;"	f	file:
submit_control_transfer	libusb/os/windows_usb.c	/^static int submit_control_transfer(struct usbi_transfer *itransfer)$/;"	f	file:
submit_control_transfer	libusb/os/windows_usb.h	/^	int (*submit_control_transfer)(int sub_api, struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend
submit_iso_transfer	libusb/os/darwin_usb.c	/^static int submit_iso_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:
submit_iso_transfer	libusb/os/linux_usbfs.c	/^static int submit_iso_transfer(struct usbi_transfer *itransfer)$/;"	f	file:
submit_iso_transfer	libusb/os/windows_usb.c	/^static int submit_iso_transfer(struct usbi_transfer *itransfer)$/;"	f	file:
submit_iso_transfer	libusb/os/windows_usb.h	/^	int (*submit_iso_transfer)(int sub_api, struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend
submit_transfer	libusb/libusbi.h	/^	int (*submit_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:usbi_os_backend
supports_flag_bulk_continuation	libusb/os/linux_usbfs.c	/^static int supports_flag_bulk_continuation = -1;$/;"	v	file:
supports_flag_zero_packet	libusb/os/linux_usbfs.c	/^static int supports_flag_zero_packet = -1;$/;"	v	file:
sync_intr	examples/dpfp.c	/^static int sync_intr(unsigned char type)$/;"	f	file:
sync_intr	examples/dpfp_threaded.c	/^static int sync_intr(unsigned char type)$/;"	f	file:
sync_transfer_cb	libusb/sync.c	/^static void LIBUSB_CALL sync_transfer_cb(struct libusb_transfer *transfer)$/;"	f	file:
sync_transfer_wait_for_completion	libusb/sync.c	/^static void sync_transfer_wait_for_completion(struct libusb_transfer *transfer)$/;"	f	file:
sys_path	libusb/os/darwin_usb.h	/^  char                  sys_path[21];$/;"	m	struct:darwin_cached_device
sysfs_can_relate_devices	libusb/os/linux_usbfs.c	/^static int sysfs_can_relate_devices = -1;$/;"	v	file:
sysfs_dir	libusb/os/linux_usbfs.c	/^	char *sysfs_dir;$/;"	m	struct:linux_device_priv	file:
sysfs_get_active_config	libusb/os/linux_usbfs.c	/^static int sysfs_get_active_config(struct libusb_device *dev, int *config)$/;"	f	file:
sysfs_get_device_list	libusb/os/linux_usbfs.c	/^static int sysfs_get_device_list(struct libusb_context *ctx)$/;"	f	file:
sysfs_has_descriptors	libusb/os/linux_usbfs.c	/^static int sysfs_has_descriptors = -1;$/;"	v	file:
sysfs_scan_device	libusb/os/linux_usbfs.c	/^static int sysfs_scan_device(struct libusb_context *ctx, const char *devname)$/;"	f	file:
test_count	tests/libusbx_testlib.h	/^	int test_count;$/;"	m	struct:__anon23
test_default_context_change	tests/stress.c	/^static libusbx_testlib_result test_default_context_change(libusbx_testlib_ctx * tctx)$/;"	f	file:
test_device	examples/xusb.c	/^static int test_device(uint16_t vid, uint16_t pid)$/;"	f	file:
test_get_device_list	tests/stress.c	/^static libusbx_testlib_result test_get_device_list(libusbx_testlib_ctx * tctx)$/;"	f	file:
test_hid	examples/xusb.c	/^static int test_hid(libusb_device_handle *handle, uint8_t endpoint_in)$/;"	f	file:
test_init_and_exit	tests/stress.c	/^static libusbx_testlib_result test_init_and_exit(libusbx_testlib_ctx * tctx)$/;"	f	file:
test_many_device_lists	tests/stress.c	/^static libusbx_testlib_result test_many_device_lists(libusbx_testlib_ctx * tctx)$/;"	f	file:
test_mass_storage	examples/xusb.c	/^static int test_mass_storage(libusb_device_handle *handle, uint8_t endpoint_in, uint8_t endpoint_out)$/;"	f	file:
test_mode	examples/xusb.c	/^} test_mode;$/;"	v	typeref:enum:test_type	file:
test_names	tests/libusbx_testlib.h	/^	char ** test_names;$/;"	m	struct:__anon23
test_result_to_str	tests/testlib.c	/^static const char* test_result_to_str(libusbx_testlib_result result)$/;"	f	file:
test_type	examples/xusb.c	/^static enum test_type {$/;"	g	file:
tests	tests/stress.c	/^static const libusbx_testlib_test tests[] = {$/;"	v	file:
thread_id	libusb/os/poll_windows.c	/^	DWORD thread_id;$/;"	m	struct:__anon17	file:
tid	libusb/os/threads_windows.h	/^	DWORD            tid;$/;"	m	struct:usbi_cond_perthread
timeout	libusb/libusb.h	/^	unsigned int timeout;$/;"	m	struct:libusb_transfer
timeout	libusb/libusbi.h	/^	struct timeval timeout;$/;"	m	struct:usbi_transfer	typeref:struct:usbi_transfer::timeval
timeout	libusb/os/linux_usbfs.h	/^	uint32_t timeout;	\/* in milliseconds *\/$/;"	m	struct:usbfs_ctrltransfer
timeout	libusb/os/linux_usbfs.h	/^	unsigned int timeout;	\/* in milliseconds *\/$/;"	m	struct:usbfs_bulktransfer
timer_mutex	libusb/os/wince_usb.c	/^HANDLE timer_mutex = NULL;$/;"	v
timer_mutex	libusb/os/windows_usb.c	/^HANDLE timer_mutex = NULL;$/;"	v
timer_request	libusb/os/wince_usb.c	/^HANDLE timer_request[2] = { NULL, NULL };$/;"	v
timer_request	libusb/os/windows_usb.c	/^HANDLE timer_request[2] = { NULL, NULL };$/;"	v
timer_response	libusb/os/wince_usb.c	/^HANDLE timer_response = NULL;$/;"	v
timer_response	libusb/os/windows_usb.c	/^HANDLE timer_response = NULL;$/;"	v
timer_thread	libusb/os/wince_usb.c	/^HANDLE timer_thread = NULL;$/;"	v
timer_thread	libusb/os/windows_usb.c	/^HANDLE timer_thread = NULL;$/;"	v
timer_tp	libusb/os/wince_usb.c	/^struct timespec timer_tp;$/;"	v	typeref:struct:timespec
timer_tp	libusb/os/windows_usb.c	/^struct timespec timer_tp;$/;"	v	typeref:struct:timespec
timerfd	libusb/libusbi.h	/^	int timerfd;$/;"	m	struct:libusb_context
timersub	libusb/os/poll_windows.h	116;"	d
timespec	libusb/os/threads_windows.h	/^struct timespec {$/;"	s
timestamp_origin	libusb/core.c	/^static struct timeval timestamp_origin = { 0, 0 };$/;"	v	typeref:struct:timeval	file:
total	examples/ezusb.c	/^	size_t total, count;$/;"	m	struct:ram_poke_context	file:
transfer_priv_size	libusb/libusbi.h	/^	size_t transfer_priv_size;$/;"	m	struct:usbi_os_backend
transferred	libusb/libusbi.h	/^	int transferred;$/;"	m	struct:usbi_transfer
translate_driver_error	libusb/os/wince_usb.c	/^static int translate_driver_error(int error) $/;"	f	file:
true	examples/ezusb.h	31;"	d
true	examples/xusb.c	40;"	d	file:
true	libusb/os/windows_common.h	34;"	d
true	tests/libusbx_testlib.h	29;"	d
tv_nsec	libusb/os/threads_windows.h	/^		long tv_nsec;$/;"	m	struct:timespec
tv_sec	libusb/os/threads_windows.h	/^		long tv_sec;$/;"	m	struct:timespec
tv_start	examples/sam3u_benchmark.c	/^static struct timeval tv_start;$/;"	v	typeref:struct:timeval	file:
type	examples/ezusb.h	/^	int type;$/;"	m	struct:__anon26
type	libusb/libusb.h	/^	unsigned char type;$/;"	m	struct:libusb_transfer
type	libusb/os/linux_usbfs.h	/^	unsigned char type;$/;"	m	struct:usbfs_urb
u	libusb/os/windows_usb.h	/^	} u;$/;"	m	struct:USB_HUB_NAME_FIXED	typeref:union:USB_HUB_NAME_FIXED::__anon8
u	libusb/os/windows_usb.h	/^	} u;$/;"	m	struct:USB_NODE_INFORMATION	typeref:union:USB_NODE_INFORMATION::__anon9
u	libusb/os/windows_usb.h	/^	} u;$/;"	m	struct:_HIDP_VALUE_CAPS	typeref:union:_HIDP_VALUE_CAPS::__anon14
udev_control_pipe	libusb/os/linux_udev.c	/^static int udev_control_pipe[2] = {-1, -1};$/;"	v	file:
udev_ctx	libusb/os/linux_udev.c	/^static struct udev *udev_ctx = NULL;$/;"	v	typeref:struct:udev	file:
udev_device_info	libusb/os/linux_udev.c	/^static int udev_device_info(struct libusb_context *ctx, int detached,$/;"	f	file:
udev_hotplug_event	libusb/os/linux_udev.c	/^static void udev_hotplug_event(struct udev_device* udev_dev)$/;"	f	file:
udev_monitor	libusb/os/linux_udev.c	/^static struct udev_monitor *udev_monitor = NULL;$/;"	v	typeref:struct:udev_monitor	file:
udev_monitor_fd	libusb/os/linux_udev.c	/^static int udev_monitor_fd = -1;$/;"	v	file:
uint16_t	libusb/libusb.h	/^typedef unsigned __int16  uint16_t;$/;"	t
uint16_t	msvc/stdint.h	/^typedef unsigned __int16  uint16_t;$/;"	t
uint32_t	libusb/libusb.h	/^typedef unsigned __int32  uint32_t;$/;"	t
uint32_t	msvc/stdint.h	/^typedef unsigned __int32  uint32_t;$/;"	t
uint64_t	msvc/stdint.h	/^typedef unsigned __int64   uint64_t;$/;"	t
uint8_t	libusb/libusb.h	/^typedef unsigned __int8   uint8_t;$/;"	t
uint8_t	msvc/stdint.h	/^typedef unsigned __int8   uint8_t;$/;"	t
uint_fast16_t	msvc/stdint.h	/^typedef unsigned __int16  uint_fast16_t;$/;"	t
uint_fast32_t	msvc/stdint.h	/^typedef unsigned  __int32  uint_fast32_t;$/;"	t
uint_fast64_t	msvc/stdint.h	/^typedef unsigned __int64   uint_fast64_t;$/;"	t
uint_fast8_t	msvc/stdint.h	/^typedef unsigned __int8 uint_fast8_t;$/;"	t
uint_least16_t	msvc/stdint.h	/^typedef unsigned short  uint_least16_t;$/;"	t
uint_least32_t	msvc/stdint.h	/^typedef unsigned   uint_least32_t;$/;"	t
uint_least64_t	msvc/stdint.h	/^typedef unsigned __int64   uint_least64_t;$/;"	t
uint_least8_t	msvc/stdint.h	/^typedef unsigned char   uint_least8_t;$/;"	t
uintmax_t	msvc/stdint.h	/^typedef unsigned __int64   uintmax_t;$/;"	t
uintptr_t	msvc/stdint.h	/^  typedef unsigned __int64 uintptr_t;$/;"	t
uintptr_t	msvc/stdint.h	/^  typedef unsigned int uintptr_t;$/;"	t
uintptr_t	msvc/stdint.h	49;"	d
unsupported_abort_control	libusb/os/windows_usb.c	/^static int unsupported_abort_control(int sub_api, struct usbi_transfer *itransfer) {$/;"	f	file:
unsupported_abort_transfers	libusb/os/windows_usb.c	/^static int unsupported_abort_transfers(int sub_api, struct usbi_transfer *itransfer) {$/;"	f	file:
unsupported_claim_interface	libusb/os/windows_usb.c	/^static int unsupported_claim_interface(int sub_api, struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:
unsupported_clear_halt	libusb/os/windows_usb.c	/^static int unsupported_clear_halt(int sub_api, struct libusb_device_handle *dev_handle, unsigned char endpoint) {$/;"	f	file:
unsupported_close	libusb/os/windows_usb.c	/^static void unsupported_close(int sub_api, struct libusb_device_handle *dev_handle) {$/;"	f	file:
unsupported_configure_endpoints	libusb/os/windows_usb.c	/^static int unsupported_configure_endpoints(int sub_api, struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:
unsupported_copy_transfer_data	libusb/os/windows_usb.c	/^static int unsupported_copy_transfer_data(int sub_api, struct usbi_transfer *itransfer, uint32_t io_size) {$/;"	f	file:
unsupported_exit	libusb/os/windows_usb.c	/^static int unsupported_exit(int sub_api) {$/;"	f	file:
unsupported_init	libusb/os/windows_usb.c	/^static int unsupported_init(int sub_api, struct libusb_context *ctx) {$/;"	f	file:
unsupported_open	libusb/os/windows_usb.c	/^static int unsupported_open(int sub_api, struct libusb_device_handle *dev_handle) {$/;"	f	file:
unsupported_release_interface	libusb/os/windows_usb.c	/^static int unsupported_release_interface(int sub_api, struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:
unsupported_reset_device	libusb/os/windows_usb.c	/^static int unsupported_reset_device(int sub_api, struct libusb_device_handle *dev_handle) {$/;"	f	file:
unsupported_set_interface_altsetting	libusb/os/windows_usb.c	/^static int unsupported_set_interface_altsetting(int sub_api, struct libusb_device_handle *dev_handle, int iface, int altsetting) {$/;"	f	file:
unsupported_submit_bulk_transfer	libusb/os/windows_usb.c	/^static int unsupported_submit_bulk_transfer(int sub_api, struct usbi_transfer *itransfer) {$/;"	f	file:
unsupported_submit_control_transfer	libusb/os/windows_usb.c	/^static int unsupported_submit_control_transfer(int sub_api, struct usbi_transfer *itransfer) {$/;"	f	file:
unsupported_submit_iso_transfer	libusb/os/windows_usb.c	/^static int unsupported_submit_iso_transfer(int sub_api, struct usbi_transfer *itransfer) {$/;"	f	file:
urbs	libusb/os/linux_usbfs.c	/^		struct usbfs_urb *urbs;$/;"	m	union:linux_transfer_priv::__anon18	typeref:struct:linux_transfer_priv::__anon18::usbfs_urb	file:
usage	.private/bd.cmd	/^:usage$/;"	l
usage	.private/bwince.cmd	/^:usage$/;"	l
usage	msvc/ddk_build.cmd	/^:usage$/;"	l
usb_api_backend	libusb/os/windows_usb.c	/^const struct windows_usb_api_backend usb_api_backend[USB_API_MAX] = {$/;"	v	typeref:struct:windows_usb_api_backend
usb_descriptor_header	libusb/libusbi.h	/^struct usb_descriptor_header {$/;"	s
usb_device_t	libusb/os/darwin_usb.h	70;"	d
usb_device_t	libusb/os/darwin_usb.h	76;"	d
usb_device_t	libusb/os/darwin_usb.h	82;"	d
usb_device_t	libusb/os/darwin_usb.h	88;"	d
usb_device_t	libusb/os/darwin_usb.h	93;"	d
usb_devs	libusb/libusbi.h	/^	struct list_head usb_devs;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head
usb_devs_lock	libusb/libusbi.h	/^	usbi_mutex_t usb_devs_lock;$/;"	m	struct:libusb_context
usb_interface	examples/xusb.c	48;"	d	file:
usb_interface	libusb/os/windows_usb.h	/^	} usb_interface[USB_MAXINTERFACES];$/;"	m	struct:windows_device_priv	typeref:struct:windows_device_priv::__anon4
usb_interface_t	libusb/os/darwin_usb.h	33;"	d
usb_interface_t	libusb/os/darwin_usb.h	39;"	d
usb_interface_t	libusb/os/darwin_usb.h	45;"	d
usb_interface_t	libusb/os/darwin_usb.h	51;"	d
usb_interface_t	libusb/os/darwin_usb.h	57;"	d
usb_setup_device_iterator	libusb/os/darwin_usb.c	/^static int usb_setup_device_iterator (io_iterator_t *deviceIterator, UInt32 location) {$/;"	f	file:
usbdev_names	libusb/os/linux_usbfs.c	/^static int usbdev_names = 0;$/;"	v	file:
usbfs_bulktransfer	libusb/os/linux_usbfs.h	/^struct usbfs_bulktransfer {$/;"	s
usbfs_connectinfo	libusb/os/linux_usbfs.h	/^struct usbfs_connectinfo {$/;"	s
usbfs_ctrltransfer	libusb/os/linux_usbfs.h	/^struct usbfs_ctrltransfer {$/;"	s
usbfs_disconnect_claim	libusb/os/linux_usbfs.h	/^struct usbfs_disconnect_claim {$/;"	s
usbfs_get_active_config	libusb/os/linux_usbfs.c	/^static int usbfs_get_active_config(struct libusb_device *dev, int fd)$/;"	f	file:
usbfs_get_device_list	libusb/os/linux_usbfs.c	/^static int usbfs_get_device_list(struct libusb_context *ctx)$/;"	f	file:
usbfs_getdriver	libusb/os/linux_usbfs.h	/^struct usbfs_getdriver {$/;"	s
usbfs_hub_portinfo	libusb/os/linux_usbfs.h	/^struct usbfs_hub_portinfo {$/;"	s
usbfs_ioctl	libusb/os/linux_usbfs.h	/^struct usbfs_ioctl {$/;"	s
usbfs_iso_packet_desc	libusb/os/linux_usbfs.h	/^struct usbfs_iso_packet_desc {$/;"	s
usbfs_path	libusb/os/linux_usbfs.c	/^static const char *usbfs_path = NULL;$/;"	v	file:
usbfs_scan_busdir	libusb/os/linux_usbfs.c	/^static int usbfs_scan_busdir(struct libusb_context *ctx, uint8_t busnum)$/;"	f	file:
usbfs_setinterface	libusb/os/linux_usbfs.h	/^struct usbfs_setinterface {$/;"	s
usbfs_urb	libusb/os/linux_usbfs.h	/^struct usbfs_urb {$/;"	s
usbfs_urb_type	libusb/os/linux_usbfs.h	/^enum usbfs_urb_type {$/;"	g
usbi_add_pollfd	libusb/io.c	/^int usbi_add_pollfd(struct libusb_context *ctx, int fd, short events)$/;"	f
usbi_alloc_device	libusb/core.c	/^struct libusb_device *usbi_alloc_device(struct libusb_context *ctx,$/;"	f
usbi_backend	libusb/core.c	/^const struct usbi_os_backend * const usbi_backend = &darwin_backend;$/;"	v
usbi_backend	libusb/core.c	/^const struct usbi_os_backend * const usbi_backend = &linux_usbfs_backend;$/;"	v
usbi_backend	libusb/core.c	/^const struct usbi_os_backend * const usbi_backend = &netbsd_backend;$/;"	v
usbi_backend	libusb/core.c	/^const struct usbi_os_backend * const usbi_backend = &openbsd_backend;$/;"	v
usbi_backend	libusb/core.c	/^const struct usbi_os_backend * const usbi_backend = &wince_backend;$/;"	v
usbi_backend	libusb/core.c	/^const struct usbi_os_backend * const usbi_backend = &windows_backend;$/;"	v
usbi_close	libusb/os/poll_posix.h	6;"	d
usbi_close	libusb/os/poll_windows.c	/^int usbi_close(int fd)$/;"	f
usbi_cond_broadcast	libusb/os/threads_posix.h	42;"	d
usbi_cond_broadcast	libusb/os/threads_windows.c	/^int usbi_cond_broadcast(usbi_cond_t *cond) {$/;"	f
usbi_cond_destroy	libusb/os/threads_posix.h	43;"	d
usbi_cond_destroy	libusb/os/threads_windows.c	/^int usbi_cond_destroy(usbi_cond_t *cond) {$/;"	f
usbi_cond_init	libusb/os/threads_posix.h	39;"	d
usbi_cond_init	libusb/os/threads_windows.c	/^int usbi_cond_init(usbi_cond_t *cond,$/;"	f
usbi_cond_intwait	libusb/os/threads_windows.c	/^__inline static int usbi_cond_intwait(usbi_cond_t *cond,$/;"	f	file:
usbi_cond_perthread	libusb/os/threads_windows.h	/^struct usbi_cond_perthread {$/;"	s
usbi_cond_signal	libusb/os/threads_posix.h	44;"	d
usbi_cond_signal	libusb/os/threads_windows.c	/^int usbi_cond_signal(usbi_cond_t *cond) {$/;"	f
usbi_cond_t	libusb/os/threads_posix.h	38;"	d
usbi_cond_t	libusb/os/threads_windows.h	/^typedef struct usbi_cond_t_ usbi_cond_t;$/;"	t	typeref:struct:usbi_cond_t_
usbi_cond_t_	libusb/os/threads_windows.h	/^struct usbi_cond_t_ {$/;"	s
usbi_cond_timedwait	libusb/os/threads_posix.h	41;"	d
usbi_cond_timedwait	libusb/os/threads_windows.c	/^int usbi_cond_timedwait(usbi_cond_t *cond,$/;"	f
usbi_cond_wait	libusb/os/threads_posix.h	40;"	d
usbi_cond_wait	libusb/os/threads_windows.c	/^int usbi_cond_wait(usbi_cond_t *cond, usbi_mutex_t *mutex) {$/;"	f
usbi_condattr_t	libusb/os/threads_windows.h	59;"	d
usbi_connect_device	libusb/core.c	/^void usbi_connect_device(struct libusb_device *dev)$/;"	f
usbi_create_fd	libusb/os/poll_windows.c	/^struct winfd usbi_create_fd(HANDLE handle, int access_mode, struct usbi_transfer *itransfer, cancel_transfer *cancel_fn)$/;"	f
usbi_dbg	libusb/libusbi.h	162;"	d
usbi_dbg	libusb/libusbi.h	165;"	d
usbi_default_context	libusb/core.c	/^struct libusb_context *usbi_default_context = NULL;$/;"	v	typeref:struct:libusb_context
usbi_device_cache_descriptor	libusb/descriptor.c	/^int usbi_device_cache_descriptor(libusb_device *dev)$/;"	f
usbi_disconnect_device	libusb/core.c	/^void usbi_disconnect_device(struct libusb_device *dev)$/;"	f
usbi_err	libusb/libusbi.h	170;"	d
usbi_fd_notification	libusb/core.c	/^void usbi_fd_notification(struct libusb_context *ctx)$/;"	f
usbi_free_fd	libusb/os/poll_windows.c	/^void usbi_free_fd(struct winfd *wfd)$/;"	f
usbi_get_config_index_by_value	libusb/descriptor.c	/^int usbi_get_config_index_by_value(struct libusb_device *dev,$/;"	f
usbi_get_device_by_session_id	libusb/core.c	/^struct libusb_device *usbi_get_device_by_session_id(struct libusb_context *ctx,$/;"	f
usbi_get_tid	libusb/os/threads_posix.c	/^int usbi_get_tid(void)$/;"	f
usbi_get_tid	libusb/os/threads_windows.c	/^int usbi_get_tid(void) {$/;"	f
usbi_gettimeofday	libusb/core.c	/^int usbi_gettimeofday(struct timeval *tp, void *tzp)$/;"	f
usbi_gettimeofday	libusb/libusbi.h	453;"	d
usbi_handle_disconnect	libusb/io.c	/^void usbi_handle_disconnect(struct libusb_device_handle *handle)$/;"	f
usbi_handle_transfer_cancellation	libusb/io.c	/^int usbi_handle_transfer_cancellation(struct usbi_transfer *transfer)$/;"	f
usbi_handle_transfer_completion	libusb/io.c	/^int usbi_handle_transfer_completion(struct usbi_transfer *itransfer,$/;"	f
usbi_hotplug_deregister_all	libusb/hotplug.c	/^void usbi_hotplug_deregister_all(struct libusb_context *ctx) {$/;"	f
usbi_hotplug_match	libusb/hotplug.c	/^void usbi_hotplug_match(struct libusb_context *ctx, struct libusb_device *dev,$/;"	f
usbi_hotplug_match_cb	libusb/hotplug.c	/^static int usbi_hotplug_match_cb (struct libusb_context *ctx,$/;"	f	file:
usbi_info	libusb/libusbi.h	168;"	d
usbi_io_exit	libusb/io.c	/^void usbi_io_exit(struct libusb_context *ctx)$/;"	f
usbi_io_init	libusb/io.c	/^int usbi_io_init(struct libusb_context *ctx)$/;"	f
usbi_locale	libusb/strerror.c	/^static size_t usbi_locale = 0;$/;"	v	file:
usbi_locale_supported	libusb/strerror.c	/^static const char* usbi_locale_supported[] = { "en", "nl", "fr" };$/;"	v	file:
usbi_localized_errors	libusb/strerror.c	/^static const char* usbi_localized_errors[ARRAYSIZE(usbi_locale_supported)][LIBUSB_ERROR_COUNT] = {$/;"	v	file:
usbi_log	libusb/core.c	/^void usbi_log(struct libusb_context *ctx, enum libusb_log_level level,$/;"	f
usbi_log_str	libusb/core.c	/^static void usbi_log_str(struct libusb_context *ctx,$/;"	f	file:
usbi_log_v	libusb/core.c	/^void usbi_log_v(struct libusb_context *ctx, enum libusb_log_level level,$/;"	f
usbi_mutex_destroy	libusb/os/threads_posix.h	36;"	d
usbi_mutex_destroy	libusb/os/threads_windows.c	/^int usbi_mutex_destroy(usbi_mutex_t *mutex) {$/;"	f
usbi_mutex_init	libusb/os/threads_posix.h	32;"	d
usbi_mutex_init	libusb/os/threads_windows.c	/^int usbi_mutex_init(usbi_mutex_t *mutex,$/;"	f
usbi_mutex_init_recursive	libusb/os/threads_posix.c	/^int usbi_mutex_init_recursive(pthread_mutex_t *mutex, pthread_mutexattr_t *attr)$/;"	f
usbi_mutex_init_recursive	libusb/os/threads_windows.h	62;"	d
usbi_mutex_lock	libusb/os/threads_posix.h	33;"	d
usbi_mutex_lock	libusb/os/threads_windows.c	/^int usbi_mutex_lock(usbi_mutex_t *mutex) {$/;"	f
usbi_mutex_static_lock	libusb/os/threads_posix.h	28;"	d
usbi_mutex_static_lock	libusb/os/threads_windows.c	/^int usbi_mutex_static_lock(usbi_mutex_static_t *mutex) {$/;"	f
usbi_mutex_static_t	libusb/os/threads_posix.h	26;"	d
usbi_mutex_static_t	libusb/os/threads_windows.h	24;"	d
usbi_mutex_static_unlock	libusb/os/threads_posix.h	29;"	d
usbi_mutex_static_unlock	libusb/os/threads_windows.c	/^int usbi_mutex_static_unlock(usbi_mutex_static_t *mutex) {$/;"	f
usbi_mutex_t	libusb/os/threads_posix.h	31;"	d
usbi_mutex_t	libusb/os/threads_windows.h	27;"	d
usbi_mutex_trylock	libusb/os/threads_posix.h	35;"	d
usbi_mutex_trylock	libusb/os/threads_windows.c	/^int usbi_mutex_trylock(usbi_mutex_t *mutex) {$/;"	f
usbi_mutex_unlock	libusb/os/threads_posix.h	34;"	d
usbi_mutex_unlock	libusb/os/threads_windows.c	/^int usbi_mutex_unlock(usbi_mutex_t *mutex) {$/;"	f
usbi_mutexattr_t	libusb/os/threads_windows.h	58;"	d
usbi_os_backend	libusb/libusbi.h	/^struct usbi_os_backend {$/;"	s
usbi_parse_descriptor	libusb/descriptor.c	/^int usbi_parse_descriptor(const unsigned char *source, const char *descriptor,$/;"	f
usbi_pipe	libusb/os/poll_posix.c	/^int usbi_pipe(int pipefd[2])$/;"	f
usbi_pipe	libusb/os/poll_windows.c	/^int usbi_pipe(int filedes[2])$/;"	f
usbi_poll	libusb/os/poll_posix.h	7;"	d
usbi_poll	libusb/os/poll_windows.c	/^int usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout)$/;"	f
usbi_pollfd	libusb/libusbi.h	/^struct usbi_pollfd {$/;"	s
usbi_read	libusb/os/poll_posix.h	5;"	d
usbi_read	libusb/os/poll_windows.c	/^ssize_t usbi_read(int fd, void *buf, size_t count)$/;"	f
usbi_reallocf	libusb/libusbi.h	/^static inline void *usbi_reallocf(void *ptr, size_t size)$/;"	f
usbi_remove_pollfd	libusb/io.c	/^void usbi_remove_pollfd(struct libusb_context *ctx, int fd)$/;"	f
usbi_sanitize_device	libusb/core.c	/^int usbi_sanitize_device(struct libusb_device *dev)$/;"	f
usbi_transfer	libusb/libusbi.h	/^struct usbi_transfer {$/;"	s
usbi_transfer_flags	libusb/libusbi.h	/^enum usbi_transfer_flags {$/;"	g
usbi_transfer_get_os_priv	libusb/libusbi.h	/^static inline void *usbi_transfer_get_os_priv(struct usbi_transfer *transfer)$/;"	f
usbi_using_timerfd	libusb/libusbi.h	285;"	d
usbi_using_timerfd	libusb/libusbi.h	287;"	d
usbi_warn	libusb/libusbi.h	169;"	d
usbi_write	libusb/os/poll_posix.h	4;"	d
usbi_write	libusb/os/poll_windows.c	/^ssize_t usbi_write(int fd, const void *buf, size_t count)$/;"	f
used	libusb/os/windows_usb.c	/^	unsigned long used;$/;"	m	struct:htab_entry	file:
user_data	libusb/hotplug.h	/^	void *user_data;$/;"	m	struct:libusb_hotplug_callback
user_data	libusb/libusb.h	/^	void *user_data;$/;"	m	struct:libusb_transfer
usercontext	libusb/os/linux_usbfs.h	/^	void *usercontext;$/;"	m	struct:usbfs_urb
uses_report_ids	libusb/os/windows_usb.h	/^	bool uses_report_ids[3];	\/\/ input, ouptput, feature$/;"	m	struct:hid_device_priv
uuid_to_string	examples/xusb.c	/^static char* uuid_to_string(const uint8_t* uuid)$/;"	f	file:
val	examples/getopt/getopt.h	/^  int val;$/;"	m	struct:option
value	libusb/os/windows_usb.h	/^  USHORT value;$/;"	m	struct:__anon11
vendor_id	libusb/hotplug.h	/^	int vendor_id;$/;"	m	struct:libusb_hotplug_callback
verbose	examples/ezusb.c	/^int verbose = 1;$/;"	v
verbose	tests/libusbx_testlib.h	/^	bool verbose;$/;"	m	struct:__anon23
version	msvc/ddk_build.cmd	/^set version=1.0$/;"	v
vid	examples/ezusb.h	/^	uint16_t vid;$/;"	m	struct:__anon26
vid	libusb/os/windows_usb.h	/^	uint16_t vid;$/;"	m	struct:hid_device_priv
vsnprintf	libusb/libusbi.h	447;"	d
wBytesPerInterval	libusb/libusb.h	/^	uint16_t wBytesPerInterval;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor
wClassDescriptorLength	libusb/os/windows_usb.h	/^	uint16_t wClassDescriptorLength;$/;"	m	struct:libusb_hid_descriptor
wHubCharacteristics	libusb/os/windows_usb.h	/^	USHORT  wHubCharacteristics;$/;"	m	struct:USB_HUB_DESCRIPTOR
wIndex	libusb/libusb.h	/^	uint16_t wIndex;$/;"	m	struct:libusb_control_setup
wIndex	libusb/os/linux_usbfs.h	/^	uint16_t wIndex;$/;"	m	struct:usbfs_ctrltransfer
wIndex	libusb/os/wince_usb.h	/^	UINT16 wIndex;$/;"	m	struct:__anon20
wIndex	libusb/os/windows_usb.h	/^			USHORT wIndex;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon5::__anon6
wIndex	libusb/os/windows_usb.h	/^		USHORT  wIndex;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon7
wLength	libusb/libusb.h	/^	uint16_t wLength;$/;"	m	struct:libusb_control_setup
wLength	libusb/os/linux_usbfs.h	/^	uint16_t wLength;$/;"	m	struct:usbfs_ctrltransfer
wLength	libusb/os/wince_usb.h	/^	UINT16 wLength;$/;"	m	struct:__anon20
wLength	libusb/os/windows_usb.h	/^			USHORT wLength;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon5::__anon6
wLength	libusb/os/windows_usb.h	/^		USHORT  wLength;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon7
wMaxPacketSize	libusb/libusb.h	/^	uint16_t wMaxPacketSize;$/;"	m	struct:libusb_endpoint_descriptor
wMaxPacketSize	libusb/os/windows_usb.h	/^  USHORT  wMaxPacketSize;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR
wSpeedSupported	libusb/libusb.h	/^	uint16_t wSpeedSupported;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
wTotalLength	libusb/libusb.h	/^	uint16_t wTotalLength;$/;"	m	struct:libusb_bos_descriptor
wTotalLength	libusb/libusb.h	/^	uint16_t wTotalLength;$/;"	m	struct:libusb_config_descriptor
wTotalLength	libusb/os/windows_usb.h	/^  USHORT wTotalLength;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR
wValue	libusb/libusb.h	/^	uint16_t wValue;$/;"	m	struct:libusb_control_setup
wValue	libusb/os/linux_usbfs.h	/^	uint16_t wValue;$/;"	m	struct:usbfs_ctrltransfer
wValue	libusb/os/wince_usb.h	/^	UINT16 wValue;$/;"	m	struct:__anon20
wValue	libusb/os/windows_usb.h	/^			USHORT wValue;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon5::__anon6
wValue	libusb/os/windows_usb.h	/^		USHORT  wValue;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon7
waiters	libusb/os/threads_windows.h	/^	struct list_head waiters;$/;"	m	struct:usbi_cond_t_	typeref:struct:usbi_cond_t_::list_head
wchar_to_utf8_ms	libusb/os/windows_common.h	56;"	d
wctype_t	msvc/stdint.h	/^  typedef unsigned short wctype_t;$/;"	t
wince_attach_kernel_driver	libusb/os/wince_usb.c	/^static int wince_attach_kernel_driver($/;"	f	file:
wince_backend	libusb/os/wince_usb.c	/^const struct usbi_os_backend wince_backend = {$/;"	v	typeref:struct:usbi_os_backend
wince_cancel_transfer	libusb/os/wince_usb.c	/^static int wince_cancel_transfer($/;"	f	file:
wince_claim_interface	libusb/os/wince_usb.c	/^static int wince_claim_interface($/;"	f	file:
wince_clear_halt	libusb/os/wince_usb.c	/^static int wince_clear_halt($/;"	f	file:
wince_clear_transfer_priv	libusb/os/wince_usb.c	/^static void wince_clear_transfer_priv($/;"	f	file:
wince_clock_gettime	libusb/os/wince_usb.c	/^static int wince_clock_gettime(int clk_id, struct timespec *tp)$/;"	f	file:
wince_clock_gettime_threaded	libusb/os/wince_usb.c	/^unsigned __stdcall wince_clock_gettime_threaded(void* param)$/;"	f
wince_close	libusb/os/wince_usb.c	/^static void wince_close(struct libusb_device_handle *handle)$/;"	f	file:
wince_destroy_device	libusb/os/wince_usb.c	/^static void wince_destroy_device($/;"	f	file:
wince_detach_kernel_driver	libusb/os/wince_usb.c	/^static int wince_detach_kernel_driver($/;"	f	file:
wince_device_handle_priv	libusb/os/wince_usb.h	/^struct wince_device_handle_priv {$/;"	s
wince_device_priv	libusb/os/wince_usb.h	/^struct wince_device_priv {$/;"	s
wince_exit	libusb/os/wince_usb.c	/^static void wince_exit(void)$/;"	f	file:
wince_get_active_config_descriptor	libusb/os/wince_usb.c	/^static int wince_get_active_config_descriptor($/;"	f	file:
wince_get_config_descriptor	libusb/os/wince_usb.c	/^static int wince_get_config_descriptor($/;"	f	file:
wince_get_configuration	libusb/os/wince_usb.c	/^static int wince_get_configuration($/;"	f	file:
wince_get_device_descriptor	libusb/os/wince_usb.c	/^static int wince_get_device_descriptor($/;"	f	file:
wince_get_device_list	libusb/os/wince_usb.c	/^static int wince_get_device_list($/;"	f	file:
wince_handle_callback	libusb/os/wince_usb.c	/^static void wince_handle_callback (struct usbi_transfer *itransfer, uint32_t io_result, uint32_t io_size)$/;"	f	file:
wince_handle_events	libusb/os/wince_usb.c	/^static int wince_handle_events($/;"	f	file:
wince_init	libusb/os/wince_usb.c	/^static int wince_init(struct libusb_context *ctx)$/;"	f	file:
wince_kernel_driver_active	libusb/os/wince_usb.c	/^static int wince_kernel_driver_active($/;"	f	file:
wince_open	libusb/os/wince_usb.c	/^static int wince_open(struct libusb_device_handle *handle)$/;"	f	file:
wince_release_interface	libusb/os/wince_usb.c	/^static int wince_release_interface($/;"	f	file:
wince_reset_device	libusb/os/wince_usb.c	/^static int wince_reset_device($/;"	f	file:
wince_set_configuration	libusb/os/wince_usb.c	/^static int wince_set_configuration($/;"	f	file:
wince_set_interface_altsetting	libusb/os/wince_usb.c	/^static int wince_set_interface_altsetting($/;"	f	file:
wince_submit_control_or_bulk_transfer	libusb/os/wince_usb.c	/^static int wince_submit_control_or_bulk_transfer(struct usbi_transfer *itransfer)$/;"	f	file:
wince_submit_iso_transfer	libusb/os/wince_usb.c	/^static int wince_submit_iso_transfer(struct usbi_transfer *itransfer)$/;"	f	file:
wince_submit_transfer	libusb/os/wince_usb.c	/^static int wince_submit_transfer($/;"	f	file:
wince_transfer_callback	libusb/os/wince_usb.c	/^static void wince_transfer_callback(struct usbi_transfer *itransfer, uint32_t io_result, uint32_t io_size)$/;"	f	file:
wince_transfer_priv	libusb/os/wince_usb.h	/^struct wince_transfer_priv {$/;"	s
windows_abort_control	libusb/os/windows_usb.c	/^static int windows_abort_control(struct usbi_transfer *itransfer)$/;"	f	file:
windows_abort_transfers	libusb/os/windows_usb.c	/^static int windows_abort_transfers(struct usbi_transfer *itransfer)$/;"	f	file:
windows_assign_endpoints	libusb/os/windows_usb.c	/^static int windows_assign_endpoints(struct libusb_device_handle *dev_handle, int iface, int altsetting)$/;"	f	file:
windows_attach_kernel_driver	libusb/os/windows_usb.c	/^static int windows_attach_kernel_driver(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
windows_backend	libusb/os/windows_usb.c	/^const struct usbi_os_backend windows_backend = {$/;"	v	typeref:struct:usbi_os_backend
windows_cancel_transfer	libusb/os/windows_usb.c	/^static int windows_cancel_transfer(struct usbi_transfer *itransfer)$/;"	f	file:
windows_claim_interface	libusb/os/windows_usb.c	/^static int windows_claim_interface(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
windows_clear_halt	libusb/os/windows_usb.c	/^static int windows_clear_halt(struct libusb_device_handle *dev_handle, unsigned char endpoint)$/;"	f	file:
windows_clear_transfer_priv	libusb/os/windows_usb.c	/^static void windows_clear_transfer_priv(struct usbi_transfer *itransfer)$/;"	f	file:
windows_clock_gettime	libusb/os/windows_usb.c	/^static int windows_clock_gettime(int clk_id, struct timespec *tp)$/;"	f	file:
windows_clock_gettime_threaded	libusb/os/windows_usb.c	/^unsigned __stdcall windows_clock_gettime_threaded(void* param)$/;"	f
windows_close	libusb/os/windows_usb.c	/^static void windows_close(struct libusb_device_handle *dev_handle)$/;"	f	file:
windows_destroy_device	libusb/os/windows_usb.c	/^static void windows_destroy_device(struct libusb_device *dev)$/;"	f	file:
windows_detach_kernel_driver	libusb/os/windows_usb.c	/^static int windows_detach_kernel_driver(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
windows_device_handle_priv	libusb/os/windows_usb.h	/^struct windows_device_handle_priv {$/;"	s
windows_device_priv	libusb/os/windows_usb.h	/^struct windows_device_priv {$/;"	s
windows_device_priv_init	libusb/os/windows_usb.h	/^static inline void windows_device_priv_init(libusb_device* dev) {$/;"	f
windows_device_priv_release	libusb/os/windows_usb.h	/^static inline void windows_device_priv_release(libusb_device* dev) {$/;"	f
windows_error_str	libusb/os/wince_usb.c	/^static char* windows_error_str(uint32_t retval)$/;"	f	file:
windows_error_str	libusb/os/windows_usb.c	/^static char *windows_error_str(uint32_t retval)$/;"	f	file:
windows_exit	libusb/os/windows_usb.c	/^static void windows_exit(void)$/;"	f	file:
windows_get_active_config_descriptor	libusb/os/windows_usb.c	/^static int windows_get_active_config_descriptor(struct libusb_device *dev, unsigned char *buffer, size_t len, int *host_endian)$/;"	f	file:
windows_get_config_descriptor	libusb/os/windows_usb.c	/^static int windows_get_config_descriptor(struct libusb_device *dev, uint8_t config_index, unsigned char *buffer, size_t len, int *host_endian)$/;"	f	file:
windows_get_configuration	libusb/os/windows_usb.c	/^static int windows_get_configuration(struct libusb_device_handle *dev_handle, int *config)$/;"	f	file:
windows_get_device_descriptor	libusb/os/windows_usb.c	/^static int windows_get_device_descriptor(struct libusb_device *dev, unsigned char *buffer, int *host_endian)$/;"	f	file:
windows_get_device_list	libusb/os/windows_usb.c	/^static int windows_get_device_list(struct libusb_context *ctx, struct discovered_devs **_discdevs)$/;"	f	file:
windows_handle_callback	libusb/os/windows_usb.c	/^static void windows_handle_callback (struct usbi_transfer *itransfer, uint32_t io_result, uint32_t io_size)$/;"	f	file:
windows_handle_events	libusb/os/windows_usb.c	/^static int windows_handle_events(struct libusb_context *ctx, struct pollfd *fds, POLL_NFDS_TYPE nfds, int num_ready)$/;"	f	file:
windows_init	libusb/os/windows_usb.c	/^static int windows_init(struct libusb_context *ctx)$/;"	f	file:
windows_kernel_driver_active	libusb/os/windows_usb.c	/^static int windows_kernel_driver_active(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
windows_open	libusb/os/windows_usb.c	/^static int windows_open(struct libusb_device_handle *dev_handle)$/;"	f	file:
windows_release_interface	libusb/os/windows_usb.c	/^static int windows_release_interface(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
windows_reset_device	libusb/os/windows_usb.c	/^static int windows_reset_device(struct libusb_device_handle *dev_handle)$/;"	f	file:
windows_set_configuration	libusb/os/windows_usb.c	/^static int windows_set_configuration(struct libusb_device_handle *dev_handle, int config)$/;"	f	file:
windows_set_interface_altsetting	libusb/os/windows_usb.c	/^static int windows_set_interface_altsetting(struct libusb_device_handle *dev_handle, int iface, int altsetting)$/;"	f	file:
windows_submit_transfer	libusb/os/windows_usb.c	/^static int windows_submit_transfer(struct usbi_transfer *itransfer)$/;"	f	file:
windows_transfer_callback	libusb/os/windows_usb.c	/^static void windows_transfer_callback(struct usbi_transfer *itransfer, uint32_t io_result, uint32_t io_size)$/;"	f	file:
windows_transfer_priv	libusb/os/windows_usb.h	/^struct windows_transfer_priv {$/;"	s
windows_usb_api_backend	libusb/os/windows_usb.h	/^struct windows_usb_api_backend {$/;"	s
windows_version	libusb/os/poll_windows.h	/^enum windows_version {$/;"	g
windows_version	libusb/os/wince_usb.c	/^enum windows_version windows_version = WINDOWS_CE;$/;"	v	typeref:enum:windows_version
windows_version	libusb/os/windows_usb.c	/^enum windows_version windows_version = WINDOWS_UNSUPPORTED;$/;"	v	typeref:enum:windows_version
winfd	libusb/os/poll_windows.h	/^struct winfd {$/;"	s
wint_t	msvc/stdint.h	/^  typedef unsigned short wint_t;$/;"	t
winusb_interface	libusb/os/windows_usb.h	/^struct winusb_interface {$/;"	s
winusbx_abort_control	libusb/os/windows_usb.c	/^static int winusbx_abort_control(int sub_api, struct usbi_transfer *itransfer)$/;"	f	file:
winusbx_abort_transfers	libusb/os/windows_usb.c	/^static int winusbx_abort_transfers(int sub_api, struct usbi_transfer *itransfer)$/;"	f	file:
winusbx_claim_interface	libusb/os/windows_usb.c	/^static int winusbx_claim_interface(int sub_api, struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
winusbx_clear_halt	libusb/os/windows_usb.c	/^static int winusbx_clear_halt(int sub_api, struct libusb_device_handle *dev_handle, unsigned char endpoint)$/;"	f	file:
winusbx_close	libusb/os/windows_usb.c	/^static void winusbx_close(int sub_api, struct libusb_device_handle *dev_handle)$/;"	f	file:
winusbx_configure_endpoints	libusb/os/windows_usb.c	/^static int winusbx_configure_endpoints(int sub_api, struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
winusbx_copy_transfer_data	libusb/os/windows_usb.c	/^static int winusbx_copy_transfer_data(int sub_api, struct usbi_transfer *itransfer, uint32_t io_size)$/;"	f	file:
winusbx_driver_names	libusb/os/windows_usb.c	/^const char* winusbx_driver_names[] = WINUSBX_DRV_NAMES;$/;"	v
winusbx_exit	libusb/os/windows_usb.c	/^static int winusbx_exit(int sub_api)$/;"	f	file:
winusbx_init	libusb/os/windows_usb.c	/^static int winusbx_init(int sub_api, struct libusb_context *ctx)$/;"	f	file:
winusbx_open	libusb/os/windows_usb.c	/^static int winusbx_open(int sub_api, struct libusb_device_handle *dev_handle)$/;"	f	file:
winusbx_release_interface	libusb/os/windows_usb.c	/^static int winusbx_release_interface(int sub_api, struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:
winusbx_reset_device	libusb/os/windows_usb.c	/^static int winusbx_reset_device(int sub_api, struct libusb_device_handle *dev_handle)$/;"	f	file:
winusbx_set_interface_altsetting	libusb/os/windows_usb.c	/^static int winusbx_set_interface_altsetting(int sub_api, struct libusb_device_handle *dev_handle, int iface, int altsetting)$/;"	f	file:
winusbx_submit_bulk_transfer	libusb/os/windows_usb.c	/^static int winusbx_submit_bulk_transfer(int sub_api, struct usbi_transfer *itransfer)$/;"	f	file:
winusbx_submit_control_transfer	libusb/os/windows_usb.c	/^static int winusbx_submit_control_transfer(int sub_api, struct usbi_transfer *itransfer)$/;"	f	file:
